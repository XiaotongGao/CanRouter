
./out/example_can_fd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d88  00005000  00005000  000000c0  2**6
                  CONTENTS, ALLOC, LOAD, CODE
  1 .ARM.exidx    00000008  00007d88  00007d88  00002e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .copy.table   00000018  00007d90  00007d90  00002e50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .zero.table   00000008  00007da8  00007da8  00002e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000450  10000000  00007db0  00002e70  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data2        00000000  20000000  20000000  000032c0  2**0
                  CONTENTS
  6 .bss          000002b4  10000450  10000450  000032c0  2**2
                  ALLOC
  7 .bss2         00000000  20000000  20000000  000032c0  2**0
                  CONTENTS
  8 .heap         0000000c  10000704  10000704  000032c0  2**0
                  CONTENTS
  9 .stack        00000400  1000fc00  1000fc00  000032cc  2**0
                  CONTENTS
 10 .ARM.attributes 00000030  00000000  00000000  000036cc  2**0
                  CONTENTS, READONLY
 11 .comment      0000007e  00000000  00000000  000036fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006030  00000000  00000000  0000377a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001067  00000000  00000000  000097aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b55  00000000  00000000  0000a811  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000f8  00000000  00000000  0000b366  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00001300  00000000  00000000  0000b45e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000012c4  00000000  00000000  0000c75e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame  00000590  00000000  00000000  0000da24  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 000000d8  00000000  00000000  0000dfb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00005000 <__Vectors>:
    5000:	00 00 01 10 9d 51 00 00 99 51 00 00 99 51 00 00     .....Q...Q...Q..
    5010:	99 51 00 00 99 51 00 00 99 51 00 00 66 16 fd ef     .Q...Q...Q..f...
	...
    502c:	99 51 00 00 99 51 00 00 00 00 00 00 99 51 00 00     .Q...Q.......Q..
    503c:	99 51 00 00 99 51 00 00 99 51 00 00 99 51 00 00     .Q...Q...Q...Q..
    504c:	99 51 00 00 99 51 00 00 99 51 00 00 99 51 00 00     .Q...Q...Q...Q..
    505c:	99 51 00 00 99 51 00 00 99 51 00 00 99 51 00 00     .Q...Q...Q...Q..
    506c:	99 51 00 00 99 51 00 00 99 51 00 00 99 51 00 00     .Q...Q...Q...Q..
    507c:	99 51 00 00 99 51 00 00 99 51 00 00 99 51 00 00     .Q...Q...Q...Q..
    508c:	99 51 00 00 99 51 00 00 99 51 00 00 99 51 00 00     .Q...Q...Q...Q..
    509c:	99 51 00 00 99 51 00 00 99 51 00 00 99 51 00 00     .Q...Q...Q...Q..
    50ac:	99 51 00 00 99 51 00 00 99 51 00 00 99 51 00 00     .Q...Q...Q...Q..
    50bc:	99 51 00 00 99 51 00 00 99 51 00 00 99 51 00 00     .Q...Q...Q...Q..
    50cc:	99 51 00 00 99 51 00 00 99 51 00 00 99 51 00 00     .Q...Q...Q...Q..
    50dc:	99 51 00 00 99 51 00 00                             .Q...Q..

000050e4 <__do_global_dtors_aux>:
    50e4:	b510      	push	{r4, lr}
    50e6:	4c05      	ldr	r4, [pc, #20]	; (50fc <__do_global_dtors_aux+0x18>)
    50e8:	7823      	ldrb	r3, [r4, #0]
    50ea:	b933      	cbnz	r3, 50fa <__do_global_dtors_aux+0x16>
    50ec:	4b04      	ldr	r3, [pc, #16]	; (5100 <__do_global_dtors_aux+0x1c>)
    50ee:	b113      	cbz	r3, 50f6 <__do_global_dtors_aux+0x12>
    50f0:	4804      	ldr	r0, [pc, #16]	; (5104 <__do_global_dtors_aux+0x20>)
    50f2:	f3af 8000 	nop.w
    50f6:	2301      	movs	r3, #1
    50f8:	7023      	strb	r3, [r4, #0]
    50fa:	bd10      	pop	{r4, pc}
    50fc:	10000450 	.word	0x10000450
    5100:	00000000 	.word	0x00000000
    5104:	00007d84 	.word	0x00007d84

00005108 <frame_dummy>:
    5108:	b508      	push	{r3, lr}
    510a:	4b03      	ldr	r3, [pc, #12]	; (5118 <frame_dummy+0x10>)
    510c:	b11b      	cbz	r3, 5116 <frame_dummy+0xe>
    510e:	4903      	ldr	r1, [pc, #12]	; (511c <frame_dummy+0x14>)
    5110:	4803      	ldr	r0, [pc, #12]	; (5120 <frame_dummy+0x18>)
    5112:	f3af 8000 	nop.w
    5116:	bd08      	pop	{r3, pc}
    5118:	00000000 	.word	0x00000000
    511c:	10000454 	.word	0x10000454
    5120:	00007d84 	.word	0x00007d84

00005124 <_mainCRTStartup>:
    5124:	4b15      	ldr	r3, [pc, #84]	; (517c <_mainCRTStartup+0x58>)
    5126:	2b00      	cmp	r3, #0
    5128:	bf08      	it	eq
    512a:	4b13      	ldreq	r3, [pc, #76]	; (5178 <_mainCRTStartup+0x54>)
    512c:	469d      	mov	sp, r3
    512e:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
    5132:	2100      	movs	r1, #0
    5134:	468b      	mov	fp, r1
    5136:	460f      	mov	r7, r1
    5138:	4813      	ldr	r0, [pc, #76]	; (5188 <_mainCRTStartup+0x64>)
    513a:	4a14      	ldr	r2, [pc, #80]	; (518c <_mainCRTStartup+0x68>)
    513c:	1a12      	subs	r2, r2, r0
    513e:	f002 fa6d 	bl	761c <memset>
    5142:	4b0f      	ldr	r3, [pc, #60]	; (5180 <_mainCRTStartup+0x5c>)
    5144:	2b00      	cmp	r3, #0
    5146:	d000      	beq.n	514a <_mainCRTStartup+0x26>
    5148:	4798      	blx	r3
    514a:	4b0e      	ldr	r3, [pc, #56]	; (5184 <_mainCRTStartup+0x60>)
    514c:	2b00      	cmp	r3, #0
    514e:	d000      	beq.n	5152 <_mainCRTStartup+0x2e>
    5150:	4798      	blx	r3
    5152:	2000      	movs	r0, #0
    5154:	2100      	movs	r1, #0
    5156:	0004      	movs	r4, r0
    5158:	000d      	movs	r5, r1
    515a:	480d      	ldr	r0, [pc, #52]	; (5190 <_mainCRTStartup+0x6c>)
    515c:	2800      	cmp	r0, #0
    515e:	d002      	beq.n	5166 <_mainCRTStartup+0x42>
    5160:	480c      	ldr	r0, [pc, #48]	; (5194 <_mainCRTStartup+0x70>)
    5162:	f002 fbe7 	bl	7934 <atexit>
    5166:	f002 fa35 	bl	75d4 <__libc_init_array>
    516a:	0020      	movs	r0, r4
    516c:	0029      	movs	r1, r5
    516e:	f000 f9d3 	bl	5518 <main>
    5172:	f002 fa1f 	bl	75b4 <exit>
    5176:	bf00      	nop
    5178:	00080000 	.word	0x00080000
    517c:	10010000 	.word	0x10010000
	...
    5188:	10000450 	.word	0x10000450
    518c:	10000704 	.word	0x10000704
    5190:	00007935 	.word	0x00007935
    5194:	00007941 	.word	0x00007941

00005198 <Default_Handler>:

/*----------------------------------------------------------------------------
  Default Handler for Exceptions / Interrupts
 *----------------------------------------------------------------------------*/
void Default_Handler(void)
{
    5198:	e7fe      	b.n	5198 <Default_Handler>
    519a:	bf00      	nop

0000519c <Reset_Handler>:
{
    519c:	b508      	push	{r3, lr}
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    519e:	4b1d      	ldr	r3, [pc, #116]	; (5214 <Reset_Handler+0x78>)
    51a0:	f383 8808 	msr	MSP, r3
  SystemInit();                             /* CMSIS System Initialization */
    51a4:	f000 f966 	bl	5474 <SystemInit>
  for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable) {
    51a8:	4d1b      	ldr	r5, [pc, #108]	; (5218 <Reset_Handler+0x7c>)
    51aa:	481c      	ldr	r0, [pc, #112]	; (521c <Reset_Handler+0x80>)
    51ac:	42a8      	cmp	r0, r5
    51ae:	d211      	bcs.n	51d4 <Reset_Handler+0x38>
    for(uint32_t i=0u; i<pTable->wlen; ++i) {
    51b0:	6883      	ldr	r3, [r0, #8]
    51b2:	b163      	cbz	r3, 51ce <Reset_Handler+0x32>
    51b4:	e9d0 1200 	ldrd	r1, r2, [r0]
    51b8:	2300      	movs	r3, #0
    51ba:	3904      	subs	r1, #4
    51bc:	3a04      	subs	r2, #4
      pTable->dest[i] = pTable->src[i];
    51be:	f851 4f04 	ldr.w	r4, [r1, #4]!
    51c2:	f842 4f04 	str.w	r4, [r2, #4]!
    for(uint32_t i=0u; i<pTable->wlen; ++i) {
    51c6:	6884      	ldr	r4, [r0, #8]
    51c8:	3301      	adds	r3, #1
    51ca:	42a3      	cmp	r3, r4
    51cc:	d3f7      	bcc.n	51be <Reset_Handler+0x22>
  for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable) {
    51ce:	300c      	adds	r0, #12
    51d0:	42a8      	cmp	r0, r5
    51d2:	d3ed      	bcc.n	51b0 <Reset_Handler+0x14>
  for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable) {
    51d4:	4a12      	ldr	r2, [pc, #72]	; (5220 <Reset_Handler+0x84>)
    51d6:	4d13      	ldr	r5, [pc, #76]	; (5224 <Reset_Handler+0x88>)
    51d8:	42aa      	cmp	r2, r5
    51da:	d219      	bcs.n	5210 <Reset_Handler+0x74>
    51dc:	f102 0008 	add.w	r0, r2, #8
    51e0:	3507      	adds	r5, #7
    51e2:	1a2d      	subs	r5, r5, r0
    51e4:	f025 0507 	bic.w	r5, r5, #7
    51e8:	3210      	adds	r2, #16
    51ea:	4415      	add	r5, r2
      pTable->dest[i] = 0u;
    51ec:	2400      	movs	r4, #0
    for(uint32_t i=0u; i<pTable->wlen; ++i) {
    51ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
    51f2:	b153      	cbz	r3, 520a <Reset_Handler+0x6e>
    51f4:	f850 2c08 	ldr.w	r2, [r0, #-8]
    51f8:	2300      	movs	r3, #0
    51fa:	3a04      	subs	r2, #4
      pTable->dest[i] = 0u;
    51fc:	f842 4f04 	str.w	r4, [r2, #4]!
    for(uint32_t i=0u; i<pTable->wlen; ++i) {
    5200:	f850 1c04 	ldr.w	r1, [r0, #-4]
    5204:	3301      	adds	r3, #1
    5206:	428b      	cmp	r3, r1
    5208:	d3f8      	bcc.n	51fc <Reset_Handler+0x60>
    520a:	3008      	adds	r0, #8
  for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable) {
    520c:	42a8      	cmp	r0, r5
    520e:	d1ee      	bne.n	51ee <Reset_Handler+0x52>
  _start();
    5210:	f7ff ff88 	bl	5124 <_mainCRTStartup>
    5214:	10010000 	.word	0x10010000
    5218:	00007da8 	.word	0x00007da8
    521c:	00007d90 	.word	0x00007d90
    5220:	00007da8 	.word	0x00007da8
    5224:	00007db0 	.word	0x00007db0

00005228 <SystemCoreClockUpdate>:
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
  /* Determine clock frequency according to clock register values             */
  if ((LPC_SC->CCLKSEL &0x100) == 0) {            /* cclk = sysclk    */
    5228:	4b7b      	ldr	r3, [pc, #492]	; (5418 <SystemCoreClockUpdate+0x1f0>)
    522a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    522e:	05d0      	lsls	r0, r2, #23
{
    5230:	b470      	push	{r4, r5, r6}
  if ((LPC_SC->CCLKSEL &0x100) == 0) {            /* cclk = sysclk    */
    5232:	d443      	bmi.n	52bc <SystemCoreClockUpdate+0x94>
    if ((LPC_SC->CLKSRCSEL & 0x01) == 0) {    /* sysclk = irc_clk */
    5234:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    5238:	07d1      	lsls	r1, r2, #31
    523a:	d459      	bmi.n	52f0 <SystemCoreClockUpdate+0xc8>
		  SystemCoreClock = __CLK_DIV(IRC_OSC , (LPC_SC->CCLKSEL & 0x1F));
    523c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    5240:	f012 021f 	ands.w	r2, r2, #31
    5244:	d006      	beq.n	5254 <SystemCoreClockUpdate+0x2c>
    5246:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    524a:	4a74      	ldr	r2, [pc, #464]	; (541c <SystemCoreClockUpdate+0x1f4>)
    524c:	f003 031f 	and.w	r3, r3, #31
    5250:	fbb2 f2f3 	udiv	r2, r2, r3
    5254:	4b72      	ldr	r3, [pc, #456]	; (5420 <SystemCoreClockUpdate+0x1f8>)
          PeripheralClock = __CLK_DIV(IRC_OSC , (LPC_SC->PCLKSEL & 0x1F));
    5256:	4870      	ldr	r0, [pc, #448]	; (5418 <SystemCoreClockUpdate+0x1f0>)
		  SystemCoreClock = __CLK_DIV(IRC_OSC , (LPC_SC->CCLKSEL & 0x1F));
    5258:	601a      	str	r2, [r3, #0]
          PeripheralClock = __CLK_DIV(IRC_OSC , (LPC_SC->PCLKSEL & 0x1F));
    525a:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
    525e:	f011 011f 	ands.w	r1, r1, #31
    5262:	d006      	beq.n	5272 <SystemCoreClockUpdate+0x4a>
    5264:	f8d0 01a8 	ldr.w	r0, [r0, #424]	; 0x1a8
    5268:	496c      	ldr	r1, [pc, #432]	; (541c <SystemCoreClockUpdate+0x1f4>)
    526a:	f000 001f 	and.w	r0, r0, #31
    526e:	fbb1 f1f0 	udiv	r1, r1, r0
          EMCClock        = 0;
      }
      else {
          SystemCoreClock = __CLK_DIV(OSC_CLK , (LPC_SC->CCLKSEL & 0x1F));
          PeripheralClock = __CLK_DIV(OSC_CLK , (LPC_SC->PCLKSEL & 0x1F));
          EMCClock        = (SystemCoreClock / ((LPC_SC->EMCCLKSEL & 0x01)+1));
    5272:	4869      	ldr	r0, [pc, #420]	; (5418 <SystemCoreClockUpdate+0x1f0>)
          PeripheralClock = __CLK_DIV(OSC_CLK , (LPC_SC->PCLKSEL & 0x1F));
    5274:	6059      	str	r1, [r3, #4]
          EMCClock        = (SystemCoreClock / ((LPC_SC->EMCCLKSEL & 0x01)+1));
    5276:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    527a:	f001 0101 	and.w	r1, r1, #1
    527e:	3101      	adds	r1, #1
    5280:	fbb2 f2f1 	udiv	r2, r2, r1
    5284:	609a      	str	r2, [r3, #8]
        }
      }
    }
  }
  /* ---update USBClock------------------*/
  if(LPC_SC->USBCLKSEL & (0x01<<8))//Use PLL0 as the input to the USB clock divider
    5286:	4a64      	ldr	r2, [pc, #400]	; (5418 <SystemCoreClockUpdate+0x1f0>)
    5288:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
    528c:	05cc      	lsls	r4, r1, #23
    528e:	d423      	bmi.n	52d8 <SystemCoreClockUpdate+0xb0>
            break;
	  default:
		  USBClock = 0;  /* this should never happen! */
	  }
  }
  else if(LPC_SC->USBCLKSEL & (0x02<<8))//usb_input_clk = alt_pll (pll1)
    5290:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
    5294:	f411 7100 	ands.w	r1, r1, #512	; 0x200
    5298:	d074      	beq.n	5384 <SystemCoreClockUpdate+0x15c>
  {
	  if(LPC_SC->CLKSRCSEL & 0x01)	//pll1_clk_in = main_osc
    529a:	f8d2 110c 	ldr.w	r1, [r2, #268]	; 0x10c
    529e:	07c9      	lsls	r1, r1, #31
	  		USBClock = (OSC_CLK * ((LPC_SC->PLL1STAT & 0x1F) + 1));
    52a0:	bf4b      	itete	mi
    52a2:	f8d2 10a8 	ldrmi.w	r1, [r2, #168]	; 0xa8
	  else //pll1_clk_in = irc_clk
	  		USBClock = (IRC_OSC * ((LPC_SC->PLL0STAT & 0x1F) + 1));
    52a6:	f8d2 1088 	ldrpl.w	r1, [r2, #136]	; 0x88
	  		USBClock = (OSC_CLK * ((LPC_SC->PLL1STAT & 0x1F) + 1));
    52aa:	4a5e      	ldrmi	r2, [pc, #376]	; (5424 <SystemCoreClockUpdate+0x1fc>)
	  		USBClock = (IRC_OSC * ((LPC_SC->PLL0STAT & 0x1F) + 1));
    52ac:	4a5b      	ldrpl	r2, [pc, #364]	; (541c <SystemCoreClockUpdate+0x1f4>)
    52ae:	f001 011f 	and.w	r1, r1, #31
    52b2:	fb01 2202 	mla	r2, r1, r2, r2
    52b6:	60da      	str	r2, [r3, #12]
  }
  else
	  USBClock = 0; /* this should never happen! */
}
    52b8:	bc70      	pop	{r4, r5, r6}
    52ba:	4770      	bx	lr
    if ((LPC_SC->PLL0STAT & 0x100) == 0) {        /* PLL0 not enabled */
    52bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    52c0:	05d6      	lsls	r6, r2, #23
    52c2:	d435      	bmi.n	5330 <SystemCoreClockUpdate+0x108>
          SystemCoreClock = 0;                      /* this should never happen! */
    52c4:	4b56      	ldr	r3, [pc, #344]	; (5420 <SystemCoreClockUpdate+0x1f8>)
    52c6:	2200      	movs	r2, #0
          PeripheralClock = 0;
    52c8:	e9c3 2200 	strd	r2, r2, [r3]
          EMCClock        = 0;
    52cc:	609a      	str	r2, [r3, #8]
  if(LPC_SC->USBCLKSEL & (0x01<<8))//Use PLL0 as the input to the USB clock divider
    52ce:	4a52      	ldr	r2, [pc, #328]	; (5418 <SystemCoreClockUpdate+0x1f0>)
    52d0:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
    52d4:	05cc      	lsls	r4, r1, #23
    52d6:	d5db      	bpl.n	5290 <SystemCoreClockUpdate+0x68>
	  switch (LPC_SC->USBCLKSEL & 0x1F)
    52d8:	f8d2 2108 	ldr.w	r2, [r2, #264]	; 0x108
    52dc:	f002 021f 	and.w	r2, r2, #31
    52e0:	2a04      	cmp	r2, #4
    52e2:	d073      	beq.n	53cc <SystemCoreClockUpdate+0x1a4>
    52e4:	2a06      	cmp	r2, #6
    52e6:	d071      	beq.n	53cc <SystemCoreClockUpdate+0x1a4>
		  USBClock = 0; //no clock will be provided to the USB subsystem
    52e8:	2200      	movs	r2, #0
    52ea:	60da      	str	r2, [r3, #12]
}
    52ec:	bc70      	pop	{r4, r5, r6}
    52ee:	4770      	bx	lr
      if ((LPC_SC->SCS & 0x40) == 0) {
    52f0:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
    52f4:	0652      	lsls	r2, r2, #25
    52f6:	d5e5      	bpl.n	52c4 <SystemCoreClockUpdate+0x9c>
          SystemCoreClock = __CLK_DIV(OSC_CLK , (LPC_SC->CCLKSEL & 0x1F));
    52f8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    52fc:	f012 021f 	ands.w	r2, r2, #31
    5300:	d006      	beq.n	5310 <SystemCoreClockUpdate+0xe8>
    5302:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    5306:	4a47      	ldr	r2, [pc, #284]	; (5424 <SystemCoreClockUpdate+0x1fc>)
    5308:	f003 031f 	and.w	r3, r3, #31
    530c:	fbb2 f2f3 	udiv	r2, r2, r3
    5310:	4b43      	ldr	r3, [pc, #268]	; (5420 <SystemCoreClockUpdate+0x1f8>)
          PeripheralClock = __CLK_DIV(OSC_CLK , (LPC_SC->PCLKSEL & 0x1F));
    5312:	4841      	ldr	r0, [pc, #260]	; (5418 <SystemCoreClockUpdate+0x1f0>)
          SystemCoreClock = __CLK_DIV(OSC_CLK , (LPC_SC->CCLKSEL & 0x1F));
    5314:	601a      	str	r2, [r3, #0]
          PeripheralClock = __CLK_DIV(OSC_CLK , (LPC_SC->PCLKSEL & 0x1F));
    5316:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
    531a:	f011 011f 	ands.w	r1, r1, #31
    531e:	d0a8      	beq.n	5272 <SystemCoreClockUpdate+0x4a>
    5320:	f8d0 01a8 	ldr.w	r0, [r0, #424]	; 0x1a8
    5324:	493f      	ldr	r1, [pc, #252]	; (5424 <SystemCoreClockUpdate+0x1fc>)
    5326:	f000 001f 	and.w	r0, r0, #31
    532a:	fbb1 f1f0 	udiv	r1, r1, r0
    532e:	e7a0      	b.n	5272 <SystemCoreClockUpdate+0x4a>
      if ((LPC_SC->CLKSRCSEL & 0x01) == 0) {    /* sysclk = irc_clk */
    5330:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    5334:	f012 0201 	ands.w	r2, r2, #1
    5338:	d127      	bne.n	538a <SystemCoreClockUpdate+0x162>
          uint8_t mul = ((LPC_SC->PLL0STAT & 0x1F) + 1);
    533a:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
          uint8_t cpu_div = (LPC_SC->CCLKSEL & 0x1F);
    533e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
          uint8_t per_div = (LPC_SC->PCLKSEL & 0x1F);
    5342:	f8d3 01a8 	ldr.w	r0, [r3, #424]	; 0x1a8
          uint8_t emc_div = (LPC_SC->EMCCLKSEL & 0x01)+1;
    5346:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
          uint8_t mul = ((LPC_SC->PLL0STAT & 0x1F) + 1);
    534a:	f004 041f 	and.w	r4, r4, #31
    534e:	1c66      	adds	r6, r4, #1
          SystemCoreClock = __CLK_DIV(IRC_OSC * mul , cpu_div);
    5350:	f011 041f 	ands.w	r4, r1, #31
          uint8_t per_div = (LPC_SC->PCLKSEL & 0x1F);
    5354:	f000 001f 	and.w	r0, r0, #31
          SystemCoreClock = __CLK_DIV(IRC_OSC * mul , cpu_div);
    5358:	d04f      	beq.n	53fa <SystemCoreClockUpdate+0x1d2>
    535a:	4d30      	ldr	r5, [pc, #192]	; (541c <SystemCoreClockUpdate+0x1f4>)
          uint8_t emc_div = (LPC_SC->EMCCLKSEL & 0x01)+1;
    535c:	f003 0101 	and.w	r1, r3, #1
    5360:	3101      	adds	r1, #1
          SystemCoreClock = __CLK_DIV(IRC_OSC * mul , cpu_div);
    5362:	fb05 f306 	mul.w	r3, r5, r6
    5366:	fbb3 f4f4 	udiv	r4, r3, r4
    536a:	fbb4 f1f1 	udiv	r1, r4, r1
    536e:	4b2c      	ldr	r3, [pc, #176]	; (5420 <SystemCoreClockUpdate+0x1f8>)
    5370:	601c      	str	r4, [r3, #0]
          PeripheralClock = __CLK_DIV(IRC_OSC * mul , per_div);
    5372:	b120      	cbz	r0, 537e <SystemCoreClockUpdate+0x156>
    5374:	4a29      	ldr	r2, [pc, #164]	; (541c <SystemCoreClockUpdate+0x1f4>)
    5376:	fb02 f206 	mul.w	r2, r2, r6
    537a:	fbb2 f2f0 	udiv	r2, r2, r0
          EMCClock        = SystemCoreClock / emc_div;
    537e:	e9c3 2101 	strd	r2, r1, [r3, #4]
    5382:	e7a4      	b.n	52ce <SystemCoreClockUpdate+0xa6>
	  USBClock = 0; /* this should never happen! */
    5384:	60d9      	str	r1, [r3, #12]
}
    5386:	bc70      	pop	{r4, r5, r6}
    5388:	4770      	bx	lr
        if ((LPC_SC->SCS & 0x40) == 0) {
    538a:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
    538e:	0655      	lsls	r5, r2, #25
    5390:	d598      	bpl.n	52c4 <SystemCoreClockUpdate+0x9c>
          uint8_t mul = ((LPC_SC->PLL0STAT & 0x1F) + 1);
    5392:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
          uint8_t cpu_div = (LPC_SC->CCLKSEL & 0x1F);
    5396:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
          uint8_t per_div = (LPC_SC->PCLKSEL & 0x1F);
    539a:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
		  uint8_t emc_div = (LPC_SC->EMCCLKSEL & 0x01)+1;
    539e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
          uint8_t mul = ((LPC_SC->PLL0STAT & 0x1F) + 1);
    53a2:	f000 001f 	and.w	r0, r0, #31
          SystemCoreClock = __CLK_DIV(OSC_CLK * mul , cpu_div);
    53a6:	f012 021f 	ands.w	r2, r2, #31
          uint8_t mul = ((LPC_SC->PLL0STAT & 0x1F) + 1);
    53aa:	f100 0001 	add.w	r0, r0, #1
          uint8_t per_div = (LPC_SC->PCLKSEL & 0x1F);
    53ae:	f001 011f 	and.w	r1, r1, #31
          SystemCoreClock = __CLK_DIV(OSC_CLK * mul , cpu_div);
    53b2:	d125      	bne.n	5400 <SystemCoreClockUpdate+0x1d8>
    53b4:	4614      	mov	r4, r2
    53b6:	4b1a      	ldr	r3, [pc, #104]	; (5420 <SystemCoreClockUpdate+0x1f8>)
    53b8:	601c      	str	r4, [r3, #0]
          PeripheralClock = __CLK_DIV(OSC_CLK * mul , per_div);
    53ba:	b121      	cbz	r1, 53c6 <SystemCoreClockUpdate+0x19e>
    53bc:	4c19      	ldr	r4, [pc, #100]	; (5424 <SystemCoreClockUpdate+0x1fc>)
    53be:	fb04 f000 	mul.w	r0, r4, r0
    53c2:	fbb0 f1f1 	udiv	r1, r0, r1
          EMCClock        = SystemCoreClock / emc_div;
    53c6:	e9c3 1201 	strd	r1, r2, [r3, #4]
    53ca:	e780      	b.n	52ce <SystemCoreClockUpdate+0xa6>
                 uint8_t mul = ((LPC_SC->PLL0STAT & 0x1F) + 1);
    53cc:	4812      	ldr	r0, [pc, #72]	; (5418 <SystemCoreClockUpdate+0x1f0>)
    53ce:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
                 uint8_t usb_div = (LPC_SC->USBCLKSEL & 0x1F);
    53d2:	f8d0 1108 	ldr.w	r1, [r0, #264]	; 0x108
		  if(LPC_SC->CLKSRCSEL & 0x01)	//pll_clk_in = main_osc
    53d6:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    53da:	07c0      	lsls	r0, r0, #31
                 uint8_t mul = ((LPC_SC->PLL0STAT & 0x1F) + 1);
    53dc:	f002 021f 	and.w	r2, r2, #31
			  USBClock = OSC_CLK * mul / usb_div;
    53e0:	bf4c      	ite	mi
    53e2:	4810      	ldrmi	r0, [pc, #64]	; (5424 <SystemCoreClockUpdate+0x1fc>)
			  USBClock = IRC_OSC * mul / usb_div;
    53e4:	480d      	ldrpl	r0, [pc, #52]	; (541c <SystemCoreClockUpdate+0x1f4>)
    53e6:	3201      	adds	r2, #1
    53e8:	f001 011f 	and.w	r1, r1, #31
    53ec:	fb00 f202 	mul.w	r2, r0, r2
}
    53f0:	bc70      	pop	{r4, r5, r6}
			  USBClock = IRC_OSC * mul / usb_div;
    53f2:	fbb2 f1f1 	udiv	r1, r2, r1
    53f6:	60d9      	str	r1, [r3, #12]
}
    53f8:	4770      	bx	lr
    53fa:	4611      	mov	r1, r2
          SystemCoreClock = __CLK_DIV(IRC_OSC * mul , cpu_div);
    53fc:	4614      	mov	r4, r2
    53fe:	e7b6      	b.n	536e <SystemCoreClockUpdate+0x146>
          SystemCoreClock = __CLK_DIV(OSC_CLK * mul , cpu_div);
    5400:	4c08      	ldr	r4, [pc, #32]	; (5424 <SystemCoreClockUpdate+0x1fc>)
		  uint8_t emc_div = (LPC_SC->EMCCLKSEL & 0x01)+1;
    5402:	f003 0301 	and.w	r3, r3, #1
    5406:	3301      	adds	r3, #1
          SystemCoreClock = __CLK_DIV(OSC_CLK * mul , cpu_div);
    5408:	fb04 f400 	mul.w	r4, r4, r0
    540c:	fbb4 f4f2 	udiv	r4, r4, r2
    5410:	fbb4 f2f3 	udiv	r2, r4, r3
    5414:	e7cf      	b.n	53b6 <SystemCoreClockUpdate+0x18e>
    5416:	bf00      	nop
    5418:	400fc000 	.word	0x400fc000
    541c:	00b71b00 	.word	0x00b71b00
    5420:	10000004 	.word	0x10000004
    5424:	016e3600 	.word	0x016e3600

00005428 <fpu_init>:
    volatile uint32_t Cpacr;
    volatile uint32_t Mvfr0;
    volatile uint32_t Mvfr1;
    char vfpPresent = 0;

    Mvfr0 = *regMvfr0;
    5428:	4a0d      	ldr	r2, [pc, #52]	; (5460 <fpu_init+0x38>)
    Mvfr1 = *regMvfr1;
    542a:	4b0e      	ldr	r3, [pc, #56]	; (5464 <fpu_init+0x3c>)
    Mvfr0 = *regMvfr0;
    542c:	6812      	ldr	r2, [r2, #0]
{
    542e:	b084      	sub	sp, #16
    Mvfr0 = *regMvfr0;
    5430:	9201      	str	r2, [sp, #4]
    Mvfr1 = *regMvfr1;
    5432:	681b      	ldr	r3, [r3, #0]
    5434:	9302      	str	r3, [sp, #8]

    vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
    5436:	9a01      	ldr	r2, [sp, #4]
    5438:	4b0b      	ldr	r3, [pc, #44]	; (5468 <fpu_init+0x40>)
    543a:	429a      	cmp	r2, r3
    543c:	d001      	beq.n	5442 <fpu_init+0x1a>
        Cpacr = *regCpacr;
        Cpacr |= (0xF << 20);
        *regCpacr = Cpacr;   // enable CP10 and CP11 for full access
    }

}
    543e:	b004      	add	sp, #16
    5440:	4770      	bx	lr
    vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
    5442:	9a02      	ldr	r2, [sp, #8]
    5444:	4b09      	ldr	r3, [pc, #36]	; (546c <fpu_init+0x44>)
    5446:	429a      	cmp	r2, r3
    5448:	d1f9      	bne.n	543e <fpu_init+0x16>
        Cpacr = *regCpacr;
    544a:	4a09      	ldr	r2, [pc, #36]	; (5470 <fpu_init+0x48>)
    544c:	6813      	ldr	r3, [r2, #0]
    544e:	9303      	str	r3, [sp, #12]
        Cpacr |= (0xF << 20);
    5450:	9b03      	ldr	r3, [sp, #12]
    5452:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    5456:	9303      	str	r3, [sp, #12]
        *regCpacr = Cpacr;   // enable CP10 and CP11 for full access
    5458:	9b03      	ldr	r3, [sp, #12]
    545a:	6013      	str	r3, [r2, #0]
}
    545c:	b004      	add	sp, #16
    545e:	4770      	bx	lr
    5460:	e000ef40 	.word	0xe000ef40
    5464:	e000ef44 	.word	0xe000ef44
    5468:	10110021 	.word	0x10110021
    546c:	11000011 	.word	0x11000011
    5470:	e000ed88 	.word	0xe000ed88

00005474 <SystemInit>:
 *
 * @brief  Setup the microcontroller system.
 *         Initialize the System.
 */
void SystemInit (void)
{
    5474:	b538      	push	{r3, r4, r5, lr}
#ifdef CORE_M4
fpu_init();
    5476:	f7ff ffd7 	bl	5428 <fpu_init>
#endif

#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
    547a:	4a23      	ldr	r2, [pc, #140]	; (5508 <SystemInit+0x94>)
    547c:	2331      	movs	r3, #49	; 0x31
    547e:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    5482:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    5486:	0659      	lsls	r1, r3, #25
    5488:	d5fb      	bpl.n	5482 <SystemInit+0xe>
  }

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for sysclk/PLL0*/
    548a:	2101      	movs	r1, #1

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;
    548c:	2504      	movs	r5, #4
  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
  LPC_SC->PLL0FEED  = 0xAA;
    548e:	24aa      	movs	r4, #170	; 0xaa
  LPC_SC->PLL0FEED  = 0x55;
    5490:	2055      	movs	r0, #85	; 0x55
  while (!(LPC_SC->PLL0STAT & (1<<10)));/* Wait for PLOCK0                    */
    5492:	4b1d      	ldr	r3, [pc, #116]	; (5508 <SystemInit+0x94>)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for sysclk/PLL0*/
    5494:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
  LPC_SC->PLL0CFG   = PLL0CFG_Val;
    5498:	f8c2 5084 	str.w	r5, [r2, #132]	; 0x84
  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    549c:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    54a0:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    54a4:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<10)));/* Wait for PLOCK0                    */
    54a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    54ac:	0552      	lsls	r2, r2, #21
    54ae:	d5fb      	bpl.n	54a8 <SystemInit+0x34>
  LPC_SC->PLL1FEED  = 0xAA;
  LPC_SC->PLL1FEED  = 0x55;
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
#endif

  LPC_SC->CCLKSEL   = CCLKSEL_Val;      /* Setup Clock Divider                */
    54b0:	f240 1001 	movw	r0, #257	; 0x101
    54b4:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
  LPC_SC->USBCLKSEL = USBCLKSEL_Val;    /* Setup USB Clock Divider            */
  LPC_SC->EMCCLKSEL = EMCCLKSEL_Val;    /* EMC Clock Selection                */
    54b8:	2101      	movs	r1, #1
  LPC_SC->USBCLKSEL = USBCLKSEL_Val;    /* Setup USB Clock Divider            */
    54ba:	f240 2501 	movw	r5, #513	; 0x201
  LPC_SC->SPIFICLKSEL  = SPIFICLKSEL_Val;  /* SPIFI Clock Selection              */
    54be:	f240 1203 	movw	r2, #259	; 0x103
  LPC_SC->PCLKSEL   = PCLKSEL_Val;      /* Peripheral Clock Selection         */
  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    54c2:	4c12      	ldr	r4, [pc, #72]	; (550c <SystemInit+0x98>)
  LPC_SC->USBCLKSEL = USBCLKSEL_Val;    /* Setup USB Clock Divider            */
    54c4:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    54c8:	2000      	movs	r0, #0
  LPC_SC->EMCCLKSEL = EMCCLKSEL_Val;    /* EMC Clock Selection                */
    54ca:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
  LPC_SC->SPIFICLKSEL  = SPIFICLKSEL_Val;  /* SPIFI Clock Selection              */
    54ce:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  LPC_SC->PCLKSEL   = PCLKSEL_Val;      /* Peripheral Clock Selection         */
    54d2:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
  LPC_SC->FLASHCFG  = FLASHCFG_Val|0x03A;
#endif
#ifdef  __RAM_MODE__
  SCB->VTOR  = 0x10000000 & 0x3FFFFF80;
#else
  SCB->VTOR  = (uint32_t)&__VECTOR_TABLE & 0x3FFFFF80;
    54d6:	4a0e      	ldr	r2, [pc, #56]	; (5510 <SystemInit+0x9c>)
  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    54d8:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    54dc:	f8c3 01c8 	str.w	r0, [r3, #456]	; 0x1c8
  LPC_SC->PBOOST 	|= 0x03;			/* Power Boost control				*/
    54e0:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
  SCB->VTOR  = (uint32_t)&__VECTOR_TABLE & 0x3FFFFF80;
    54e4:	480b      	ldr	r0, [pc, #44]	; (5514 <SystemInit+0xa0>)
    54e6:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  LPC_SC->FLASHCFG  = FLASHCFG_Val|0x03A;
    54ea:	f245 043a 	movw	r4, #20538	; 0x503a
  LPC_SC->PBOOST 	|= 0x03;			/* Power Boost control				*/
    54ee:	f041 0103 	orr.w	r1, r1, #3
  SCB->VTOR  = (uint32_t)&__VECTOR_TABLE & 0x3FFFFF80;
    54f2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  LPC_SC->PBOOST 	|= 0x03;			/* Power Boost control				*/
    54f6:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
  LPC_SC->FLASHCFG  = FLASHCFG_Val|0x03A;
    54fa:	601c      	str	r4, [r3, #0]
  SCB->VTOR  = (uint32_t)&__VECTOR_TABLE & 0x3FFFFF80;
    54fc:	6082      	str	r2, [r0, #8]
#endif
  SystemCoreClockUpdate();
}
    54fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SystemCoreClockUpdate();
    5502:	f7ff be91 	b.w	5228 <SystemCoreClockUpdate>
    5506:	bf00      	nop
    5508:	400fc000 	.word	0x400fc000
    550c:	07f9ae9e 	.word	0x07f9ae9e
    5510:	00005000 	.word	0x00005000
    5514:	e000ed00 	.word	0xe000ed00

00005518 <main>:


// main()
// entry point from startup
int  main ( void)
{
    5518:	b500      	push	{lr}
    551a:	b099      	sub	sp, #100	; 0x64
	// init hardware and timer 0. Timer 0 is free running
	// with 1 us resolution without any IRQ.
	HW_Init();
    551c:	f000 fc48 	bl	5db0 <HW_Init>
	
	// init CAN
	CAN_UserInit();
    5520:	f000 f870 	bl	5604 <CAN_UserInit>
	
	// set green LEDs for CAN1 and CAN2
	HW_SetLED ( HW_LED_CAN1, HW_LED_GREEN);
    5524:	2102      	movs	r1, #2
    5526:	2001      	movs	r0, #1
    5528:	f000 fdb8 	bl	609c <HW_SetLED>
	HW_SetLED ( HW_LED_CAN2, HW_LED_GREEN);
    552c:	2102      	movs	r1, #2
    552e:	4608      	mov	r0, r1
    5530:	f000 fdb4 	bl	609c <HW_SetLED>
    5534:	4c17      	ldr	r4, [pc, #92]	; (5594 <main+0x7c>)
	// main loop
	while ( 1)
	{
		CANRxMsg_t  RxMsg;
		// process messages from CAN1 -> standard CAN
		if ( CAN_UserRead ( CAN_BUS1, &RxMsg ) == CAN_ERR_OK)
    5536:	a901      	add	r1, sp, #4
    5538:	2000      	movs	r0, #0
    553a:	f000 f841 	bl	55c0 <CAN_UserRead>
    553e:	b970      	cbnz	r0, 555e <main+0x46>
		{
			// message received from CAN1
			LED_toggleCAN1 ^= 1;
    5540:	7820      	ldrb	r0, [r4, #0]

			if ( LED_toggleCAN1)
    5542:	2801      	cmp	r0, #1
			LED_toggleCAN1 ^= 1;
    5544:	f080 0301 	eor.w	r3, r0, #1
			{
				HW_SetLED ( HW_LED_CAN1, HW_LED_ORANGE);
    5548:	bf16      	itet	ne
    554a:	2103      	movne	r1, #3
			}
			
			else
			{
				HW_SetLED ( HW_LED_CAN1, HW_LED_GREEN);
    554c:	2102      	moveq	r1, #2
				HW_SetLED ( HW_LED_CAN1, HW_LED_ORANGE);
    554e:	2001      	movne	r0, #1
			LED_toggleCAN1 ^= 1;
    5550:	7023      	strb	r3, [r4, #0]
				HW_SetLED ( HW_LED_CAN1, HW_LED_GREEN);
    5552:	f000 fda3 	bl	609c <HW_SetLED>
				CAN_Write ( CAN_BUS2, &RxMsg );
#endif
			}
#else
			/* forward directly*/
			CAN_Write ( CAN_BUS2, &RxMsg );
    5556:	a901      	add	r1, sp, #4
    5558:	2001      	movs	r0, #1
    555a:	f000 ff31 	bl	63c0 <CAN_Write>
#endif // #if (FOR_MIFA_FVCM | FOR_WM_HDMAP) end
		}


		// process messages from CAN2 -> CAN FD
		if ( CAN_UserRead ( CAN_BUS2, &RxMsg ) == CAN_ERR_OK)
    555e:	a901      	add	r1, sp, #4
    5560:	2001      	movs	r0, #1
    5562:	f000 f82d 	bl	55c0 <CAN_UserRead>
    5566:	2800      	cmp	r0, #0
    5568:	d1e5      	bne.n	5536 <main+0x1e>
		{
			// message received from CAN2
			LED_toggleCAN2 ^= 1;
    556a:	7863      	ldrb	r3, [r4, #1]

			if ( LED_toggleCAN2)
    556c:	2b01      	cmp	r3, #1
				HW_SetLED ( HW_LED_CAN2, HW_LED_ORANGE);
			}
			
			else
			{
				HW_SetLED ( HW_LED_CAN2, HW_LED_GREEN);
    556e:	bf08      	it	eq
    5570:	2102      	moveq	r1, #2
			LED_toggleCAN2 ^= 1;
    5572:	f083 0201 	eor.w	r2, r3, #1
				HW_SetLED ( HW_LED_CAN2, HW_LED_ORANGE);
    5576:	bf1a      	itte	ne
    5578:	2103      	movne	r1, #3
    557a:	2002      	movne	r0, #2
				HW_SetLED ( HW_LED_CAN2, HW_LED_GREEN);
    557c:	4608      	moveq	r0, r1
			LED_toggleCAN2 ^= 1;
    557e:	7062      	strb	r2, [r4, #1]
				HW_SetLED ( HW_LED_CAN2, HW_LED_GREEN);
    5580:	f000 fd8c 	bl	609c <HW_SetLED>
			}
#if (FOR_MIFA_FVCM | FOR_SRR_BYTE | FOR_SRR_BIT)
			if (RxMsg.msgtype == MSGTYPE_FD_CAN)
    5584:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    5588:	2b30      	cmp	r3, #48	; 0x30
    558a:	d1d4      	bne.n	5536 <main+0x1e>
						// forward message to CAN1 -> standard CAN 
						CAN_Write ( CAN_BUS1, &RxMsg );
					}
				}
#elif (FOR_SRR_BIT == ON)
				srr_canfd2can_route_by_signals(&RxMsg);
    558c:	a801      	add	r0, sp, #4
    558e:	f000 f8fb 	bl	5788 <srr_canfd2can_route_by_signals>
	{
    5592:	e7d0      	b.n	5536 <main+0x1e>
    5594:	1000046c 	.word	0x1000046c

00005598 <CAN_UserInvokeBootloader>:

//! @brief      invoke CAN bootloader
//! @param[in]  settings  select set of bitrates for CAN buses (see code below)
void  CAN_UserInvokeBootloader ( uint8_t  settings)
{
	if ( settings == 1)
    5598:	2801      	cmp	r0, #1
    559a:	d004      	beq.n	55a6 <CAN_UserInvokeBootloader+0xe>
	{
		// with this path the bootloader will use it's default timing
		HW_JumpToBootloader ( NULL);
	}

	else if ( settings == 2)
    559c:	2802      	cmp	r0, #2
    559e:	d008      	beq.n	55b2 <CAN_UserInvokeBootloader+0x1a>
		};

		HW_JumpToBootloader ( &TimingForBootloader[0]);
	}

	else if ( settings == 3)
    55a0:	2803      	cmp	r0, #3
    55a2:	d003      	beq.n	55ac <CAN_UserInvokeBootloader+0x14>
	{
		// with this path the bootloader will use the timings from application.
		HW_JumpToBootloader ( &Timing_CANx[0]);
	}

}
    55a4:	4770      	bx	lr
		HW_JumpToBootloader ( NULL);
    55a6:	2000      	movs	r0, #0
    55a8:	f000 bdbe 	b.w	6128 <HW_JumpToBootloader>
		HW_JumpToBootloader ( &Timing_CANx[0]);
    55ac:	4802      	ldr	r0, [pc, #8]	; (55b8 <CAN_UserInvokeBootloader+0x20>)
    55ae:	f000 bdbb 	b.w	6128 <HW_JumpToBootloader>
		HW_JumpToBootloader ( &TimingForBootloader[0]);
    55b2:	4802      	ldr	r0, [pc, #8]	; (55bc <CAN_UserInvokeBootloader+0x24>)
    55b4:	f000 bdb8 	b.w	6128 <HW_JumpToBootloader>
    55b8:	00007ab0 	.word	0x00007ab0
    55bc:	00007a88 	.word	0x00007a88

000055c0 <CAN_UserRead>:


// CAN_UserRead
// This wrapper is used to pre-process some incoming data.
CANResult_t  CAN_UserRead ( CANHandle_t  hBus, void  *buff)
{
    55c0:	b538      	push	{r3, r4, r5, lr}
    55c2:	4605      	mov	r5, r0
    55c4:	460c      	mov	r4, r1
	
	
	ret = CAN_ERR_RX_EMPTY;
	rx_buff = buff;
	
	if ( CAN_Read ( hBus, rx_buff) == CAN_ERR_OK)
    55c6:	f000 ffc9 	bl	655c <CAN_Read>
    55ca:	b950      	cbnz	r0, 55e2 <CAN_UserRead+0x22>
	{
		// buffer read from CANx. Check type of buffer.
		switch ( rx_buff->bufftype)
    55cc:	8863      	ldrh	r3, [r4, #2]
    55ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
    55d2:	2b01      	cmp	r3, #1
    55d4:	d006      	beq.n	55e4 <CAN_UserRead+0x24>
    55d6:	2b03      	cmp	r3, #3
    55d8:	d103      	bne.n	55e2 <CAN_UserRead+0x22>
		{
			case CAN_BUFFER_STATUS:
				// the buffer is a status notification from the CAN controller.
				if ( /*!busOFF[hBus]  &&*/  rx_buff->status.bus_status)
    55da:	f994 300c 	ldrsb.w	r3, [r4, #12]
    55de:	2b00      	cmp	r3, #0
    55e0:	db01      	blt.n	55e6 <CAN_UserRead+0x26>
	ret = CAN_ERR_RX_EMPTY;
    55e2:	2001      	movs	r0, #1
				break;
		}
	}
	
	return ret;
}
    55e4:	bd38      	pop	{r3, r4, r5, pc}
					CAN_UnInitialize ( hBus);
    55e6:	4628      	mov	r0, r5
    55e8:	f001 f828 	bl	663c <CAN_UnInitialize>
					CAN_Initialize ( hBus, &Timing_CANx[hBus]);
    55ec:	4b04      	ldr	r3, [pc, #16]	; (5600 <CAN_UserRead+0x40>)
    55ee:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    55f2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    55f6:	4628      	mov	r0, r5
    55f8:	f001 f834 	bl	6664 <CAN_Initialize>
	ret = CAN_ERR_RX_EMPTY;
    55fc:	2001      	movs	r0, #1
}
    55fe:	bd38      	pop	{r3, r4, r5, pc}
    5600:	00007ab0 	.word	0x00007ab0

00005604 <CAN_UserInit>:



// init CAN1 and CAN2
void  CAN_UserInit ( void)
{
    5604:	b510      	push	{r4, lr}
	// init CAN1
	//busOFF[CAN_BUS1] = 0;
	CAN_Initialize ( CAN_BUS1, &Timing_CANx[CAN_BUS1]);
    5606:	4c0d      	ldr	r4, [pc, #52]	; (563c <CAN_UserInit+0x38>)
    5608:	2000      	movs	r0, #0
    560a:	f104 0128 	add.w	r1, r4, #40	; 0x28
    560e:	f001 f829 	bl	6664 <CAN_Initialize>
	
	// receive all 11 bit standard CAN-IDs
	CAN_FilterAdd ( CAN_BUS1, CAN_MSGTYPE_STANDARD, 0x000, 0x7FF);
    5612:	2200      	movs	r2, #0
    5614:	4611      	mov	r1, r2
    5616:	4610      	mov	r0, r2
    5618:	f240 73ff 	movw	r3, #2047	; 0x7ff
    561c:	f000 fdc8 	bl	61b0 <CAN_FilterAdd>
	

	// init CAN2
	//busOFF[CAN_BUS2] = 0;
	CAN_Initialize ( CAN_BUS2, &Timing_CANx[CAN_BUS2]);
    5620:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    5624:	2001      	movs	r0, #1
    5626:	f001 f81d 	bl	6664 <CAN_Initialize>
	
	// receive all 11 bit standard CAN-IDs
	CAN_FilterAdd ( CAN_BUS2, CAN_MSGTYPE_STANDARD, 0x000, 0x7FF);
    562a:	2200      	movs	r2, #0
    562c:	4611      	mov	r1, r2
    562e:	f240 73ff 	movw	r3, #2047	; 0x7ff
    5632:	2001      	movs	r0, #1
}
    5634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	CAN_FilterAdd ( CAN_BUS2, CAN_MSGTYPE_STANDARD, 0x000, 0x7FF);
    5638:	f000 bdba 	b.w	61b0 <CAN_FilterAdd>
    563c:	00007a88 	.word	0x00007a88

00005640 <IndexToOutputMsg>:
const Route_Map_One2One_t* IndexToOutputMsg(uint32_t uCan_id, uint8_t uDirection)
{
    uint8_t ulen;
    const Route_Map_One2One_t* ret = NULL;

    switch (uDirection)
    5640:	b929      	cbnz	r1, 564e <IndexToOutputMsg+0xe>
			ulen = sizeof(map_table_one2one_CAN_2_CAN)/sizeof(Route_Map_One2One_t);
            for (int i = 0; i < ulen; i++)
            {
                if (uCan_id == map_table_one2one_CAN_2_CAN[i].id_in)
                {
                    ret = &(map_table_one2one_CAN_2_CAN[i]);
    5642:	4b04      	ldr	r3, [pc, #16]	; (5654 <IndexToOutputMsg+0x14>)
                if (uCan_id == map_table_one2one_CAN_2_CAN[i].id_in)
    5644:	2800      	cmp	r0, #0
                    ret = &(map_table_one2one_CAN_2_CAN[i]);
    5646:	bf0c      	ite	eq
    5648:	4618      	moveq	r0, r3
    564a:	2000      	movne	r0, #0
    564c:	4770      	bx	lr
    const Route_Map_One2One_t* ret = NULL;
    564e:	2000      	movs	r0, #0
        default:
            break;
    }

    return ret;
}
    5650:	4770      	bx	lr
    5652:	bf00      	nop
    5654:	00007ad8 	.word	0x00007ad8

00005658 <mapDataFromInToOutOne2One>:

void mapDataFromInToOutOne2One(CANRxMsg_t* RxMsg, const Route_Map_One2One_t *map, Transfer_Direction_t direction)
{
    5658:	b5f0      	push	{r4, r5, r6, r7, lr}
    565a:	460c      	mov	r4, r1
	// reset id
	RxMsg->id = map->id_out;
    565c:	6849      	ldr	r1, [r1, #4]
	// reset message type
	RxMsg->msgtype = map->msg_type_out;
    565e:	8963      	ldrh	r3, [r4, #10]
    5660:	82c3      	strh	r3, [r0, #22]
	RxMsg->id = map->id_out;
    5662:	6181      	str	r1, [r0, #24]
	// reset data length
	RxMsg->dlc = map->dlc_out;
    5664:	f894 e01d 	ldrb.w	lr, [r4, #29]
    5668:	7d03      	ldrb	r3, [r0, #20]
    566a:	f36e 1307 	bfi	r3, lr, #4, #4
    566e:	7503      	strb	r3, [r0, #20]

	uint8_t tmp[8] = {0};
	// store data to temperary memory
	for (int i = 0; i < map->byte_count; i++)
    5670:	7b27      	ldrb	r7, [r4, #12]
{
    5672:	b083      	sub	sp, #12
	uint8_t tmp[8] = {0};
    5674:	2300      	movs	r3, #0
{
    5676:	4605      	mov	r5, r0
	uint8_t tmp[8] = {0};
    5678:	e9cd 3300 	strd	r3, r3, [sp]
	for (int i = 0; i < map->byte_count; i++)
    567c:	b1ef      	cbz	r7, 56ba <mapDataFromInToOutOne2One+0x62>
    567e:	f10d 30ff 	add.w	r0, sp, #4294967295
    5682:	4606      	mov	r6, r0
    5684:	4623      	mov	r3, r4
    5686:	eb04 0c47 	add.w	ip, r4, r7, lsl #1
	{
		tmp[i] = RxMsg->data8[map->byte_map[i][BYTE_IN]];
    568a:	7b59      	ldrb	r1, [r3, #13]
    568c:	4429      	add	r1, r5
    568e:	3302      	adds	r3, #2
    5690:	7f09      	ldrb	r1, [r1, #28]
    5692:	f806 1f01 	strb.w	r1, [r6, #1]!
	for (int i = 0; i < map->byte_count; i++)
    5696:	4563      	cmp	r3, ip
    5698:	d1f7      	bne.n	568a <mapDataFromInToOutOne2One+0x32>
	}
	
	if ((direction == DIRECTION_STANDAR_TO_FD) || (direction == DIRECTION_STANDAR_TO_STANDAR))
    569a:	2a01      	cmp	r2, #1
    569c:	d90f      	bls.n	56be <mapDataFromInToOutOne2One+0x66>
    569e:	4621      	mov	r1, r4
{
    56a0:	2200      	movs	r2, #0
	}

    // frame data is byte based by default
    for (int i = 0; i < map->byte_count; i++)
    {
        RxMsg->data8[map->byte_map[i][BYTE_OUT]] = tmp[i];
    56a2:	7b8b      	ldrb	r3, [r1, #14]
    56a4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    56a8:	442b      	add	r3, r5
    for (int i = 0; i < map->byte_count; i++)
    56aa:	3201      	adds	r2, #1
    56ac:	42ba      	cmp	r2, r7
    56ae:	f101 0102 	add.w	r1, r1, #2
        RxMsg->data8[map->byte_map[i][BYTE_OUT]] = tmp[i];
    56b2:	771c      	strb	r4, [r3, #28]
    for (int i = 0; i < map->byte_count; i++)
    56b4:	dbf5      	blt.n	56a2 <mapDataFromInToOutOne2One+0x4a>
    }

}
    56b6:	b003      	add	sp, #12
    56b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((direction == DIRECTION_STANDAR_TO_FD) || (direction == DIRECTION_STANDAR_TO_STANDAR))
    56ba:	2a01      	cmp	r2, #1
    56bc:	d8fb      	bhi.n	56b6 <mapDataFromInToOutOne2One+0x5e>
		memset(RxMsg->data8, 0x00, m_data_length_map[map->dlc_out]);
    56be:	4b07      	ldr	r3, [pc, #28]	; (56dc <mapDataFromInToOutOne2One+0x84>)
    56c0:	449e      	add	lr, r3
    56c2:	2100      	movs	r1, #0
    56c4:	f89e 2060 	ldrb.w	r2, [lr, #96]	; 0x60
    56c8:	f105 001c 	add.w	r0, r5, #28
    56cc:	f001 ffa6 	bl	761c <memset>
    for (int i = 0; i < map->byte_count; i++)
    56d0:	7b27      	ldrb	r7, [r4, #12]
    56d2:	2f00      	cmp	r7, #0
    56d4:	d0ef      	beq.n	56b6 <mapDataFromInToOutOne2One+0x5e>
    56d6:	f10d 30ff 	add.w	r0, sp, #4294967295
    56da:	e7e0      	b.n	569e <mapDataFromInToOutOne2One+0x46>
    56dc:	00007ad8 	.word	0x00007ad8

000056e0 <set_message>:
	struct srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_0_t *message_out_0, 
	struct srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_1_t *message_out_1,
	struct srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_2_t *message_out_2,
	struct srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_3_t *message_out_3
)
{
    56e0:	b470      	push	{r4, r5, r6}
    56e2:	9c03      	ldr	r4, [sp, #12]
	if (!message_in)
    56e4:	2800      	cmp	r0, #0
    56e6:	d04d      	beq.n	5784 <set_message+0xa4>
		return FALSE;
	
	// frame - 0
	message_out_0->ui_id_obj_suffix_0 = message_in->ui_id_obj_suffix_0;
    56e8:	7805      	ldrb	r5, [r0, #0]
    56ea:	700d      	strb	r5, [r1, #0]
	message_out_0->ref_point_pos_obj_suffix_0 = message_in->ref_point_pos_obj_suffix_0;
    56ec:	7d05      	ldrb	r5, [r0, #20]
    56ee:	704d      	strb	r5, [r1, #1]
	message_out_0->e_maintenance_state_obj_suffix_0 = message_in->e_maintenance_state_obj_suffix_0;
    56f0:	7845      	ldrb	r5, [r0, #1]
    56f2:	708d      	strb	r5, [r1, #2]
	message_out_0->ui_class_confidence_obj_suffix_0 = message_in->ui_class_confidence_obj_suffix_0;
    56f4:	7cc5      	ldrb	r5, [r0, #19]
    56f6:	70cd      	strb	r5, [r1, #3]
	message_out_0->ref_point_pos_obj_suffix_1 = message_in->ref_point_pos_obj_suffix_1;
    56f8:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
    56fc:	710d      	strb	r5, [r1, #4]
	message_out_0->f_vrel_y_obj_suffix_0 = message_in->f_vrel_y_obj_suffix_0;
    56fe:	8846      	ldrh	r6, [r0, #2]
	message_out_0->f_dist_y_obj_suffix_0 = message_in->f_dist_y_obj_suffix_0;
    5700:	88c5      	ldrh	r5, [r0, #6]
    5702:	810d      	strh	r5, [r1, #8]
	message_out_0->f_vrel_y_obj_suffix_0 = message_in->f_vrel_y_obj_suffix_0;
    5704:	80ce      	strh	r6, [r1, #6]
	message_out_0->ui_life_cycles_obj_suffix_0 = message_in->ui_life_cycles_obj_suffix_0;
    5706:	7d45      	ldrb	r5, [r0, #21]
    5708:	728d      	strb	r5, [r1, #10]
	message_out_0->f_vrel_x_obj_suffix_0 = message_in->f_vrel_x_obj_suffix_0;
    570a:	8885      	ldrh	r5, [r0, #4]
    570c:	818d      	strh	r5, [r1, #12]
	message_out_0->e_dynamic_property_obj_suffix_0 = message_in->e_dynamic_property_obj_suffix_0;
    570e:	7d85      	ldrb	r5, [r0, #22]
    5710:	738d      	strb	r5, [r1, #14]
	
	// frame - 1
	message_out_1->f_dist_x_obj_suffix_0 = message_in->f_dist_x_obj_suffix_0;
    5712:	8905      	ldrh	r5, [r0, #8]
	message_out_1->f_orientation_obj_suffix_0 = message_in->f_orientation_obj_suffix_0;
    5714:	8941      	ldrh	r1, [r0, #10]
    5716:	8051      	strh	r1, [r2, #2]
	message_out_1->f_dist_x_obj_suffix_0 = message_in->f_dist_x_obj_suffix_0;
    5718:	8015      	strh	r5, [r2, #0]
	message_out_1->f_width_obj_suffix_0 = message_in->f_width_obj_suffix_0;
    571a:	7b01      	ldrb	r1, [r0, #12]
    571c:	7111      	strb	r1, [r2, #4]
	message_out_1->f_length_obj_suffix_0 = message_in->f_length_obj_suffix_0;
    571e:	7b41      	ldrb	r1, [r0, #13]
    5720:	7151      	strb	r1, [r2, #5]
	message_out_1->ui_probability_of_existence_obj_suffix_0 = message_in->ui_probability_of_existence_obj_suffix_0;
    5722:	7b81      	ldrb	r1, [r0, #14]
    5724:	7191      	strb	r1, [r2, #6]
	message_out_1->ui_dyn_confidence_obj_suffix_0 = message_in->ui_dyn_confidence_obj_suffix_0;
    5726:	7bc1      	ldrb	r1, [r0, #15]
    5728:	71d1      	strb	r1, [r2, #7]
	message_out_1->e_classification_obj_suffix_0 = message_in->e_classification_obj_suffix_0;
    572a:	7c81      	ldrb	r1, [r0, #18]
    572c:	7211      	strb	r1, [r2, #8]
	message_out_1->ui_probability_of_existence_obj_suffix_1 = message_in->ui_probability_of_existence_obj_suffix_1;
    572e:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
    5732:	7251      	strb	r1, [r2, #9]
	message_out_1->ui_id_obj_suffix_1 = message_in->ui_id_obj_suffix_1;
    5734:	7dc1      	ldrb	r1, [r0, #23]
    5736:	7291      	strb	r1, [r2, #10]

	// frame - 2
	message_out_2->f_vrel_y_obj_suffix_1 = message_in->f_vrel_y_obj_suffix_1;
	message_out_2->f_dist_y_obj_suffix_1 = message_in->f_dist_y_obj_suffix_1;
	message_out_2->f_vrel_x_obj_suffix_1 = message_in->f_vrel_x_obj_suffix_1;
	message_out_2->f_dist_x_obj_suffix_1 = message_in->f_dist_x_obj_suffix_1;
    5738:	8c02      	ldrh	r2, [r0, #32]
	message_out_2->f_vrel_y_obj_suffix_1 = message_in->f_vrel_y_obj_suffix_1;
    573a:	8b46      	ldrh	r6, [r0, #26]
	message_out_2->f_dist_y_obj_suffix_1 = message_in->f_dist_y_obj_suffix_1;
    573c:	8bc5      	ldrh	r5, [r0, #30]
	message_out_2->f_vrel_x_obj_suffix_1 = message_in->f_vrel_x_obj_suffix_1;
    573e:	8b81      	ldrh	r1, [r0, #28]
    5740:	8099      	strh	r1, [r3, #4]
	message_out_2->f_vrel_y_obj_suffix_1 = message_in->f_vrel_y_obj_suffix_1;
    5742:	801e      	strh	r6, [r3, #0]
	message_out_2->f_dist_y_obj_suffix_1 = message_in->f_dist_y_obj_suffix_1;
    5744:	805d      	strh	r5, [r3, #2]
	message_out_2->f_dist_x_obj_suffix_1 = message_in->f_dist_x_obj_suffix_1;
    5746:	80da      	strh	r2, [r3, #6]
	message_out_2->f_width_obj_suffix_1 = message_in->f_width_obj_suffix_1;
    5748:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
    574c:	721a      	strb	r2, [r3, #8]
	message_out_2->f_length_obj_suffix_1 = message_in->f_length_obj_suffix_1;
    574e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
    5752:	725a      	strb	r2, [r3, #9]

	// frame - 3
	message_out_3->f_rcs_obj_suffix_1 = message_in->f_rcs_obj_suffix_1;
    5754:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    5756:	8023      	strh	r3, [r4, #0]
	message_out_3->ui_class_confidence_obj_suffix_1 = message_in->ui_class_confidence_obj_suffix_1;
    5758:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
    575c:	70a3      	strb	r3, [r4, #2]
	message_out_3->e_classification_obj_suffix_1 = message_in->e_classification_obj_suffix_1;
    575e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
    5762:	70e3      	strb	r3, [r4, #3]
	message_out_3->e_dynamic_property_obj_suffix_1 = message_in->e_dynamic_property_obj_suffix_1;
    5764:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    5768:	7123      	strb	r3, [r4, #4]
	message_out_3->ui_dyn_confidence_obj_suffix_1 = message_in->ui_dyn_confidence_obj_suffix_1;
    576a:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
    576e:	7163      	strb	r3, [r4, #5]
	message_out_3->f_rcs_obj_suffix_0 = message_in->f_rcs_obj_suffix_0;
    5770:	8a03      	ldrh	r3, [r0, #16]
    5772:	8163      	strh	r3, [r4, #10]
	message_out_3->e_maintenance_state_obj_suffix_1 = message_in->e_maintenance_state_obj_suffix_1;
    5774:	7e03      	ldrb	r3, [r0, #24]
    5776:	71a3      	strb	r3, [r4, #6]
	message_out_3->ui_life_cycles_obj_suffix_1 = message_in->ui_life_cycles_obj_suffix_1;
    5778:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    577c:	7323      	strb	r3, [r4, #12]
	message_out_3->f_orientation_obj_suffix_1 = message_in->f_orientation_obj_suffix_1;
    577e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
    5780:	8123      	strh	r3, [r4, #8]


	return TRUE;
    5782:	2001      	movs	r0, #1
}
    5784:	bc70      	pop	{r4, r5, r6}
    5786:	4770      	bx	lr

00005788 <srr_canfd2can_route_by_signals>:

void srr_canfd2can_route_by_signals(CANRxMsg_t* RxMsg)
{
    5788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool ret = FALSE;
	uint32_t uCanid = RxMsg->id; // record original can id
    578c:	6984      	ldr	r4, [r0, #24]

	// find can id in the id list
	for (int i = 0; i < sizeof(srr_can_ids)/sizeof(srr_can_ids[0]); i++)
	{
		if (srr_can_ids[i] == RxMsg->id)
    578e:	f240 23c6 	movw	r3, #710	; 0x2c6
    5792:	429c      	cmp	r4, r3
{
    5794:	b09f      	sub	sp, #124	; 0x7c
		if (srr_can_ids[i] == RxMsg->id)
    5796:	d00b      	beq.n	57b0 <srr_canfd2can_route_by_signals+0x28>
    5798:	4b56      	ldr	r3, [pc, #344]	; (58f4 <srr_canfd2can_route_by_signals+0x16c>)
    579a:	f240 22c7 	movw	r2, #711	; 0x2c7
    579e:	f103 0548 	add.w	r5, r3, #72	; 0x48
    57a2:	e003      	b.n	57ac <srr_canfd2can_route_by_signals+0x24>
	for (int i = 0; i < sizeof(srr_can_ids)/sizeof(srr_can_ids[0]); i++)
    57a4:	42ab      	cmp	r3, r5
    57a6:	d07c      	beq.n	58a2 <srr_canfd2can_route_by_signals+0x11a>
    57a8:	f853 2f04 	ldr.w	r2, [r3, #4]!
		if (srr_can_ids[i] == RxMsg->id)
    57ac:	42a2      	cmp	r2, r4
    57ae:	d1f9      	bne.n	57a4 <srr_canfd2can_route_by_signals+0x1c>

	if (ret) // the can frame need to route
	{
		// unpack CANFD frame
		struct srr520_yg11_v05_in_srr_obj_suffix_0_suffix_1_t message_in;
		ret = srr520_yg11_v05_in_srr_obj_suffix_0_suffix_1_unpack(&message_in, RxMsg->data8, m_data_length_map[RxMsg->dlc]);
    57b0:	7d03      	ldrb	r3, [r0, #20]
    57b2:	4e51      	ldr	r6, [pc, #324]	; (58f8 <srr_canfd2can_route_by_signals+0x170>)
    57b4:	eb06 1313 	add.w	r3, r6, r3, lsr #4
    57b8:	f100 091c 	add.w	r9, r0, #28
    57bc:	4605      	mov	r5, r0
    57be:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
    57c2:	4649      	mov	r1, r9
    57c4:	a812      	add	r0, sp, #72	; 0x48
    57c6:	f000 f899 	bl	58fc <srr520_yg11_v05_in_srr_obj_suffix_0_suffix_1_unpack>
		if (ret)
    57ca:	2800      	cmp	r0, #0
    57cc:	d06c      	beq.n	58a8 <srr_canfd2can_route_by_signals+0x120>
			struct srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_1_t message_out_1;
			struct srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_2_t message_out_2;
			struct srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_3_t message_out_3;
			
			// use CANFD frame to set classical frmaes 
			ret = set_message(&message_in, &message_out_0, &message_out_1, &message_out_2, &message_out_3);
    57ce:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
    57d2:	a812      	add	r0, sp, #72	; 0x48
    57d4:	ab04      	add	r3, sp, #16
    57d6:	aa07      	add	r2, sp, #28
    57d8:	a90e      	add	r1, sp, #56	; 0x38
    57da:	f8cd a000 	str.w	sl, [sp]
    57de:	f7ff ff7f 	bl	56e0 <set_message>

			if (ret)
    57e2:	2800      	cmp	r0, #0
    57e4:	d074      	beq.n	58d0 <srr_canfd2can_route_by_signals+0x148>
			{
				// set common attribution of the message 
				// reset message type
				RxMsg->msgtype = MSGTYPE_STANDARD_CAN;
				// reset data length
				RxMsg->dlc = CAN_LEN8_DLC;
    57e6:	7d28      	ldrb	r0, [r5, #20]
    57e8:	2208      	movs	r2, #8
				RxMsg->msgtype = MSGTYPE_STANDARD_CAN;
    57ea:	2300      	movs	r3, #0
				RxMsg->dlc = CAN_LEN8_DLC;
    57ec:	f362 1007 	bfi	r0, r2, #4, #4
				uint8_t data[8] = {0};

				// send first frame
				RxMsg->id = uCanid + 0x100u;
    57f0:	f504 7680 	add.w	r6, r4, #256	; 0x100
				srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_0_pack(data, &message_out_0, m_data_length_map[CAN_LEN8_DLC]);
    57f4:	a90e      	add	r1, sp, #56	; 0x38
				RxMsg->dlc = CAN_LEN8_DLC;
    57f6:	7528      	strb	r0, [r5, #20]
				RxMsg->msgtype = MSGTYPE_STANDARD_CAN;
    57f8:	82eb      	strh	r3, [r5, #22]
				srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_0_pack(data, &message_out_0, m_data_length_map[CAN_LEN8_DLC]);
    57fa:	eb0d 0002 	add.w	r0, sp, r2
				RxMsg->id = uCanid + 0x100u;
    57fe:	61ae      	str	r6, [r5, #24]
    5800:	f10d 0b07 	add.w	fp, sp, #7
				uint8_t data[8] = {0};
    5804:	e9cd 3302 	strd	r3, r3, [sp, #8]
    5808:	46c8      	mov	r8, r9
				srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_0_pack(data, &message_out_0, m_data_length_map[CAN_LEN8_DLC]);
    580a:	f000 f9a1 	bl	5b50 <srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_0_pack>
    580e:	464f      	mov	r7, r9
    5810:	465b      	mov	r3, fp
    5812:	f105 0124 	add.w	r1, r5, #36	; 0x24
				for (int i = 0; i < 8; i++)
				{
					RxMsg->data8[i] = data[i];
    5816:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    581a:	f807 2b01 	strb.w	r2, [r7], #1
				for (int i = 0; i < 8; i++)
    581e:	428f      	cmp	r7, r1
    5820:	d1f9      	bne.n	5816 <srr_canfd2can_route_by_signals+0x8e>
				}
				// forward message to CAN1 -> standard CAN 
				CAN_Write ( CAN_BUS1, RxMsg );
    5822:	4629      	mov	r1, r5
    5824:	2000      	movs	r0, #0
    5826:	f000 fdcb 	bl	63c0 <CAN_Write>

				// send second frame
				RxMsg->id = uCanid + 0x200u;
    582a:	f504 7300 	add.w	r3, r4, #512	; 0x200
				srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_1_pack(data, &message_out_1, m_data_length_map[CAN_LEN8_DLC]);
    582e:	2208      	movs	r2, #8
				RxMsg->id = uCanid + 0x200u;
    5830:	61ab      	str	r3, [r5, #24]
				srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_1_pack(data, &message_out_1, m_data_length_map[CAN_LEN8_DLC]);
    5832:	a907      	add	r1, sp, #28
    5834:	eb0d 0002 	add.w	r0, sp, r2
    5838:	f000 f9de 	bl	5bf8 <srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_1_pack>
    583c:	464e      	mov	r6, r9
    583e:	465b      	mov	r3, fp
				for (int i = 0; i < 8; i++)
				{
					RxMsg->data8[i] = data[i];
    5840:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    5844:	f806 2b01 	strb.w	r2, [r6], #1
				for (int i = 0; i < 8; i++)
    5848:	42be      	cmp	r6, r7
    584a:	d1f9      	bne.n	5840 <srr_canfd2can_route_by_signals+0xb8>
				}
				// forward message to CAN1 -> standard CAN 
				CAN_Write ( CAN_BUS1, RxMsg );
    584c:	4629      	mov	r1, r5
    584e:	2000      	movs	r0, #0
    5850:	f000 fdb6 	bl	63c0 <CAN_Write>

				// send third frame
				RxMsg->id = uCanid + 0x300u;
    5854:	f504 7340 	add.w	r3, r4, #768	; 0x300
				srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_2_pack(data, &message_out_2, m_data_length_map[CAN_LEN8_DLC]);
    5858:	2208      	movs	r2, #8
    585a:	a904      	add	r1, sp, #16
				RxMsg->id = uCanid + 0x300u;
    585c:	61ab      	str	r3, [r5, #24]
				srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_2_pack(data, &message_out_2, m_data_length_map[CAN_LEN8_DLC]);
    585e:	eb0d 0002 	add.w	r0, sp, r2
    5862:	f000 fa11 	bl	5c88 <srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_2_pack>
    5866:	4649      	mov	r1, r9
    5868:	465b      	mov	r3, fp
				for (int i = 0; i < 8; i++)
				{
					RxMsg->data8[i] = data[i];
    586a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    586e:	f801 2b01 	strb.w	r2, [r1], #1
				for (int i = 0; i < 8; i++)
    5872:	42b1      	cmp	r1, r6
    5874:	d1f9      	bne.n	586a <srr_canfd2can_route_by_signals+0xe2>
				}
				// forward message to CAN1 -> standard CAN 
				CAN_Write ( CAN_BUS1, RxMsg );
    5876:	4629      	mov	r1, r5
    5878:	2000      	movs	r0, #0

				// send fourth frame
				RxMsg->id = uCanid + 0x400u;
    587a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
				CAN_Write ( CAN_BUS1, RxMsg );
    587e:	f000 fd9f 	bl	63c0 <CAN_Write>
				RxMsg->id = uCanid + 0x400u;
    5882:	61ac      	str	r4, [r5, #24]
				srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_3_pack(data, &message_out_3, m_data_length_map[CAN_LEN8_DLC]);
    5884:	4651      	mov	r1, sl
    5886:	a802      	add	r0, sp, #8
    5888:	2208      	movs	r2, #8
    588a:	f000 fa3b 	bl	5d04 <srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_3_pack>
				for (int i = 0; i < 8; i++)
				{
					RxMsg->data8[i] = data[i];
    588e:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
    5892:	f808 3b01 	strb.w	r3, [r8], #1
				for (int i = 0; i < 8; i++)
    5896:	45b0      	cmp	r8, r6
    5898:	d1f9      	bne.n	588e <srr_canfd2can_route_by_signals+0x106>
				}
				// forward message to CAN1 -> standard CAN 
				CAN_Write ( CAN_BUS1, RxMsg );
    589a:	4629      	mov	r1, r5
    589c:	2000      	movs	r0, #0
    589e:	f000 fd8f 	bl	63c0 <CAN_Write>
			RxMsg->data8[3] = m_data_length_map[RxMsg->dlc]; // DLC
			
			CAN_Write ( CAN_BUS1, RxMsg );
		}
	}
}
    58a2:	b01f      	add	sp, #124	; 0x7c
    58a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			RxMsg->data8[3] = m_data_length_map[RxMsg->dlc]; // DLC
    58a8:	7d2b      	ldrb	r3, [r5, #20]
			RxMsg->data8[2] = RxMsg->msgtype; // message type   0x0: Classic CAN  0x30: CANFD
    58aa:	8aea      	ldrh	r2, [r5, #22]
    58ac:	77aa      	strb	r2, [r5, #30]
			RxMsg->data8[3] = m_data_length_map[RxMsg->dlc]; // DLC
    58ae:	eb06 1613 	add.w	r6, r6, r3, lsr #4
			RxMsg->id = 0x7FF;
    58b2:	f240 72ff 	movw	r2, #2047	; 0x7ff
			RxMsg->data8[3] = m_data_length_map[RxMsg->dlc]; // DLC
    58b6:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
    58ba:	77eb      	strb	r3, [r5, #31]
			RxMsg->id = 0x7FF;
    58bc:	f240 23fe 	movw	r3, #766	; 0x2fe
    58c0:	61aa      	str	r2, [r5, #24]
    58c2:	83ab      	strh	r3, [r5, #28]
			CAN_Write ( CAN_BUS1, RxMsg );
    58c4:	4629      	mov	r1, r5
    58c6:	f000 fd7b 	bl	63c0 <CAN_Write>
}
    58ca:	b01f      	add	sp, #124	; 0x7c
    58cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				RxMsg->data8[3] = m_data_length_map[RxMsg->dlc]; // DLC
    58d0:	7d2b      	ldrb	r3, [r5, #20]
				RxMsg->data8[2] = RxMsg->msgtype; // message type   0x0: Classic CAN  0x30: CANFD  
    58d2:	8aea      	ldrh	r2, [r5, #22]
    58d4:	77aa      	strb	r2, [r5, #30]
				RxMsg->data8[3] = m_data_length_map[RxMsg->dlc]; // DLC
    58d6:	eb06 1613 	add.w	r6, r6, r3, lsr #4
				RxMsg->id = 0x7FF;
    58da:	f240 72ff 	movw	r2, #2047	; 0x7ff
				RxMsg->data8[3] = m_data_length_map[RxMsg->dlc]; // DLC
    58de:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
    58e2:	77eb      	strb	r3, [r5, #31]
				RxMsg->id = 0x7FF;
    58e4:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
    58e8:	61aa      	str	r2, [r5, #24]
    58ea:	83ab      	strh	r3, [r5, #28]
				CAN_Write ( CAN_BUS1, RxMsg );
    58ec:	4629      	mov	r1, r5
    58ee:	f000 fd67 	bl	63c0 <CAN_Write>
    58f2:	e7d6      	b.n	58a2 <srr_canfd2can_route_by_signals+0x11a>
    58f4:	00007b4c 	.word	0x00007b4c
    58f8:	00007ad8 	.word	0x00007ad8

000058fc <srr520_yg11_v05_in_srr_obj_suffix_0_suffix_1_unpack>:
int srr520_yg11_v05_in_srr_obj_suffix_0_suffix_1_unpack(
    struct srr520_yg11_v05_in_srr_obj_suffix_0_suffix_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 64u) {
    58fc:	2a3f      	cmp	r2, #63	; 0x3f
    58fe:	f240 8125 	bls.w	5b4c <srr520_yg11_v05_in_srr_obj_suffix_0_suffix_1_unpack+0x250>
        return FALSE;
    }

    dst_p->ui_id_obj_suffix_0 = unpack_right_shift_u8(src_p[5], 2u, 0xfcu);
    5902:	794b      	ldrb	r3, [r1, #5]
    5904:	089b      	lsrs	r3, r3, #2
    5906:	7003      	strb	r3, [r0, #0]
    dst_p->e_maintenance_state_obj_suffix_0 = unpack_right_shift_u8(src_p[6], 5u, 0xe0u);
    5908:	798b      	ldrb	r3, [r1, #6]
    590a:	095b      	lsrs	r3, r3, #5
    590c:	7043      	strb	r3, [r0, #1]
    dst_p->f_vrel_y_obj_suffix_0 = unpack_left_shift_u16(src_p[10], 10u, 0x01u);
    590e:	7a8b      	ldrb	r3, [r1, #10]
    5910:	029b      	lsls	r3, r3, #10
    5912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5916:	8043      	strh	r3, [r0, #2]
    dst_p->f_vrel_y_obj_suffix_0 |= unpack_left_shift_u16(src_p[11], 2u, 0xffu);
    5918:	7aca      	ldrb	r2, [r1, #11]
    591a:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    591e:	8043      	strh	r3, [r0, #2]
    dst_p->f_vrel_y_obj_suffix_0 |= unpack_right_shift_u16(src_p[12], 6u, 0xc0u);
    5920:	7b0a      	ldrb	r2, [r1, #12]
    5922:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
    5926:	8043      	strh	r3, [r0, #2]
    dst_p->f_vrel_x_obj_suffix_0 = unpack_left_shift_u16(src_p[13], 3u, 0xffu);
    5928:	7b4b      	ldrb	r3, [r1, #13]
    592a:	00db      	lsls	r3, r3, #3
    592c:	8083      	strh	r3, [r0, #4]
    dst_p->f_vrel_x_obj_suffix_0 |= unpack_right_shift_u16(src_p[14], 5u, 0xe0u);
    592e:	7b8a      	ldrb	r2, [r1, #14]
    5930:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
    5934:	8083      	strh	r3, [r0, #4]
    dst_p->f_dist_y_obj_suffix_0 = unpack_left_shift_u16(src_p[15], 8u, 0x1fu);
    5936:	7bcb      	ldrb	r3, [r1, #15]
    5938:	021b      	lsls	r3, r3, #8
    593a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    593e:	80c3      	strh	r3, [r0, #6]
    dst_p->f_dist_y_obj_suffix_0 |= unpack_right_shift_u16(src_p[16], 0u, 0xffu);
    5940:	7c0a      	ldrb	r2, [r1, #16]
    5942:	4313      	orrs	r3, r2
    5944:	80c3      	strh	r3, [r0, #6]
    dst_p->f_dist_x_obj_suffix_0 = unpack_left_shift_u16(src_p[18], 5u, 0xffu);
    5946:	7c8b      	ldrb	r3, [r1, #18]
    5948:	015b      	lsls	r3, r3, #5
    594a:	8103      	strh	r3, [r0, #8]
    dst_p->f_dist_x_obj_suffix_0 |= unpack_right_shift_u16(src_p[19], 3u, 0xf8u);
    594c:	7cca      	ldrb	r2, [r1, #19]
    594e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    5952:	8103      	strh	r3, [r0, #8]
    dst_p->f_orientation_obj_suffix_0 = unpack_left_shift_u16(src_p[19], 7u, 0x07u);
    5954:	7ccb      	ldrb	r3, [r1, #19]
    5956:	01db      	lsls	r3, r3, #7
    5958:	f403 7360 	and.w	r3, r3, #896	; 0x380
    595c:	8143      	strh	r3, [r0, #10]
    dst_p->f_orientation_obj_suffix_0 |= unpack_right_shift_u16(src_p[20], 1u, 0xfeu);
    595e:	7d0a      	ldrb	r2, [r1, #20]
    5960:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
    5964:	8143      	strh	r3, [r0, #10]
    dst_p->f_width_obj_suffix_0 = unpack_left_shift_u8(src_p[20], 6u, 0x01u);
    5966:	7d0b      	ldrb	r3, [r1, #20]
    5968:	019b      	lsls	r3, r3, #6
    596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    596e:	7303      	strb	r3, [r0, #12]
    dst_p->f_width_obj_suffix_0 |= unpack_right_shift_u8(src_p[21], 2u, 0xfcu);
    5970:	7d4a      	ldrb	r2, [r1, #21]
    5972:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
    5976:	7303      	strb	r3, [r0, #12]
    dst_p->f_length_obj_suffix_0 = unpack_left_shift_u8(src_p[21], 6u, 0x03u);
    5978:	7d4b      	ldrb	r3, [r1, #21]
    597a:	019b      	lsls	r3, r3, #6
    597c:	b2db      	uxtb	r3, r3
    597e:	7343      	strb	r3, [r0, #13]
    dst_p->f_length_obj_suffix_0 |= unpack_right_shift_u8(src_p[22], 2u, 0xfcu);
    5980:	7d8a      	ldrb	r2, [r1, #22]
    5982:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
    5986:	7343      	strb	r3, [r0, #13]
    dst_p->ui_probability_of_existence_obj_suffix_0 = unpack_left_shift_u8(src_p[22], 1u, 0x03u);
    5988:	7d8b      	ldrb	r3, [r1, #22]
    598a:	005b      	lsls	r3, r3, #1
    598c:	f003 0306 	and.w	r3, r3, #6
    5990:	7383      	strb	r3, [r0, #14]
    dst_p->ui_probability_of_existence_obj_suffix_0 |= unpack_right_shift_u8(src_p[23], 7u, 0x80u);
    5992:	7dca      	ldrb	r2, [r1, #23]
    5994:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    5998:	7383      	strb	r3, [r0, #14]
    dst_p->ui_dyn_confidence_obj_suffix_0 = unpack_right_shift_u8(src_p[23], 4u, 0x70u);
    599a:	7dcb      	ldrb	r3, [r1, #23]
    599c:	f3c3 1302 	ubfx	r3, r3, #4, #3
    59a0:	73c3      	strb	r3, [r0, #15]
    dst_p->f_rcs_obj_suffix_0 = unpack_left_shift_u16(src_p[23], 10u, 0x01u);
    59a2:	7dcb      	ldrb	r3, [r1, #23]
    59a4:	029b      	lsls	r3, r3, #10
    59a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    59aa:	8203      	strh	r3, [r0, #16]
    dst_p->f_rcs_obj_suffix_0 |= unpack_left_shift_u16(src_p[24], 2u, 0xffu);
    59ac:	7e0a      	ldrb	r2, [r1, #24]
    59ae:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    59b2:	8203      	strh	r3, [r0, #16]
    dst_p->f_rcs_obj_suffix_0 |= unpack_right_shift_u16(src_p[25], 6u, 0xc0u);
    59b4:	7e4a      	ldrb	r2, [r1, #25]
    59b6:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
    59ba:	8203      	strh	r3, [r0, #16]
    dst_p->e_classification_obj_suffix_0 = unpack_left_shift_u8(src_p[26], 2u, 0x03u);
    59bc:	7e8b      	ldrb	r3, [r1, #26]
    59be:	009b      	lsls	r3, r3, #2
    59c0:	f003 030c 	and.w	r3, r3, #12
    59c4:	7483      	strb	r3, [r0, #18]
    dst_p->e_classification_obj_suffix_0 |= unpack_right_shift_u8(src_p[27], 6u, 0xc0u);
    59c6:	7eca      	ldrb	r2, [r1, #27]
    59c8:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
    59cc:	7483      	strb	r3, [r0, #18]
    dst_p->ui_class_confidence_obj_suffix_0 = unpack_right_shift_u8(src_p[27], 3u, 0x38u);
    59ce:	7ecb      	ldrb	r3, [r1, #27]
    59d0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    59d4:	74c3      	strb	r3, [r0, #19]
    dst_p->ref_point_pos_obj_suffix_0 = unpack_left_shift_u8(src_p[30], 1u, 0x01u);
    59d6:	7f8b      	ldrb	r3, [r1, #30]
    59d8:	005b      	lsls	r3, r3, #1
    59da:	f003 0302 	and.w	r3, r3, #2
    59de:	7503      	strb	r3, [r0, #20]
    dst_p->ref_point_pos_obj_suffix_0 |= unpack_right_shift_u8(src_p[31], 7u, 0x80u);
    59e0:	7fca      	ldrb	r2, [r1, #31]
    59e2:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    59e6:	7503      	strb	r3, [r0, #20]
    dst_p->ui_life_cycles_obj_suffix_0 = unpack_right_shift_u8(src_p[31], 0u, 0x7fu);
    59e8:	7fcb      	ldrb	r3, [r1, #31]
    59ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    59ee:	7543      	strb	r3, [r0, #21]
    dst_p->e_dynamic_property_obj_suffix_0 = unpack_right_shift_u8(src_p[33], 1u, 0x1eu);
    59f0:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
    59f4:	f3c3 0343 	ubfx	r3, r3, #1, #4
    59f8:	7583      	strb	r3, [r0, #22]
    dst_p->ui_id_obj_suffix_1 = unpack_right_shift_u8(src_p[34], 2u, 0xfcu);
    59fa:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
    59fe:	089b      	lsrs	r3, r3, #2
    5a00:	75c3      	strb	r3, [r0, #23]
    dst_p->e_maintenance_state_obj_suffix_1 = unpack_right_shift_u8(src_p[35], 5u, 0xe0u);
    5a02:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
    5a06:	095b      	lsrs	r3, r3, #5
    5a08:	7603      	strb	r3, [r0, #24]
    dst_p->f_vrel_y_obj_suffix_1 = unpack_left_shift_u16(src_p[39], 10u, 0x01u);
    5a0a:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
    5a0e:	029b      	lsls	r3, r3, #10
    5a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5a14:	8343      	strh	r3, [r0, #26]
    dst_p->f_vrel_y_obj_suffix_1 |= unpack_left_shift_u16(src_p[40], 2u, 0xffu);
    5a16:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
    5a1a:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    5a1e:	8343      	strh	r3, [r0, #26]
    dst_p->f_vrel_y_obj_suffix_1 |= unpack_right_shift_u16(src_p[41], 6u, 0xc0u);
    5a20:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
    5a24:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
    5a28:	8343      	strh	r3, [r0, #26]
    dst_p->f_vrel_x_obj_suffix_1 = unpack_left_shift_u16(src_p[42], 3u, 0xffu);
    5a2a:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
    5a2e:	00db      	lsls	r3, r3, #3
    5a30:	8383      	strh	r3, [r0, #28]
    dst_p->f_vrel_x_obj_suffix_1 |= unpack_right_shift_u16(src_p[43], 5u, 0xe0u);
    5a32:	f891 202b 	ldrb.w	r2, [r1, #43]	; 0x2b
    5a36:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
    5a3a:	8383      	strh	r3, [r0, #28]
    dst_p->f_dist_y_obj_suffix_1 = unpack_left_shift_u16(src_p[44], 8u, 0x1fu);
    5a3c:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    5a40:	021b      	lsls	r3, r3, #8
    5a42:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    5a46:	83c3      	strh	r3, [r0, #30]
    dst_p->f_dist_y_obj_suffix_1 |= unpack_right_shift_u16(src_p[45], 0u, 0xffu);
    5a48:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    5a4c:	4313      	orrs	r3, r2
    5a4e:	83c3      	strh	r3, [r0, #30]
    dst_p->f_dist_x_obj_suffix_1 = unpack_left_shift_u16(src_p[47], 5u, 0xffu);
    5a50:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    5a54:	015b      	lsls	r3, r3, #5
    5a56:	8403      	strh	r3, [r0, #32]
    dst_p->f_dist_x_obj_suffix_1 |= unpack_right_shift_u16(src_p[48], 3u, 0xf8u);
    5a58:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    5a5c:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    5a60:	8403      	strh	r3, [r0, #32]
    dst_p->f_orientation_obj_suffix_1 = unpack_left_shift_u16(src_p[48], 7u, 0x07u);
    5a62:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
    5a66:	01db      	lsls	r3, r3, #7
    5a68:	f403 7360 	and.w	r3, r3, #896	; 0x380
    5a6c:	8443      	strh	r3, [r0, #34]	; 0x22
    dst_p->f_orientation_obj_suffix_1 |= unpack_right_shift_u16(src_p[49], 1u, 0xfeu);
    5a6e:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    5a72:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
    5a76:	8443      	strh	r3, [r0, #34]	; 0x22
    dst_p->f_width_obj_suffix_1 = unpack_left_shift_u8(src_p[49], 6u, 0x01u);
    5a78:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5a7c:	019b      	lsls	r3, r3, #6
    5a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5a82:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    dst_p->f_width_obj_suffix_1 |= unpack_right_shift_u8(src_p[50], 2u, 0xfcu);
    5a86:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    5a8a:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
    5a8e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    dst_p->f_length_obj_suffix_1 = unpack_left_shift_u8(src_p[50], 6u, 0x03u);
    5a92:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
    5a96:	019b      	lsls	r3, r3, #6
    5a98:	b2db      	uxtb	r3, r3
    5a9a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    dst_p->f_length_obj_suffix_1 |= unpack_right_shift_u8(src_p[51], 2u, 0xfcu);
    5a9e:	f891 2033 	ldrb.w	r2, [r1, #51]	; 0x33
    5aa2:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
    5aa6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    dst_p->ui_probability_of_existence_obj_suffix_1 = unpack_left_shift_u8(src_p[51], 1u, 0x03u);
    5aaa:	f891 3033 	ldrb.w	r3, [r1, #51]	; 0x33
    5aae:	005b      	lsls	r3, r3, #1
    5ab0:	f003 0306 	and.w	r3, r3, #6
    5ab4:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
    dst_p->ui_probability_of_existence_obj_suffix_1 |= unpack_right_shift_u8(src_p[52], 7u, 0x80u);
    5ab8:	f891 2034 	ldrb.w	r2, [r1, #52]	; 0x34
    5abc:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    5ac0:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
    dst_p->ui_dyn_confidence_obj_suffix_1 = unpack_right_shift_u8(src_p[52], 4u, 0x70u);
    5ac4:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
    5ac8:	f3c3 1302 	ubfx	r3, r3, #4, #3
    5acc:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
    dst_p->f_rcs_obj_suffix_1 = unpack_left_shift_u16(src_p[52], 10u, 0x01u);
    5ad0:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
    5ad4:	029b      	lsls	r3, r3, #10
    5ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5ada:	8503      	strh	r3, [r0, #40]	; 0x28
    dst_p->f_rcs_obj_suffix_1 |= unpack_left_shift_u16(src_p[53], 2u, 0xffu);
    5adc:	f891 2035 	ldrb.w	r2, [r1, #53]	; 0x35
    5ae0:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    5ae4:	8503      	strh	r3, [r0, #40]	; 0x28
    dst_p->f_rcs_obj_suffix_1 |= unpack_right_shift_u16(src_p[54], 6u, 0xc0u);
    5ae6:	f891 2036 	ldrb.w	r2, [r1, #54]	; 0x36
    5aea:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
    5aee:	8503      	strh	r3, [r0, #40]	; 0x28
    dst_p->e_classification_obj_suffix_1 = unpack_left_shift_u8(src_p[55], 2u, 0x03u);
    5af0:	f891 3037 	ldrb.w	r3, [r1, #55]	; 0x37
    5af4:	009b      	lsls	r3, r3, #2
    5af6:	f003 030c 	and.w	r3, r3, #12
    5afa:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    dst_p->e_classification_obj_suffix_1 |= unpack_right_shift_u8(src_p[56], 6u, 0xc0u);
    5afe:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
    5b02:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
    5b06:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    dst_p->ui_class_confidence_obj_suffix_1 = unpack_right_shift_u8(src_p[56], 3u, 0x38u);
    5b0a:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    5b0e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    5b12:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    dst_p->ref_point_pos_obj_suffix_1 = unpack_left_shift_u8(src_p[59], 1u, 0x01u);
    5b16:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
    5b1a:	005b      	lsls	r3, r3, #1
    5b1c:	f003 0302 	and.w	r3, r3, #2
    5b20:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    dst_p->ref_point_pos_obj_suffix_1 |= unpack_right_shift_u8(src_p[60], 7u, 0x80u);
    5b24:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
    5b28:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    5b2c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    dst_p->ui_life_cycles_obj_suffix_1 = unpack_right_shift_u8(src_p[60], 0u, 0x7fu);
    5b30:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
    5b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5b38:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    dst_p->e_dynamic_property_obj_suffix_1 = unpack_right_shift_u8(src_p[62], 1u, 0x1eu);
    5b3c:	f891 303e 	ldrb.w	r3, [r1, #62]	; 0x3e
    5b40:	f3c3 0343 	ubfx	r3, r3, #1, #4
    5b44:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e

    return TRUE;
    5b48:	2001      	movs	r0, #1
    5b4a:	4770      	bx	lr
        return FALSE;
    5b4c:	2000      	movs	r0, #0
}
    5b4e:	4770      	bx	lr

00005b50 <srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_0_pack>:
int srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_0_pack(
    uint8_t *dst_p,
    const struct srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_0_t *src_p,
    size_t size)
{
    if (size < 8u) {
    5b50:	2a07      	cmp	r2, #7
    5b52:	d94d      	bls.n	5bf0 <srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_0_pack+0xa0>
{
    5b54:	b430      	push	{r4, r5}
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);
    5b56:	2300      	movs	r3, #0
    5b58:	6003      	str	r3, [r0, #0]
    5b5a:	6043      	str	r3, [r0, #4]

    dst_p[0] |= pack_left_shift_u8(src_p->ui_id_obj_suffix_0, 2u, 0xfcu);
    5b5c:	780d      	ldrb	r5, [r1, #0]
    5b5e:	7802      	ldrb	r2, [r0, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->ref_point_pos_obj_suffix_0, 0u, 0x03u);
    dst_p[1] |= pack_left_shift_u8(src_p->e_maintenance_state_obj_suffix_0, 5u, 0xe0u);
    5b60:	7843      	ldrb	r3, [r0, #1]
    dst_p[1] |= pack_left_shift_u8(src_p->ui_class_confidence_obj_suffix_0, 2u, 0x1cu);
    dst_p[1] |= pack_left_shift_u8(src_p->ref_point_pos_obj_suffix_1, 0u, 0x03u);
    dst_p[2] |= pack_right_shift_u16(src_p->f_vrel_y_obj_suffix_0, 3u, 0xffu);
    5b62:	7884      	ldrb	r4, [r0, #2]
    dst_p[0] |= pack_left_shift_u8(src_p->ui_id_obj_suffix_0, 2u, 0xfcu);
    5b64:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    5b68:	b2d2      	uxtb	r2, r2
    5b6a:	7002      	strb	r2, [r0, #0]
    dst_p[0] |= pack_left_shift_u8(src_p->ref_point_pos_obj_suffix_0, 0u, 0x03u);
    5b6c:	784d      	ldrb	r5, [r1, #1]
    5b6e:	f005 0503 	and.w	r5, r5, #3
    5b72:	432a      	orrs	r2, r5
    5b74:	7002      	strb	r2, [r0, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->e_maintenance_state_obj_suffix_0, 5u, 0xe0u);
    5b76:	788d      	ldrb	r5, [r1, #2]
    dst_p[3] |= pack_left_shift_u16(src_p->f_vrel_y_obj_suffix_0, 5u, 0xe0u);
    5b78:	78c2      	ldrb	r2, [r0, #3]
    dst_p[1] |= pack_left_shift_u8(src_p->e_maintenance_state_obj_suffix_0, 5u, 0xe0u);
    5b7a:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
    5b7e:	b2db      	uxtb	r3, r3
    5b80:	7043      	strb	r3, [r0, #1]
    dst_p[1] |= pack_left_shift_u8(src_p->ui_class_confidence_obj_suffix_0, 2u, 0x1cu);
    5b82:	78cd      	ldrb	r5, [r1, #3]
    5b84:	00ad      	lsls	r5, r5, #2
    5b86:	f005 051c 	and.w	r5, r5, #28
    5b8a:	432b      	orrs	r3, r5
    5b8c:	b25b      	sxtb	r3, r3
    5b8e:	7043      	strb	r3, [r0, #1]
    dst_p[1] |= pack_left_shift_u8(src_p->ref_point_pos_obj_suffix_1, 0u, 0x03u);
    5b90:	790d      	ldrb	r5, [r1, #4]
    5b92:	f005 0503 	and.w	r5, r5, #3
    5b96:	432b      	orrs	r3, r5
    5b98:	7043      	strb	r3, [r0, #1]
    dst_p[2] |= pack_right_shift_u16(src_p->f_vrel_y_obj_suffix_0, 3u, 0xffu);
    5b9a:	88cb      	ldrh	r3, [r1, #6]
    dst_p[3] |= pack_right_shift_u16(src_p->f_dist_y_obj_suffix_0, 8u, 0x1fu);
    dst_p[4] |= pack_left_shift_u16(src_p->f_dist_y_obj_suffix_0, 0u, 0xffu);
    5b9c:	7905      	ldrb	r5, [r0, #4]
    dst_p[2] |= pack_right_shift_u16(src_p->f_vrel_y_obj_suffix_0, 3u, 0xffu);
    5b9e:	ea44 04d3 	orr.w	r4, r4, r3, lsr #3
    5ba2:	7084      	strb	r4, [r0, #2]
    dst_p[3] |= pack_left_shift_u16(src_p->f_vrel_y_obj_suffix_0, 5u, 0xe0u);
    5ba4:	798b      	ldrb	r3, [r1, #6]
    dst_p[5] |= pack_left_shift_u8(src_p->ui_life_cycles_obj_suffix_0, 1u, 0xfeu);
    5ba6:	7944      	ldrb	r4, [r0, #5]
    dst_p[3] |= pack_left_shift_u16(src_p->f_vrel_y_obj_suffix_0, 5u, 0xe0u);
    5ba8:	ea42 1343 	orr.w	r3, r2, r3, lsl #5
    5bac:	b2db      	uxtb	r3, r3
    5bae:	70c3      	strb	r3, [r0, #3]
    dst_p[3] |= pack_right_shift_u16(src_p->f_dist_y_obj_suffix_0, 8u, 0x1fu);
    5bb0:	890a      	ldrh	r2, [r1, #8]
    5bb2:	f3c2 2204 	ubfx	r2, r2, #8, #5
    5bb6:	4313      	orrs	r3, r2
    5bb8:	70c3      	strb	r3, [r0, #3]
    dst_p[4] |= pack_left_shift_u16(src_p->f_dist_y_obj_suffix_0, 0u, 0xffu);
    5bba:	7a0a      	ldrb	r2, [r1, #8]
    dst_p[6] |= pack_right_shift_u16(src_p->f_vrel_x_obj_suffix_0, 3u, 0xffu);
    5bbc:	7983      	ldrb	r3, [r0, #6]
    dst_p[4] |= pack_left_shift_u16(src_p->f_dist_y_obj_suffix_0, 0u, 0xffu);
    5bbe:	432a      	orrs	r2, r5
    5bc0:	7102      	strb	r2, [r0, #4]
    dst_p[5] |= pack_left_shift_u8(src_p->ui_life_cycles_obj_suffix_0, 1u, 0xfeu);
    5bc2:	7a8a      	ldrb	r2, [r1, #10]
    5bc4:	ea44 0242 	orr.w	r2, r4, r2, lsl #1
    5bc8:	7142      	strb	r2, [r0, #5]
    dst_p[6] |= pack_right_shift_u16(src_p->f_vrel_x_obj_suffix_0, 3u, 0xffu);
    5bca:	898a      	ldrh	r2, [r1, #12]
    5bcc:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    5bd0:	7183      	strb	r3, [r0, #6]
    dst_p[7] |= pack_left_shift_u16(src_p->f_vrel_x_obj_suffix_0, 5u, 0xe0u);
    5bd2:	7b0a      	ldrb	r2, [r1, #12]
    5bd4:	79c3      	ldrb	r3, [r0, #7]
    5bd6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    5bda:	b2db      	uxtb	r3, r3
    5bdc:	71c3      	strb	r3, [r0, #7]
    dst_p[7] |= pack_left_shift_u8(src_p->e_dynamic_property_obj_suffix_0, 1u, 0x1eu);
    5bde:	7b8a      	ldrb	r2, [r1, #14]
    5be0:	0052      	lsls	r2, r2, #1
    5be2:	f002 021e 	and.w	r2, r2, #30
    5be6:	4313      	orrs	r3, r2
    5be8:	71c3      	strb	r3, [r0, #7]

    return (8);
}
    5bea:	bc30      	pop	{r4, r5}
    return (8);
    5bec:	2008      	movs	r0, #8
}
    5bee:	4770      	bx	lr
        return (-EINVAL);
    5bf0:	f06f 0015 	mvn.w	r0, #21
}
    5bf4:	4770      	bx	lr
    5bf6:	bf00      	nop

00005bf8 <srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_1_pack>:
int srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_1_pack(
    uint8_t *dst_p,
    const struct srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_1_t *src_p,
    size_t size)
{
    if (size < 8u) {
    5bf8:	2a07      	cmp	r2, #7
    5bfa:	d941      	bls.n	5c80 <srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_1_pack+0x88>
{
    5bfc:	b430      	push	{r4, r5}
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);
    5bfe:	2300      	movs	r3, #0
    5c00:	6043      	str	r3, [r0, #4]
    5c02:	6003      	str	r3, [r0, #0]

    dst_p[0] |= pack_right_shift_u16(src_p->f_dist_x_obj_suffix_0, 5u, 0xffu);
    5c04:	880d      	ldrh	r5, [r1, #0]
    5c06:	7804      	ldrb	r4, [r0, #0]
    dst_p[1] |= pack_left_shift_u16(src_p->f_dist_x_obj_suffix_0, 3u, 0xf8u);
    5c08:	7843      	ldrb	r3, [r0, #1]
    dst_p[1] |= pack_right_shift_u16(src_p->f_orientation_obj_suffix_0, 7u, 0x07u);
    dst_p[2] |= pack_left_shift_u16(src_p->f_orientation_obj_suffix_0, 1u, 0xfeu);
    5c0a:	7882      	ldrb	r2, [r0, #2]
    dst_p[0] |= pack_right_shift_u16(src_p->f_dist_x_obj_suffix_0, 5u, 0xffu);
    5c0c:	ea44 1455 	orr.w	r4, r4, r5, lsr #5
    5c10:	7004      	strb	r4, [r0, #0]
    dst_p[1] |= pack_left_shift_u16(src_p->f_dist_x_obj_suffix_0, 3u, 0xf8u);
    5c12:	780c      	ldrb	r4, [r1, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->f_width_obj_suffix_0, 1u, 0xfeu);
    5c14:	78c5      	ldrb	r5, [r0, #3]
    dst_p[1] |= pack_left_shift_u16(src_p->f_dist_x_obj_suffix_0, 3u, 0xf8u);
    5c16:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
    5c1a:	b2db      	uxtb	r3, r3
    5c1c:	7043      	strb	r3, [r0, #1]
    dst_p[1] |= pack_right_shift_u16(src_p->f_orientation_obj_suffix_0, 7u, 0x07u);
    5c1e:	884c      	ldrh	r4, [r1, #2]
    5c20:	f3c4 14c2 	ubfx	r4, r4, #7, #3
    5c24:	4323      	orrs	r3, r4
    5c26:	7043      	strb	r3, [r0, #1]
    dst_p[2] |= pack_left_shift_u16(src_p->f_orientation_obj_suffix_0, 1u, 0xfeu);
    5c28:	788b      	ldrb	r3, [r1, #2]
    dst_p[4] |= pack_left_shift_u8(src_p->f_length_obj_suffix_0, 0u, 0xffu);
    5c2a:	7904      	ldrb	r4, [r0, #4]
    dst_p[2] |= pack_left_shift_u16(src_p->f_orientation_obj_suffix_0, 1u, 0xfeu);
    5c2c:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
    5c30:	7083      	strb	r3, [r0, #2]
    dst_p[3] |= pack_left_shift_u8(src_p->f_width_obj_suffix_0, 1u, 0xfeu);
    5c32:	790b      	ldrb	r3, [r1, #4]
    dst_p[5] |= pack_left_shift_u8(src_p->ui_probability_of_existence_obj_suffix_0, 5u, 0xe0u);
    5c34:	7942      	ldrb	r2, [r0, #5]
    dst_p[3] |= pack_left_shift_u8(src_p->f_width_obj_suffix_0, 1u, 0xfeu);
    5c36:	ea45 0343 	orr.w	r3, r5, r3, lsl #1
    5c3a:	70c3      	strb	r3, [r0, #3]
    dst_p[4] |= pack_left_shift_u8(src_p->f_length_obj_suffix_0, 0u, 0xffu);
    5c3c:	794d      	ldrb	r5, [r1, #5]
    dst_p[5] |= pack_left_shift_u8(src_p->ui_dyn_confidence_obj_suffix_0, 2u, 0x1cu);
    dst_p[6] |= pack_left_shift_u8(src_p->e_classification_obj_suffix_0, 4u, 0xf0u);
    5c3e:	7983      	ldrb	r3, [r0, #6]
    dst_p[4] |= pack_left_shift_u8(src_p->f_length_obj_suffix_0, 0u, 0xffu);
    5c40:	432c      	orrs	r4, r5
    5c42:	7104      	strb	r4, [r0, #4]
    dst_p[5] |= pack_left_shift_u8(src_p->ui_probability_of_existence_obj_suffix_0, 5u, 0xe0u);
    5c44:	798d      	ldrb	r5, [r1, #6]
    dst_p[6] |= pack_left_shift_u8(src_p->ui_probability_of_existence_obj_suffix_1, 1u, 0x0eu);
    dst_p[7] |= pack_left_shift_u8(src_p->ui_id_obj_suffix_1, 2u, 0xfcu);
    5c46:	79c4      	ldrb	r4, [r0, #7]
    dst_p[5] |= pack_left_shift_u8(src_p->ui_probability_of_existence_obj_suffix_0, 5u, 0xe0u);
    5c48:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
    5c4c:	b2d2      	uxtb	r2, r2
    5c4e:	7142      	strb	r2, [r0, #5]
    dst_p[5] |= pack_left_shift_u8(src_p->ui_dyn_confidence_obj_suffix_0, 2u, 0x1cu);
    5c50:	79cd      	ldrb	r5, [r1, #7]
    5c52:	00ad      	lsls	r5, r5, #2
    5c54:	f005 051c 	and.w	r5, r5, #28
    5c58:	432a      	orrs	r2, r5
    5c5a:	7142      	strb	r2, [r0, #5]
    dst_p[6] |= pack_left_shift_u8(src_p->e_classification_obj_suffix_0, 4u, 0xf0u);
    5c5c:	7a0a      	ldrb	r2, [r1, #8]
    5c5e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    5c62:	b2db      	uxtb	r3, r3
    5c64:	7183      	strb	r3, [r0, #6]
    dst_p[6] |= pack_left_shift_u8(src_p->ui_probability_of_existence_obj_suffix_1, 1u, 0x0eu);
    5c66:	7a4a      	ldrb	r2, [r1, #9]
    5c68:	0052      	lsls	r2, r2, #1
    5c6a:	f002 020e 	and.w	r2, r2, #14
    5c6e:	4313      	orrs	r3, r2
    5c70:	7183      	strb	r3, [r0, #6]
    dst_p[7] |= pack_left_shift_u8(src_p->ui_id_obj_suffix_1, 2u, 0xfcu);
    5c72:	7a8b      	ldrb	r3, [r1, #10]
    5c74:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
    5c78:	71c4      	strb	r4, [r0, #7]

    return (8);
    5c7a:	2008      	movs	r0, #8
}
    5c7c:	bc30      	pop	{r4, r5}
    5c7e:	4770      	bx	lr
        return (-EINVAL);
    5c80:	f06f 0015 	mvn.w	r0, #21
}
    5c84:	4770      	bx	lr
    5c86:	bf00      	nop

00005c88 <srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_2_pack>:
int srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_2_pack(
    uint8_t *dst_p,
    const struct srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_2_t *src_p,
    size_t size)
{
    if (size < 8u) {
    5c88:	2a07      	cmp	r2, #7
    5c8a:	d937      	bls.n	5cfc <srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_2_pack+0x74>
{
    5c8c:	b430      	push	{r4, r5}
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);
    5c8e:	2300      	movs	r3, #0
    5c90:	6043      	str	r3, [r0, #4]
    5c92:	6003      	str	r3, [r0, #0]

    dst_p[0] |= pack_right_shift_u16(src_p->f_vrel_y_obj_suffix_1, 3u, 0xffu);
    5c94:	880d      	ldrh	r5, [r1, #0]
    5c96:	7802      	ldrb	r2, [r0, #0]
    dst_p[1] |= pack_left_shift_u16(src_p->f_vrel_y_obj_suffix_1, 5u, 0xe0u);
    5c98:	7843      	ldrb	r3, [r0, #1]
    dst_p[1] |= pack_right_shift_u16(src_p->f_dist_y_obj_suffix_1, 8u, 0x1fu);
    dst_p[2] |= pack_left_shift_u16(src_p->f_dist_y_obj_suffix_1, 0u, 0xffu);
    5c9a:	7884      	ldrb	r4, [r0, #2]
    dst_p[0] |= pack_right_shift_u16(src_p->f_vrel_y_obj_suffix_1, 3u, 0xffu);
    5c9c:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
    5ca0:	7002      	strb	r2, [r0, #0]
    dst_p[1] |= pack_left_shift_u16(src_p->f_vrel_y_obj_suffix_1, 5u, 0xe0u);
    5ca2:	780d      	ldrb	r5, [r1, #0]
    dst_p[3] |= pack_right_shift_u16(src_p->f_vrel_x_obj_suffix_1, 3u, 0xffu);
    5ca4:	78c2      	ldrb	r2, [r0, #3]
    dst_p[1] |= pack_left_shift_u16(src_p->f_vrel_y_obj_suffix_1, 5u, 0xe0u);
    5ca6:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
    5caa:	b2db      	uxtb	r3, r3
    5cac:	7043      	strb	r3, [r0, #1]
    dst_p[1] |= pack_right_shift_u16(src_p->f_dist_y_obj_suffix_1, 8u, 0x1fu);
    5cae:	884d      	ldrh	r5, [r1, #2]
    5cb0:	f3c5 2504 	ubfx	r5, r5, #8, #5
    5cb4:	432b      	orrs	r3, r5
    5cb6:	7043      	strb	r3, [r0, #1]
    dst_p[2] |= pack_left_shift_u16(src_p->f_dist_y_obj_suffix_1, 0u, 0xffu);
    5cb8:	788d      	ldrb	r5, [r1, #2]
    dst_p[4] |= pack_left_shift_u16(src_p->f_vrel_x_obj_suffix_1, 5u, 0xe0u);
    5cba:	7903      	ldrb	r3, [r0, #4]
    dst_p[2] |= pack_left_shift_u16(src_p->f_dist_y_obj_suffix_1, 0u, 0xffu);
    5cbc:	432c      	orrs	r4, r5
    5cbe:	7084      	strb	r4, [r0, #2]
    dst_p[3] |= pack_right_shift_u16(src_p->f_vrel_x_obj_suffix_1, 3u, 0xffu);
    5cc0:	888d      	ldrh	r5, [r1, #4]
    dst_p[4] |= pack_right_shift_u16(src_p->f_dist_x_obj_suffix_1, 8u, 0x1fu);
    dst_p[5] |= pack_left_shift_u16(src_p->f_dist_x_obj_suffix_1, 0u, 0xffu);
    5cc2:	7944      	ldrb	r4, [r0, #5]
    dst_p[3] |= pack_right_shift_u16(src_p->f_vrel_x_obj_suffix_1, 3u, 0xffu);
    5cc4:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
    5cc8:	70c2      	strb	r2, [r0, #3]
    dst_p[4] |= pack_left_shift_u16(src_p->f_vrel_x_obj_suffix_1, 5u, 0xe0u);
    5cca:	790d      	ldrb	r5, [r1, #4]
    dst_p[6] |= pack_left_shift_u8(src_p->f_width_obj_suffix_1, 1u, 0xfeu);
    5ccc:	7982      	ldrb	r2, [r0, #6]
    dst_p[4] |= pack_left_shift_u16(src_p->f_vrel_x_obj_suffix_1, 5u, 0xe0u);
    5cce:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
    5cd2:	b2db      	uxtb	r3, r3
    5cd4:	7103      	strb	r3, [r0, #4]
    dst_p[4] |= pack_right_shift_u16(src_p->f_dist_x_obj_suffix_1, 8u, 0x1fu);
    5cd6:	88cd      	ldrh	r5, [r1, #6]
    5cd8:	f3c5 2504 	ubfx	r5, r5, #8, #5
    5cdc:	432b      	orrs	r3, r5
    5cde:	7103      	strb	r3, [r0, #4]
    dst_p[5] |= pack_left_shift_u16(src_p->f_dist_x_obj_suffix_1, 0u, 0xffu);
    5ce0:	798d      	ldrb	r5, [r1, #6]
    dst_p[7] |= pack_left_shift_u8(src_p->f_length_obj_suffix_1, 0u, 0xffu);
    5ce2:	79c3      	ldrb	r3, [r0, #7]
    dst_p[5] |= pack_left_shift_u16(src_p->f_dist_x_obj_suffix_1, 0u, 0xffu);
    5ce4:	432c      	orrs	r4, r5
    5ce6:	7144      	strb	r4, [r0, #5]
    dst_p[6] |= pack_left_shift_u8(src_p->f_width_obj_suffix_1, 1u, 0xfeu);
    5ce8:	7a0c      	ldrb	r4, [r1, #8]
    5cea:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    5cee:	7182      	strb	r2, [r0, #6]
    dst_p[7] |= pack_left_shift_u8(src_p->f_length_obj_suffix_1, 0u, 0xffu);
    5cf0:	7a4a      	ldrb	r2, [r1, #9]
    5cf2:	4313      	orrs	r3, r2
    5cf4:	71c3      	strb	r3, [r0, #7]

    return (8);
}
    5cf6:	bc30      	pop	{r4, r5}
    return (8);
    5cf8:	2008      	movs	r0, #8
}
    5cfa:	4770      	bx	lr
        return (-EINVAL);
    5cfc:	f06f 0015 	mvn.w	r0, #21
}
    5d00:	4770      	bx	lr
    5d02:	bf00      	nop

00005d04 <srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_3_pack>:
int srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_3_pack(
    uint8_t *dst_p,
    const struct srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_3_t *src_p,
    size_t size)
{
    if (size < 8u) {
    5d04:	2a07      	cmp	r2, #7
    5d06:	d94e      	bls.n	5da6 <srr520_yg11_v05_out_srr_obj_suffix_0_suffix_1_3_pack+0xa2>
{
    5d08:	b430      	push	{r4, r5}
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);
    5d0a:	2300      	movs	r3, #0
    5d0c:	6003      	str	r3, [r0, #0]
    5d0e:	6043      	str	r3, [r0, #4]

    dst_p[0] |= pack_right_shift_u16(src_p->f_rcs_obj_suffix_1, 3u, 0xffu);
    5d10:	880d      	ldrh	r5, [r1, #0]
    5d12:	7803      	ldrb	r3, [r0, #0]
    dst_p[1] |= pack_left_shift_u16(src_p->f_rcs_obj_suffix_1, 5u, 0xe0u);
    5d14:	7844      	ldrb	r4, [r0, #1]
    dst_p[1] |= pack_left_shift_u8(src_p->ui_class_confidence_obj_suffix_1, 2u, 0x1cu);
    dst_p[2] |= pack_left_shift_u8(src_p->e_classification_obj_suffix_1, 4u, 0xf0u);
    5d16:	7882      	ldrb	r2, [r0, #2]
    dst_p[0] |= pack_right_shift_u16(src_p->f_rcs_obj_suffix_1, 3u, 0xffu);
    5d18:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
    5d1c:	7003      	strb	r3, [r0, #0]
    dst_p[1] |= pack_left_shift_u16(src_p->f_rcs_obj_suffix_1, 5u, 0xe0u);
    5d1e:	780d      	ldrb	r5, [r1, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->e_dynamic_property_obj_suffix_1, 0u, 0x0fu);
    dst_p[3] |= pack_left_shift_u8(src_p->ui_dyn_confidence_obj_suffix_1, 5u, 0xe0u);
    5d20:	78c3      	ldrb	r3, [r0, #3]
    dst_p[1] |= pack_left_shift_u16(src_p->f_rcs_obj_suffix_1, 5u, 0xe0u);
    5d22:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
    5d26:	b2e4      	uxtb	r4, r4
    5d28:	7044      	strb	r4, [r0, #1]
    dst_p[1] |= pack_left_shift_u8(src_p->ui_class_confidence_obj_suffix_1, 2u, 0x1cu);
    5d2a:	788d      	ldrb	r5, [r1, #2]
    5d2c:	00ad      	lsls	r5, r5, #2
    5d2e:	f005 051c 	and.w	r5, r5, #28
    5d32:	432c      	orrs	r4, r5
    5d34:	7044      	strb	r4, [r0, #1]
    dst_p[2] |= pack_left_shift_u8(src_p->e_classification_obj_suffix_1, 4u, 0xf0u);
    5d36:	78cc      	ldrb	r4, [r1, #3]
    dst_p[3] |= pack_left_shift_u8(src_p->e_maintenance_state_obj_suffix_1, 2u, 0x1cu);
    dst_p[4] |= pack_right_shift_u16(src_p->f_orientation_obj_suffix_1, 2u, 0xffu);
    5d38:	7905      	ldrb	r5, [r0, #4]
    dst_p[2] |= pack_left_shift_u8(src_p->e_classification_obj_suffix_1, 4u, 0xf0u);
    5d3a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    5d3e:	b2d2      	uxtb	r2, r2
    5d40:	7082      	strb	r2, [r0, #2]
    dst_p[2] |= pack_left_shift_u8(src_p->e_dynamic_property_obj_suffix_1, 0u, 0x0fu);
    5d42:	790c      	ldrb	r4, [r1, #4]
    5d44:	f004 040f 	and.w	r4, r4, #15
    5d48:	4322      	orrs	r2, r4
    5d4a:	7082      	strb	r2, [r0, #2]
    dst_p[3] |= pack_left_shift_u8(src_p->ui_dyn_confidence_obj_suffix_1, 5u, 0xe0u);
    5d4c:	794c      	ldrb	r4, [r1, #5]
    dst_p[5] |= pack_left_shift_u16(src_p->f_orientation_obj_suffix_1, 6u, 0xc0u);
    5d4e:	7942      	ldrb	r2, [r0, #5]
    dst_p[3] |= pack_left_shift_u8(src_p->ui_dyn_confidence_obj_suffix_1, 5u, 0xe0u);
    5d50:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
    5d54:	b2db      	uxtb	r3, r3
    5d56:	70c3      	strb	r3, [r0, #3]
    dst_p[3] |= pack_left_shift_u8(src_p->e_maintenance_state_obj_suffix_1, 2u, 0x1cu);
    5d58:	798c      	ldrb	r4, [r1, #6]
    5d5a:	00a4      	lsls	r4, r4, #2
    5d5c:	f004 041c 	and.w	r4, r4, #28
    5d60:	4323      	orrs	r3, r4
    5d62:	70c3      	strb	r3, [r0, #3]
    dst_p[4] |= pack_right_shift_u16(src_p->f_orientation_obj_suffix_1, 2u, 0xffu);
    5d64:	890c      	ldrh	r4, [r1, #8]
    dst_p[5] |= pack_right_shift_u16(src_p->f_rcs_obj_suffix_0, 5u, 0x3fu);
    dst_p[6] |= pack_left_shift_u16(src_p->f_rcs_obj_suffix_0, 3u, 0xf8u);
    5d66:	7983      	ldrb	r3, [r0, #6]
    dst_p[4] |= pack_right_shift_u16(src_p->f_orientation_obj_suffix_1, 2u, 0xffu);
    5d68:	ea45 0594 	orr.w	r5, r5, r4, lsr #2
    5d6c:	7105      	strb	r5, [r0, #4]
    dst_p[5] |= pack_left_shift_u16(src_p->f_orientation_obj_suffix_1, 6u, 0xc0u);
    5d6e:	7a0c      	ldrb	r4, [r1, #8]
    5d70:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    5d74:	b2d2      	uxtb	r2, r2
    5d76:	7142      	strb	r2, [r0, #5]
    dst_p[5] |= pack_right_shift_u16(src_p->f_rcs_obj_suffix_0, 5u, 0x3fu);
    5d78:	894c      	ldrh	r4, [r1, #10]
    5d7a:	f3c4 1445 	ubfx	r4, r4, #5, #6
    5d7e:	4322      	orrs	r2, r4
    5d80:	7142      	strb	r2, [r0, #5]
    dst_p[6] |= pack_left_shift_u16(src_p->f_rcs_obj_suffix_0, 3u, 0xf8u);
    5d82:	7a8a      	ldrb	r2, [r1, #10]
    5d84:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    5d88:	b2db      	uxtb	r3, r3
    5d8a:	7183      	strb	r3, [r0, #6]
    dst_p[6] |= pack_right_shift_u8(src_p->ui_life_cycles_obj_suffix_1, 4u, 0x07u);
    5d8c:	7b0a      	ldrb	r2, [r1, #12]
    5d8e:	f3c2 1202 	ubfx	r2, r2, #4, #3
    5d92:	4313      	orrs	r3, r2
    5d94:	7183      	strb	r3, [r0, #6]
    dst_p[7] |= pack_left_shift_u8(src_p->ui_life_cycles_obj_suffix_1, 4u, 0xf0u);
    5d96:	7b0a      	ldrb	r2, [r1, #12]
    5d98:	79c3      	ldrb	r3, [r0, #7]
    5d9a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    5d9e:	71c3      	strb	r3, [r0, #7]

    return (8);
    5da0:	bc30      	pop	{r4, r5}
    return (8);
    5da2:	2008      	movs	r0, #8
    5da4:	4770      	bx	lr
        return (-EINVAL);
    5da6:	f06f 0015 	mvn.w	r0, #21
    5daa:	4770      	bx	lr

00005dac <HW_UserInit>:
    5dac:	4770      	bx	lr
    5dae:	bf00      	nop

00005db0 <HW_Init>:
    5db0:	4985      	ldr	r1, [pc, #532]	; (5fc8 <HW_Init+0x218>)
    5db2:	4a86      	ldr	r2, [pc, #536]	; (5fcc <HW_Init+0x21c>)
    5db4:	4886      	ldr	r0, [pc, #536]	; (5fd0 <HW_Init+0x220>)
    5db6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5dba:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    5dbe:	f04f 34ff 	mov.w	r4, #4294967295
    5dc2:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
    5dc6:	2601      	movs	r6, #1
    5dc8:	f8c1 4084 	str.w	r4, [r1, #132]	; 0x84
    5dcc:	f04f 0802 	mov.w	r8, #2
    5dd0:	2400      	movs	r4, #0
    5dd2:	f04f 0c77 	mov.w	ip, #119	; 0x77
    5dd6:	210f      	movs	r1, #15
    5dd8:	f8c5 8004 	str.w	r8, [r5, #4]
    5ddc:	f8c5 c00c 	str.w	ip, [r5, #12]
    5de0:	60ac      	str	r4, [r5, #8]
    5de2:	616c      	str	r4, [r5, #20]
    5de4:	63ec      	str	r4, [r5, #60]	; 0x3c
    5de6:	606e      	str	r6, [r5, #4]
    5de8:	61d1      	str	r1, [r2, #28]
    5dea:	6811      	ldr	r1, [r2, #0]
    5dec:	4b79      	ldr	r3, [pc, #484]	; (5fd4 <HW_Init+0x224>)
    5dee:	4f7a      	ldr	r7, [pc, #488]	; (5fd8 <HW_Init+0x228>)
    5df0:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 5fec <HW_Init+0x23c>
    5df4:	f041 010f 	orr.w	r1, r1, #15
    5df8:	6011      	str	r1, [r2, #0]
    5dfa:	21b0      	movs	r1, #176	; 0xb0
    5dfc:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
    5e00:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
    5e04:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
    5e08:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
    5e0c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    5e10:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    5e14:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    5e18:	2130      	movs	r1, #48	; 0x30
    5e1a:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
    5e1e:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
    5e22:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
    5e26:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
    5e2a:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
    5e2e:	6839      	ldr	r1, [r7, #0]
    5e30:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
    5e34:	f021 0170 	bic.w	r1, r1, #112	; 0x70
    5e38:	6039      	str	r1, [r7, #0]
    5e3a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    5e3e:	6191      	str	r1, [r2, #24]
    5e40:	6811      	ldr	r1, [r2, #0]
    5e42:	f441 6140 	orr.w	r1, r1, #3072	; 0xc00
    5e46:	6011      	str	r1, [r2, #0]
    5e48:	2211      	movs	r2, #17
    5e4a:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    5e4e:	21a0      	movs	r1, #160	; 0xa0
    5e50:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
    5e54:	609a      	str	r2, [r3, #8]
    5e56:	60da      	str	r2, [r3, #12]
    5e58:	2220      	movs	r2, #32
    5e5a:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
    5e5e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    5e62:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    5e66:	61fe      	str	r6, [r7, #28]
    5e68:	683a      	ldr	r2, [r7, #0]
    5e6a:	495c      	ldr	r1, [pc, #368]	; (5fdc <HW_Init+0x22c>)
    5e6c:	4332      	orrs	r2, r6
    5e6e:	603a      	str	r2, [r7, #0]
    5e70:	f240 1201 	movw	r2, #257	; 0x101
    5e74:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    5e78:	f8c0 21c8 	str.w	r2, [r0, #456]	; 0x1c8
    5e7c:	f44f 7201 	mov.w	r2, #516	; 0x204
    5e80:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    5e84:	f240 2205 	movw	r2, #517	; 0x205
    5e88:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    5e8c:	f240 220d 	movw	r2, #525	; 0x20d
    5e90:	659a      	str	r2, [r3, #88]	; 0x58
    5e92:	f240 2215 	movw	r2, #533	; 0x215
    5e96:	649a      	str	r2, [r3, #72]	; 0x48
    5e98:	645a      	str	r2, [r3, #68]	; 0x44
    5e9a:	63da      	str	r2, [r3, #60]	; 0x3c
    5e9c:	641a      	str	r2, [r3, #64]	; 0x40
    5e9e:	f240 123f 	movw	r2, #319	; 0x13f
    5ea2:	f8cc 2014 	str.w	r2, [ip, #20]
    5ea6:	4a4e      	ldr	r2, [pc, #312]	; (5fe0 <HW_Init+0x230>)
    5ea8:	f8cc 2010 	str.w	r2, [ip, #16]
    5eac:	600c      	str	r4, [r1, #0]
    5eae:	f8d0 21dc 	ldr.w	r2, [r0, #476]	; 0x1dc
    5eb2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
    5eb6:	f8c0 21dc 	str.w	r2, [r0, #476]	; 0x1dc
    5eba:	f8d0 21dc 	ldr.w	r2, [r0, #476]	; 0x1dc
    5ebe:	f442 12b0 	orr.w	r2, r2, #1441792	; 0x160000
    5ec2:	f8c0 21dc 	str.w	r2, [r0, #476]	; 0x1dc
    5ec6:	f240 2201 	movw	r2, #513	; 0x201
    5eca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    5ece:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    5ed2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    5ed6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    5eda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    5ede:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    5ee2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    5ee6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    5eea:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    5eee:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    5ef2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    5ef6:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    5efa:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    5efe:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    5f02:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    5f06:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    5f0a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    5f0e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    5f12:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    5f16:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    5f1a:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    5f1e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    5f22:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
    5f26:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
    5f2a:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
    5f2e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    5f32:	f8d0 21a0 	ldr.w	r2, [r0, #416]	; 0x1a0
    5f36:	f042 0204 	orr.w	r2, r2, #4
    5f3a:	f8c0 21a0 	str.w	r2, [r0, #416]	; 0x1a0
    5f3e:	f44f 6980 	mov.w	r9, #1024	; 0x400
    5f42:	2281      	movs	r2, #129	; 0x81
    5f44:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    5f48:	f8c1 4210 	str.w	r4, [r1, #528]	; 0x210
    5f4c:	f8c1 4204 	str.w	r4, [r1, #516]	; 0x204
    5f50:	f8c1 4214 	str.w	r4, [r1, #532]	; 0x214
    5f54:	f8c1 4208 	str.w	r4, [r1, #520]	; 0x208
    5f58:	f8c1 820c 	str.w	r8, [r1, #524]	; 0x20c
    5f5c:	f8c1 6218 	str.w	r6, [r1, #536]	; 0x218
    5f60:	600e      	str	r6, [r1, #0]
    5f62:	f847 9c28 	str.w	r9, [r7, #-40]
    5f66:	f857 2c40 	ldr.w	r2, [r7, #-64]
    5f6a:	ea42 0209 	orr.w	r2, r2, r9
    5f6e:	f847 2c40 	str.w	r2, [r7, #-64]
    5f72:	2005      	movs	r0, #5
    5f74:	629c      	str	r4, [r3, #40]	; 0x28
    5f76:	f001 fb0f 	bl	7598 <SYSTIME_Wait>
    5f7a:	2005      	movs	r0, #5
    5f7c:	f847 9c24 	str.w	r9, [r7, #-36]
    5f80:	f001 fb0a 	bl	7598 <SYSTIME_Wait>
    5f84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    5f88:	f847 9c28 	str.w	r9, [r7, #-40]
    5f8c:	f001 fb04 	bl	7598 <SYSTIME_Wait>
    5f90:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    5f94:	4a13      	ldr	r2, [pc, #76]	; (5fe4 <HW_Init+0x234>)
    5f96:	f8c5 8004 	str.w	r8, [r5, #4]
    5f9a:	2010      	movs	r0, #16
    5f9c:	804e      	strh	r6, [r1, #2]
    5f9e:	4613      	mov	r3, r2
    5fa0:	60ac      	str	r4, [r5, #8]
    5fa2:	f8a1 8002 	strh.w	r8, [r1, #2]
    5fa6:	606e      	str	r6, [r5, #4]
    5fa8:	61d0      	str	r0, [r2, #28]
    5faa:	69dc      	ldr	r4, [r3, #28]
    5fac:	f014 0410 	ands.w	r4, r4, #16
    5fb0:	d1fb      	bne.n	5faa <HW_Init+0x1fa>
    5fb2:	4a0d      	ldr	r2, [pc, #52]	; (5fe8 <HW_Init+0x238>)
    5fb4:	60dc      	str	r4, [r3, #12]
    5fb6:	619c      	str	r4, [r3, #24]
    5fb8:	601a      	str	r2, [r3, #0]
    5fba:	f001 fae5 	bl	7588 <PFLASH_Startup>
    5fbe:	f7ff fef5 	bl	5dac <HW_UserInit>
    5fc2:	4620      	mov	r0, r4
    5fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5fc8:	e000e100 	.word	0xe000e100
    5fcc:	20098020 	.word	0x20098020
    5fd0:	400fc000 	.word	0x400fc000
    5fd4:	4002c000 	.word	0x4002c000
    5fd8:	20098040 	.word	0x20098040
    5fdc:	2009c000 	.word	0x2009c000
    5fe0:	00040602 	.word	0x00040602
    5fe4:	20094000 	.word	0x20094000
    5fe8:	600303e8 	.word	0x600303e8
    5fec:	00200080 	.word	0x00200080

00005ff0 <HW_GetModuleID>:
    5ff0:	b150      	cbz	r0, 6008 <HW_GetModuleID+0x18>
    5ff2:	4b06      	ldr	r3, [pc, #24]	; (600c <HW_GetModuleID+0x1c>)
    5ff4:	695a      	ldr	r2, [r3, #20]
    5ff6:	f3c2 1342 	ubfx	r3, r2, #5, #3
    5ffa:	0492      	lsls	r2, r2, #18
    5ffc:	bf48      	it	mi
    5ffe:	f043 0308 	orrmi.w	r3, r3, #8
    6002:	7003      	strb	r3, [r0, #0]
    6004:	2000      	movs	r0, #0
    6006:	4770      	bx	lr
    6008:	2001      	movs	r0, #1
    600a:	4770      	bx	lr
    600c:	20098020 	.word	0x20098020

00006010 <HW_GetHwVersion>:
    6010:	b1c8      	cbz	r0, 6046 <HW_GetHwVersion+0x36>
    6012:	4b0e      	ldr	r3, [pc, #56]	; (604c <HW_GetHwVersion+0x3c>)
    6014:	695a      	ldr	r2, [r3, #20]
    6016:	6959      	ldr	r1, [r3, #20]
    6018:	f3c2 1207 	ubfx	r2, r2, #4, #8
    601c:	03c9      	lsls	r1, r1, #15
    601e:	f002 0307 	and.w	r3, r2, #7
    6022:	d406      	bmi.n	6032 <HW_GetHwVersion+0x22>
    6024:	f083 030f 	eor.w	r3, r3, #15
    6028:	3305      	adds	r3, #5
    602a:	b2db      	uxtb	r3, r3
    602c:	7003      	strb	r3, [r0, #0]
    602e:	2000      	movs	r0, #0
    6030:	4770      	bx	lr
    6032:	f043 0108 	orr.w	r1, r3, #8
    6036:	43d2      	mvns	r2, r2
    6038:	290f      	cmp	r1, #15
    603a:	f002 0307 	and.w	r3, r2, #7
    603e:	d1f3      	bne.n	6028 <HW_GetHwVersion+0x18>
    6040:	7003      	strb	r3, [r0, #0]
    6042:	2000      	movs	r0, #0
    6044:	4770      	bx	lr
    6046:	2001      	movs	r0, #1
    6048:	4770      	bx	lr
    604a:	bf00      	nop
    604c:	20098040 	.word	0x20098040

00006050 <HW_GetDIN>:
    6050:	b180      	cbz	r0, 6074 <HW_GetDIN+0x24>
    6052:	4b09      	ldr	r3, [pc, #36]	; (6078 <HW_GetDIN+0x28>)
    6054:	695a      	ldr	r2, [r3, #20]
    6056:	f3c2 3380 	ubfx	r3, r2, #14, #1
    605a:	0351      	lsls	r1, r2, #13
    605c:	bf48      	it	mi
    605e:	f043 0302 	orrmi.w	r3, r3, #2
    6062:	0152      	lsls	r2, r2, #5
    6064:	bf48      	it	mi
    6066:	f043 0304 	orrmi.w	r3, r3, #4
    606a:	f083 0307 	eor.w	r3, r3, #7
    606e:	6003      	str	r3, [r0, #0]
    6070:	2000      	movs	r0, #0
    6072:	4770      	bx	lr
    6074:	2001      	movs	r0, #1
    6076:	4770      	bx	lr
    6078:	20098020 	.word	0x20098020

0000607c <HW_SetDOUT>:
    607c:	b150      	cbz	r0, 6094 <HW_SetDOUT+0x18>
    607e:	6800      	ldr	r0, [r0, #0]
    6080:	4b05      	ldr	r3, [pc, #20]	; (6098 <HW_SetDOUT+0x1c>)
    6082:	f010 0001 	ands.w	r0, r0, #1
    6086:	f04f 0201 	mov.w	r2, #1
    608a:	bf1a      	itte	ne
    608c:	2000      	movne	r0, #0
    608e:	619a      	strne	r2, [r3, #24]
    6090:	61da      	streq	r2, [r3, #28]
    6092:	4770      	bx	lr
    6094:	2001      	movs	r0, #1
    6096:	4770      	bx	lr
    6098:	20098040 	.word	0x20098040

0000609c <HW_SetLED>:
    609c:	2801      	cmp	r0, #1
    609e:	d009      	beq.n	60b4 <HW_SetLED+0x18>
    60a0:	2802      	cmp	r0, #2
    60a2:	d105      	bne.n	60b0 <HW_SetLED+0x14>
    60a4:	2903      	cmp	r1, #3
    60a6:	d83b      	bhi.n	6120 <HW_SetLED+0x84>
    60a8:	e8df f001 	tbb	[pc, r1]
    60ac:	22272e35 	.word	0x22272e35
    60b0:	2002      	movs	r0, #2
    60b2:	4770      	bx	lr
    60b4:	2903      	cmp	r1, #3
    60b6:	d833      	bhi.n	6120 <HW_SetLED+0x84>
    60b8:	e8df f001 	tbb	[pc, r1]
    60bc:	02070e15 	.word	0x02070e15
    60c0:	4b18      	ldr	r3, [pc, #96]	; (6124 <HW_SetLED+0x88>)
    60c2:	2203      	movs	r2, #3
    60c4:	619a      	str	r2, [r3, #24]
    60c6:	2000      	movs	r0, #0
    60c8:	4770      	bx	lr
    60ca:	4b16      	ldr	r3, [pc, #88]	; (6124 <HW_SetLED+0x88>)
    60cc:	2102      	movs	r1, #2
    60ce:	2201      	movs	r2, #1
    60d0:	61d9      	str	r1, [r3, #28]
    60d2:	2000      	movs	r0, #0
    60d4:	619a      	str	r2, [r3, #24]
    60d6:	4770      	bx	lr
    60d8:	4b12      	ldr	r3, [pc, #72]	; (6124 <HW_SetLED+0x88>)
    60da:	2101      	movs	r1, #1
    60dc:	2202      	movs	r2, #2
    60de:	61d9      	str	r1, [r3, #28]
    60e0:	2000      	movs	r0, #0
    60e2:	619a      	str	r2, [r3, #24]
    60e4:	4770      	bx	lr
    60e6:	4b0f      	ldr	r3, [pc, #60]	; (6124 <HW_SetLED+0x88>)
    60e8:	2203      	movs	r2, #3
    60ea:	61da      	str	r2, [r3, #28]
    60ec:	2000      	movs	r0, #0
    60ee:	4770      	bx	lr
    60f0:	4b0c      	ldr	r3, [pc, #48]	; (6124 <HW_SetLED+0x88>)
    60f2:	220c      	movs	r2, #12
    60f4:	619a      	str	r2, [r3, #24]
    60f6:	2000      	movs	r0, #0
    60f8:	4770      	bx	lr
    60fa:	4b0a      	ldr	r3, [pc, #40]	; (6124 <HW_SetLED+0x88>)
    60fc:	2108      	movs	r1, #8
    60fe:	2204      	movs	r2, #4
    6100:	61d9      	str	r1, [r3, #28]
    6102:	2000      	movs	r0, #0
    6104:	619a      	str	r2, [r3, #24]
    6106:	4770      	bx	lr
    6108:	4b06      	ldr	r3, [pc, #24]	; (6124 <HW_SetLED+0x88>)
    610a:	2104      	movs	r1, #4
    610c:	2208      	movs	r2, #8
    610e:	61d9      	str	r1, [r3, #28]
    6110:	2000      	movs	r0, #0
    6112:	619a      	str	r2, [r3, #24]
    6114:	4770      	bx	lr
    6116:	4b03      	ldr	r3, [pc, #12]	; (6124 <HW_SetLED+0x88>)
    6118:	220c      	movs	r2, #12
    611a:	61da      	str	r2, [r3, #28]
    611c:	2000      	movs	r0, #0
    611e:	4770      	bx	lr
    6120:	2001      	movs	r0, #1
    6122:	4770      	bx	lr
    6124:	20098020 	.word	0x20098020

00006128 <HW_JumpToBootloader>:
    6128:	f8df c080 	ldr.w	ip, [pc, #128]	; 61ac <HW_JumpToBootloader+0x84>
    612c:	4c1a      	ldr	r4, [pc, #104]	; (6198 <HW_JumpToBootloader+0x70>)
    612e:	4606      	mov	r6, r0
    6130:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    6134:	b480      	push	{r7}
    6136:	4f19      	ldr	r7, [pc, #100]	; (619c <HW_JumpToBootloader+0x74>)
    6138:	f44f 6580 	mov.w	r5, #1024	; 0x400
    613c:	61e5      	str	r5, [r4, #28]
    613e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    6140:	f5a4 2410 	sub.w	r4, r4, #589824	; 0x90000
    6144:	4d16      	ldr	r5, [pc, #88]	; (61a0 <HW_JumpToBootloader+0x78>)
    6146:	f8dc 3000 	ldr.w	r3, [ip]
    614a:	703b      	strb	r3, [r7, #0]
    614c:	3c40      	subs	r4, #64	; 0x40
    614e:	2300      	movs	r3, #0
    6150:	e9c5 3300 	strd	r3, r3, [r5]
    6154:	e9c5 3302 	strd	r3, r3, [r5, #8]
    6158:	612b      	str	r3, [r5, #16]
    615a:	e9c4 3300 	strd	r3, r3, [r4]
    615e:	e9c4 3302 	strd	r3, r3, [r4, #8]
    6162:	6123      	str	r3, [r4, #16]
    6164:	b156      	cbz	r6, 617c <HW_JumpToBootloader+0x54>
    6166:	4637      	mov	r7, r6
    6168:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    616a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    616c:	683b      	ldr	r3, [r7, #0]
    616e:	602b      	str	r3, [r5, #0]
    6170:	f106 0514 	add.w	r5, r6, #20
    6174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6178:	682b      	ldr	r3, [r5, #0]
    617a:	6023      	str	r3, [r4, #0]
    617c:	f3bf 8f4f 	dsb	sy
    6180:	4908      	ldr	r1, [pc, #32]	; (61a4 <HW_JumpToBootloader+0x7c>)
    6182:	4b09      	ldr	r3, [pc, #36]	; (61a8 <HW_JumpToBootloader+0x80>)
    6184:	68ca      	ldr	r2, [r1, #12]
    6186:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    618a:	4313      	orrs	r3, r2
    618c:	60cb      	str	r3, [r1, #12]
    618e:	f3bf 8f4f 	dsb	sy
    6192:	bf00      	nop
    6194:	e7fd      	b.n	6192 <HW_JumpToBootloader+0x6a>
    6196:	bf00      	nop
    6198:	20098000 	.word	0x20098000
    619c:	20007f80 	.word	0x20007f80
    61a0:	20007fa0 	.word	0x20007fa0
    61a4:	e000ed00 	.word	0xe000ed00
    61a8:	05fa0004 	.word	0x05fa0004
    61ac:	00007b98 	.word	0x00007b98

000061b0 <CAN_FilterAdd>:
    61b0:	2801      	cmp	r0, #1
    61b2:	d867      	bhi.n	6284 <CAN_FilterAdd+0xd4>
    61b4:	429a      	cmp	r2, r3
    61b6:	d865      	bhi.n	6284 <CAN_FilterAdd+0xd4>
    61b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    61bc:	d262      	bcs.n	6284 <CAN_FilterAdd+0xd4>
    61be:	4932      	ldr	r1, [pc, #200]	; (6288 <CAN_FilterAdd+0xd8>)
    61c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    61c4:	f103 0c01 	add.w	ip, r3, #1
    61c8:	ea4f 1e80 	mov.w	lr, r0, lsl #6
    61cc:	2701      	movs	r7, #1
    61ce:	f002 041f 	and.w	r4, r2, #31
    61d2:	0756      	lsls	r6, r2, #29
    61d4:	eb0e 1552 	add.w	r5, lr, r2, lsr #5
    61d8:	fa07 f404 	lsl.w	r4, r7, r4
    61dc:	d007      	beq.n	61ee <CAN_FilterAdd+0x3e>
    61de:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
    61e2:	3201      	adds	r2, #1
    61e4:	4334      	orrs	r4, r6
    61e6:	4562      	cmp	r2, ip
    61e8:	f841 4025 	str.w	r4, [r1, r5, lsl #2]
    61ec:	d1ef      	bne.n	61ce <CAN_FilterAdd+0x1e>
    61ee:	1dd4      	adds	r4, r2, #7
    61f0:	429c      	cmp	r4, r3
    61f2:	d81f      	bhi.n	6234 <CAN_FilterAdd+0x84>
    61f4:	f1a3 0907 	sub.w	r9, r3, #7
    61f8:	eba9 0902 	sub.w	r9, r9, r2
    61fc:	f102 0508 	add.w	r5, r2, #8
    6200:	f029 0e07 	bic.w	lr, r9, #7
    6204:	44ae      	add	lr, r5
    6206:	46aa      	mov	sl, r5
    6208:	0187      	lsls	r7, r0, #6
    620a:	f04f 08ff 	mov.w	r8, #255	; 0xff
    620e:	e000      	b.n	6212 <CAN_FilterAdd+0x62>
    6210:	3508      	adds	r5, #8
    6212:	eb07 1652 	add.w	r6, r7, r2, lsr #5
    6216:	f002 041f 	and.w	r4, r2, #31
    621a:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
    621e:	fa08 f404 	lsl.w	r4, r8, r4
    6222:	4314      	orrs	r4, r2
    6224:	4575      	cmp	r5, lr
    6226:	462a      	mov	r2, r5
    6228:	f841 4026 	str.w	r4, [r1, r6, lsl #2]
    622c:	d1f0      	bne.n	6210 <CAN_FilterAdd+0x60>
    622e:	f029 0207 	bic.w	r2, r9, #7
    6232:	4452      	add	r2, sl
    6234:	4293      	cmp	r3, r2
    6236:	d30f      	bcc.n	6258 <CAN_FilterAdd+0xa8>
    6238:	0187      	lsls	r7, r0, #6
    623a:	2601      	movs	r6, #1
    623c:	eb07 1552 	add.w	r5, r7, r2, lsr #5
    6240:	f002 031f 	and.w	r3, r2, #31
    6244:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]
    6248:	fa06 f303 	lsl.w	r3, r6, r3
    624c:	3201      	adds	r2, #1
    624e:	4323      	orrs	r3, r4
    6250:	4562      	cmp	r2, ip
    6252:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
    6256:	d1f1      	bne.n	623c <CAN_FilterAdd+0x8c>
    6258:	0203      	lsls	r3, r0, #8
    625a:	4d0c      	ldr	r5, [pc, #48]	; (628c <CAN_FilterAdd+0xdc>)
    625c:	0100      	lsls	r0, r0, #4
    625e:	1f1a      	subs	r2, r3, #4
    6260:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
    6264:	4411      	add	r1, r2
    6266:	441d      	add	r5, r3
    6268:	2000      	movs	r0, #0
    626a:	f851 3f04 	ldr.w	r3, [r1, #4]!
    626e:	f040 0206 	orr.w	r2, r0, #6
    6272:	42a9      	cmp	r1, r5
    6274:	f100 7080 	add.w	r0, r0, #16777216	; 0x1000000
    6278:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    627c:	d1f5      	bne.n	626a <CAN_FilterAdd+0xba>
    627e:	2000      	movs	r0, #0
    6280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6284:	2004      	movs	r0, #4
    6286:	4770      	bx	lr
    6288:	10000470 	.word	0x10000470
    628c:	1000056c 	.word	0x1000056c

00006290 <CAN_FilterRem>:
    6290:	2801      	cmp	r0, #1
    6292:	d86c      	bhi.n	636e <CAN_FilterRem+0xde>
    6294:	429a      	cmp	r2, r3
    6296:	d86a      	bhi.n	636e <CAN_FilterRem+0xde>
    6298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    629c:	d267      	bcs.n	636e <CAN_FilterRem+0xde>
    629e:	4935      	ldr	r1, [pc, #212]	; (6374 <CAN_FilterRem+0xe4>)
    62a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62a4:	f04f 0c01 	mov.w	ip, #1
    62a8:	1c5e      	adds	r6, r3, #1
    62aa:	ea4f 1e80 	mov.w	lr, r0, lsl #6
    62ae:	f002 041f 	and.w	r4, r2, #31
    62b2:	0755      	lsls	r5, r2, #29
    62b4:	eb0e 1752 	add.w	r7, lr, r2, lsr #5
    62b8:	fa0c f404 	lsl.w	r4, ip, r4
    62bc:	d008      	beq.n	62d0 <CAN_FilterRem+0x40>
    62be:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
    62c2:	3201      	adds	r2, #1
    62c4:	ea25 0404 	bic.w	r4, r5, r4
    62c8:	4296      	cmp	r6, r2
    62ca:	f841 4027 	str.w	r4, [r1, r7, lsl #2]
    62ce:	d1ee      	bne.n	62ae <CAN_FilterRem+0x1e>
    62d0:	1dd4      	adds	r4, r2, #7
    62d2:	429c      	cmp	r4, r3
    62d4:	d821      	bhi.n	631a <CAN_FilterRem+0x8a>
    62d6:	f1a3 0907 	sub.w	r9, r3, #7
    62da:	eba9 0902 	sub.w	r9, r9, r2
    62de:	f102 0508 	add.w	r5, r2, #8
    62e2:	f029 0e07 	bic.w	lr, r9, #7
    62e6:	44ae      	add	lr, r5
    62e8:	46aa      	mov	sl, r5
    62ea:	ea4f 1c80 	mov.w	ip, r0, lsl #6
    62ee:	f04f 08ff 	mov.w	r8, #255	; 0xff
    62f2:	e000      	b.n	62f6 <CAN_FilterRem+0x66>
    62f4:	3508      	adds	r5, #8
    62f6:	eb0c 1752 	add.w	r7, ip, r2, lsr #5
    62fa:	f002 021f 	and.w	r2, r2, #31
    62fe:	f851 4027 	ldr.w	r4, [r1, r7, lsl #2]
    6302:	fa08 f202 	lsl.w	r2, r8, r2
    6306:	ea24 0402 	bic.w	r4, r4, r2
    630a:	45ae      	cmp	lr, r5
    630c:	462a      	mov	r2, r5
    630e:	f841 4027 	str.w	r4, [r1, r7, lsl #2]
    6312:	d1ef      	bne.n	62f4 <CAN_FilterRem+0x64>
    6314:	f029 0207 	bic.w	r2, r9, #7
    6318:	4452      	add	r2, sl
    631a:	4293      	cmp	r3, r2
    631c:	d311      	bcc.n	6342 <CAN_FilterRem+0xb2>
    631e:	ea4f 1c80 	mov.w	ip, r0, lsl #6
    6322:	2701      	movs	r7, #1
    6324:	eb0c 1552 	add.w	r5, ip, r2, lsr #5
    6328:	f002 041f 	and.w	r4, r2, #31
    632c:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
    6330:	fa07 f404 	lsl.w	r4, r7, r4
    6334:	3201      	adds	r2, #1
    6336:	ea23 0304 	bic.w	r3, r3, r4
    633a:	4296      	cmp	r6, r2
    633c:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
    6340:	d1f0      	bne.n	6324 <CAN_FilterRem+0x94>
    6342:	0203      	lsls	r3, r0, #8
    6344:	4d0c      	ldr	r5, [pc, #48]	; (6378 <CAN_FilterRem+0xe8>)
    6346:	0100      	lsls	r0, r0, #4
    6348:	1f1a      	subs	r2, r3, #4
    634a:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
    634e:	4411      	add	r1, r2
    6350:	441d      	add	r5, r3
    6352:	2000      	movs	r0, #0
    6354:	f851 3f04 	ldr.w	r3, [r1, #4]!
    6358:	f040 0206 	orr.w	r2, r0, #6
    635c:	428d      	cmp	r5, r1
    635e:	f100 7080 	add.w	r0, r0, #16777216	; 0x1000000
    6362:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    6366:	d1f5      	bne.n	6354 <CAN_FilterRem+0xc4>
    6368:	2000      	movs	r0, #0
    636a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    636e:	2004      	movs	r0, #4
    6370:	4770      	bx	lr
    6372:	bf00      	nop
    6374:	10000470 	.word	0x10000470
    6378:	1000056c 	.word	0x1000056c

0000637c <CAN_FilterReset>:
    637c:	2801      	cmp	r0, #1
    637e:	d81a      	bhi.n	63b6 <CAN_FilterReset+0x3a>
    6380:	490e      	ldr	r1, [pc, #56]	; (63bc <CAN_FilterReset+0x40>)
    6382:	0203      	lsls	r3, r0, #8
    6384:	b470      	push	{r4, r5, r6}
    6386:	1f1a      	subs	r2, r3, #4
    6388:	f101 06fc 	add.w	r6, r1, #252	; 0xfc
    638c:	0105      	lsls	r5, r0, #4
    638e:	2000      	movs	r0, #0
    6390:	441e      	add	r6, r3
    6392:	4411      	add	r1, r2
    6394:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    6398:	4604      	mov	r4, r0
    639a:	f841 4f04 	str.w	r4, [r1, #4]!
    639e:	f040 0206 	orr.w	r2, r0, #6
    63a2:	4623      	mov	r3, r4
    63a4:	42b1      	cmp	r1, r6
    63a6:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    63aa:	f100 7080 	add.w	r0, r0, #16777216	; 0x1000000
    63ae:	d1f4      	bne.n	639a <CAN_FilterReset+0x1e>
    63b0:	2000      	movs	r0, #0
    63b2:	bc70      	pop	{r4, r5, r6}
    63b4:	4770      	bx	lr
    63b6:	2004      	movs	r0, #4
    63b8:	4770      	bx	lr
    63ba:	bf00      	nop
    63bc:	10000470 	.word	0x10000470

000063c0 <CAN_Write>:
    63c0:	2801      	cmp	r0, #1
    63c2:	d81d      	bhi.n	6400 <CAN_Write+0x40>
    63c4:	b1e1      	cbz	r1, 6400 <CAN_Write+0x40>
    63c6:	0103      	lsls	r3, r0, #4
    63c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    63cc:	3320      	adds	r3, #32
    63ce:	885b      	ldrh	r3, [r3, #2]
    63d0:	07db      	lsls	r3, r3, #31
    63d2:	d51f      	bpl.n	6414 <CAN_Write+0x54>
    63d4:	884b      	ldrh	r3, [r1, #2]
    63d6:	0100      	lsls	r0, r0, #4
    63d8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    63dc:	2b01      	cmp	r3, #1
    63de:	f100 0004 	add.w	r0, r0, #4
    63e2:	d019      	beq.n	6418 <CAN_Write+0x58>
    63e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    63e8:	d00c      	beq.n	6404 <CAN_Write+0x44>
    63ea:	f241 0202 	movw	r2, #4098	; 0x1002
    63ee:	4293      	cmp	r3, r2
    63f0:	d125      	bne.n	643e <CAN_Write+0x7e>
    63f2:	4b57      	ldr	r3, [pc, #348]	; (6550 <CAN_Write+0x190>)
    63f4:	6203      	str	r3, [r0, #32]
    63f6:	3104      	adds	r1, #4
    63f8:	680b      	ldr	r3, [r1, #0]
    63fa:	6203      	str	r3, [r0, #32]
    63fc:	2000      	movs	r0, #0
    63fe:	4770      	bx	lr
    6400:	2004      	movs	r0, #4
    6402:	4770      	bx	lr
    6404:	89cb      	ldrh	r3, [r1, #14]
    6406:	07da      	lsls	r2, r3, #31
    6408:	f140 808d 	bpl.w	6526 <CAN_Write+0x166>
    640c:	4b51      	ldr	r3, [pc, #324]	; (6554 <CAN_Write+0x194>)
    640e:	6203      	str	r3, [r0, #32]
    6410:	3104      	adds	r1, #4
    6412:	e007      	b.n	6424 <CAN_Write+0x64>
    6414:	2002      	movs	r0, #2
    6416:	4770      	bx	lr
    6418:	8acb      	ldrh	r3, [r1, #22]
    641a:	07da      	lsls	r2, r3, #31
    641c:	d511      	bpl.n	6442 <CAN_Write+0x82>
    641e:	4b4d      	ldr	r3, [pc, #308]	; (6554 <CAN_Write+0x194>)
    6420:	6203      	str	r3, [r0, #32]
    6422:	310c      	adds	r1, #12
    6424:	680b      	ldr	r3, [r1, #0]
    6426:	6203      	str	r3, [r0, #32]
    6428:	3104      	adds	r1, #4
    642a:	680b      	ldr	r3, [r1, #0]
    642c:	6203      	str	r3, [r0, #32]
    642e:	3104      	adds	r1, #4
    6430:	680b      	ldr	r3, [r1, #0]
    6432:	6203      	str	r3, [r0, #32]
    6434:	3104      	adds	r1, #4
    6436:	680b      	ldr	r3, [r1, #0]
    6438:	6203      	str	r3, [r0, #32]
    643a:	2000      	movs	r0, #0
    643c:	4770      	bx	lr
    643e:	2003      	movs	r0, #3
    6440:	4770      	bx	lr
    6442:	7d0a      	ldrb	r2, [r1, #20]
    6444:	f013 0f10 	tst.w	r3, #16
    6448:	4b43      	ldr	r3, [pc, #268]	; (6558 <CAN_Write+0x198>)
    644a:	ea4f 1212 	mov.w	r2, r2, lsr #4
    644e:	bf0a      	itet	eq
    6450:	eb03 0242 	addeq.w	r2, r3, r2, lsl #1
    6454:	f833 2012 	ldrhne.w	r2, [r3, r2, lsl #1]
    6458:	8c12      	ldrheq	r2, [r2, #32]
    645a:	1f13      	subs	r3, r2, #4
    645c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    6460:	089b      	lsrs	r3, r3, #2
    6462:	6202      	str	r2, [r0, #32]
    6464:	310c      	adds	r1, #12
    6466:	3b01      	subs	r3, #1
    6468:	2b13      	cmp	r3, #19
    646a:	d86f      	bhi.n	654c <CAN_Write+0x18c>
    646c:	a201      	add	r2, pc, #4	; (adr r2, 6474 <CAN_Write+0xb4>)
    646e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6472:	bf00      	nop
    6474:	000063f9 	.word	0x000063f9
    6478:	00006431 	.word	0x00006431
    647c:	0000642b 	.word	0x0000642b
    6480:	00006425 	.word	0x00006425
    6484:	0000651f 	.word	0x0000651f
    6488:	00006519 	.word	0x00006519
    648c:	00006513 	.word	0x00006513
    6490:	0000650d 	.word	0x0000650d
    6494:	00006507 	.word	0x00006507
    6498:	00006501 	.word	0x00006501
    649c:	000064fb 	.word	0x000064fb
    64a0:	000064f5 	.word	0x000064f5
    64a4:	000064ef 	.word	0x000064ef
    64a8:	000064e9 	.word	0x000064e9
    64ac:	000064e3 	.word	0x000064e3
    64b0:	000064dd 	.word	0x000064dd
    64b4:	000064d7 	.word	0x000064d7
    64b8:	000064d1 	.word	0x000064d1
    64bc:	000064cb 	.word	0x000064cb
    64c0:	000064c5 	.word	0x000064c5
    64c4:	680b      	ldr	r3, [r1, #0]
    64c6:	6203      	str	r3, [r0, #32]
    64c8:	3104      	adds	r1, #4
    64ca:	680b      	ldr	r3, [r1, #0]
    64cc:	6203      	str	r3, [r0, #32]
    64ce:	3104      	adds	r1, #4
    64d0:	680b      	ldr	r3, [r1, #0]
    64d2:	6203      	str	r3, [r0, #32]
    64d4:	3104      	adds	r1, #4
    64d6:	680b      	ldr	r3, [r1, #0]
    64d8:	6203      	str	r3, [r0, #32]
    64da:	3104      	adds	r1, #4
    64dc:	680b      	ldr	r3, [r1, #0]
    64de:	6203      	str	r3, [r0, #32]
    64e0:	3104      	adds	r1, #4
    64e2:	680b      	ldr	r3, [r1, #0]
    64e4:	6203      	str	r3, [r0, #32]
    64e6:	3104      	adds	r1, #4
    64e8:	680b      	ldr	r3, [r1, #0]
    64ea:	6203      	str	r3, [r0, #32]
    64ec:	3104      	adds	r1, #4
    64ee:	680b      	ldr	r3, [r1, #0]
    64f0:	6203      	str	r3, [r0, #32]
    64f2:	3104      	adds	r1, #4
    64f4:	680b      	ldr	r3, [r1, #0]
    64f6:	6203      	str	r3, [r0, #32]
    64f8:	3104      	adds	r1, #4
    64fa:	680b      	ldr	r3, [r1, #0]
    64fc:	6203      	str	r3, [r0, #32]
    64fe:	3104      	adds	r1, #4
    6500:	680b      	ldr	r3, [r1, #0]
    6502:	6203      	str	r3, [r0, #32]
    6504:	3104      	adds	r1, #4
    6506:	680b      	ldr	r3, [r1, #0]
    6508:	6203      	str	r3, [r0, #32]
    650a:	3104      	adds	r1, #4
    650c:	680b      	ldr	r3, [r1, #0]
    650e:	6203      	str	r3, [r0, #32]
    6510:	3104      	adds	r1, #4
    6512:	680b      	ldr	r3, [r1, #0]
    6514:	6203      	str	r3, [r0, #32]
    6516:	3104      	adds	r1, #4
    6518:	680b      	ldr	r3, [r1, #0]
    651a:	6203      	str	r3, [r0, #32]
    651c:	3104      	adds	r1, #4
    651e:	680b      	ldr	r3, [r1, #0]
    6520:	6203      	str	r3, [r0, #32]
    6522:	3104      	adds	r1, #4
    6524:	e77e      	b.n	6424 <CAN_Write+0x64>
    6526:	7b0a      	ldrb	r2, [r1, #12]
    6528:	f013 0f10 	tst.w	r3, #16
    652c:	4b0a      	ldr	r3, [pc, #40]	; (6558 <CAN_Write+0x198>)
    652e:	ea4f 1212 	mov.w	r2, r2, lsr #4
    6532:	bf0a      	itet	eq
    6534:	eb03 0242 	addeq.w	r2, r3, r2, lsl #1
    6538:	f833 2012 	ldrhne.w	r2, [r3, r2, lsl #1]
    653c:	8c12      	ldrheq	r2, [r2, #32]
    653e:	1f13      	subs	r3, r2, #4
    6540:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    6544:	089b      	lsrs	r3, r3, #2
    6546:	6202      	str	r2, [r0, #32]
    6548:	3104      	adds	r1, #4
    654a:	e78c      	b.n	6466 <CAN_Write+0xa6>
    654c:	2000      	movs	r0, #0
    654e:	4770      	bx	lr
    6550:	10020008 	.word	0x10020008
    6554:	10000014 	.word	0x10000014
    6558:	00007bac 	.word	0x00007bac

0000655c <CAN_Read>:
    655c:	2801      	cmp	r0, #1
    655e:	d822      	bhi.n	65a6 <CAN_Read+0x4a>
    6560:	b309      	cbz	r1, 65a6 <CAN_Read+0x4a>
    6562:	0103      	lsls	r3, r0, #4
    6564:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    6568:	3320      	adds	r3, #32
    656a:	885b      	ldrh	r3, [r3, #2]
    656c:	05db      	lsls	r3, r3, #23
    656e:	d560      	bpl.n	6632 <CAN_Read+0xd6>
    6570:	0100      	lsls	r0, r0, #4
    6572:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    6576:	3004      	adds	r0, #4
    6578:	460b      	mov	r3, r1
    657a:	6a02      	ldr	r2, [r0, #32]
    657c:	f843 2b04 	str.w	r2, [r3], #4
    6580:	b292      	uxth	r2, r2
    6582:	3a04      	subs	r2, #4
    6584:	0892      	lsrs	r2, r2, #2
    6586:	3a01      	subs	r2, #1
    6588:	2a15      	cmp	r2, #21
    658a:	d854      	bhi.n	6636 <CAN_Read+0xda>
    658c:	e8df f002 	tbb	[pc, r2]
    6590:	44474a4d 	.word	0x44474a4d
    6594:	383b3e41 	.word	0x383b3e41
    6598:	2c2f3235 	.word	0x2c2f3235
    659c:	20232629 	.word	0x20232629
    65a0:	14171a1d 	.word	0x14171a1d
    65a4:	0d11      	.short	0x0d11
    65a6:	2004      	movs	r0, #4
    65a8:	4770      	bx	lr
    65aa:	6a03      	ldr	r3, [r0, #32]
    65ac:	604b      	str	r3, [r1, #4]
    65ae:	f101 0308 	add.w	r3, r1, #8
    65b2:	6a02      	ldr	r2, [r0, #32]
    65b4:	601a      	str	r2, [r3, #0]
    65b6:	3304      	adds	r3, #4
    65b8:	6a02      	ldr	r2, [r0, #32]
    65ba:	601a      	str	r2, [r3, #0]
    65bc:	3304      	adds	r3, #4
    65be:	6a02      	ldr	r2, [r0, #32]
    65c0:	601a      	str	r2, [r3, #0]
    65c2:	3304      	adds	r3, #4
    65c4:	6a02      	ldr	r2, [r0, #32]
    65c6:	601a      	str	r2, [r3, #0]
    65c8:	3304      	adds	r3, #4
    65ca:	6a02      	ldr	r2, [r0, #32]
    65cc:	601a      	str	r2, [r3, #0]
    65ce:	3304      	adds	r3, #4
    65d0:	6a02      	ldr	r2, [r0, #32]
    65d2:	601a      	str	r2, [r3, #0]
    65d4:	3304      	adds	r3, #4
    65d6:	6a02      	ldr	r2, [r0, #32]
    65d8:	601a      	str	r2, [r3, #0]
    65da:	3304      	adds	r3, #4
    65dc:	6a02      	ldr	r2, [r0, #32]
    65de:	601a      	str	r2, [r3, #0]
    65e0:	3304      	adds	r3, #4
    65e2:	6a02      	ldr	r2, [r0, #32]
    65e4:	601a      	str	r2, [r3, #0]
    65e6:	3304      	adds	r3, #4
    65e8:	6a02      	ldr	r2, [r0, #32]
    65ea:	601a      	str	r2, [r3, #0]
    65ec:	3304      	adds	r3, #4
    65ee:	6a02      	ldr	r2, [r0, #32]
    65f0:	601a      	str	r2, [r3, #0]
    65f2:	3304      	adds	r3, #4
    65f4:	6a02      	ldr	r2, [r0, #32]
    65f6:	601a      	str	r2, [r3, #0]
    65f8:	3304      	adds	r3, #4
    65fa:	6a02      	ldr	r2, [r0, #32]
    65fc:	601a      	str	r2, [r3, #0]
    65fe:	3304      	adds	r3, #4
    6600:	6a02      	ldr	r2, [r0, #32]
    6602:	601a      	str	r2, [r3, #0]
    6604:	3304      	adds	r3, #4
    6606:	6a02      	ldr	r2, [r0, #32]
    6608:	601a      	str	r2, [r3, #0]
    660a:	3304      	adds	r3, #4
    660c:	6a02      	ldr	r2, [r0, #32]
    660e:	601a      	str	r2, [r3, #0]
    6610:	3304      	adds	r3, #4
    6612:	6a02      	ldr	r2, [r0, #32]
    6614:	601a      	str	r2, [r3, #0]
    6616:	3304      	adds	r3, #4
    6618:	6a02      	ldr	r2, [r0, #32]
    661a:	601a      	str	r2, [r3, #0]
    661c:	3304      	adds	r3, #4
    661e:	6a02      	ldr	r2, [r0, #32]
    6620:	601a      	str	r2, [r3, #0]
    6622:	3304      	adds	r3, #4
    6624:	6a02      	ldr	r2, [r0, #32]
    6626:	601a      	str	r2, [r3, #0]
    6628:	3304      	adds	r3, #4
    662a:	6a02      	ldr	r2, [r0, #32]
    662c:	601a      	str	r2, [r3, #0]
    662e:	2000      	movs	r0, #0
    6630:	4770      	bx	lr
    6632:	2001      	movs	r0, #1
    6634:	4770      	bx	lr
    6636:	2000      	movs	r0, #0
    6638:	4770      	bx	lr
    663a:	bf00      	nop

0000663c <CAN_UnInitialize>:
    663c:	2801      	cmp	r0, #1
    663e:	d901      	bls.n	6644 <CAN_UnInitialize+0x8>
    6640:	2004      	movs	r0, #4
    6642:	4770      	bx	lr
    6644:	b510      	push	{r4, lr}
    6646:	0302      	lsls	r2, r0, #12
    6648:	2400      	movs	r4, #0
    664a:	0103      	lsls	r3, r0, #4
    664c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    6650:	f042 0001 	orr.w	r0, r2, #1
    6654:	4621      	mov	r1, r4
    6656:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
    665a:	2050      	movs	r0, #80	; 0x50
    665c:	f000 ff9c 	bl	7598 <SYSTIME_Wait>
    6660:	4620      	mov	r0, r4
    6662:	bd10      	pop	{r4, pc}

00006664 <CAN_Initialize>:
    6664:	2801      	cmp	r0, #1
    6666:	d82a      	bhi.n	66be <CAN_Initialize+0x5a>
    6668:	b349      	cbz	r1, 66be <CAN_Initialize+0x5a>
    666a:	0103      	lsls	r3, r0, #4
    666c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    6670:	0302      	lsls	r2, r0, #12
    6672:	b4f0      	push	{r4, r5, r6, r7}
    6674:	f042 0601 	orr.w	r6, r2, #1
    6678:	f44f 6510 	mov.w	r5, #2304	; 0x900
    667c:	680a      	ldr	r2, [r1, #0]
    667e:	841d      	strh	r5, [r3, #32]
    6680:	0104      	lsls	r4, r0, #4
    6682:	4841      	ldr	r0, [pc, #260]	; (6788 <CAN_Initialize+0x124>)
    6684:	f44f 65a0 	mov.w	r5, #1280	; 0x500
    6688:	841d      	strh	r5, [r3, #32]
    668a:	2700      	movs	r7, #0
    668c:	f44f 6520 	mov.w	r5, #2560	; 0xa00
    6690:	4282      	cmp	r2, r0
    6692:	841d      	strh	r5, [r3, #32]
    6694:	e9c3 670a 	strd	r6, r7, [r3, #40]	; 0x28
    6698:	d05a      	beq.n	6750 <CAN_Initialize+0xec>
    669a:	483c      	ldr	r0, [pc, #240]	; (678c <CAN_Initialize+0x128>)
    669c:	4282      	cmp	r2, r0
    669e:	d069      	beq.n	6774 <CAN_Initialize+0x110>
    66a0:	483b      	ldr	r0, [pc, #236]	; (6790 <CAN_Initialize+0x12c>)
    66a2:	4282      	cmp	r2, r0
    66a4:	d00d      	beq.n	66c2 <CAN_Initialize+0x5e>
    66a6:	483b      	ldr	r0, [pc, #236]	; (6794 <CAN_Initialize+0x130>)
    66a8:	4282      	cmp	r2, r0
    66aa:	d066      	beq.n	677a <CAN_Initialize+0x116>
    66ac:	483a      	ldr	r0, [pc, #232]	; (6798 <CAN_Initialize+0x134>)
    66ae:	4282      	cmp	r2, r0
    66b0:	d066      	beq.n	6780 <CAN_Initialize+0x11c>
    66b2:	483a      	ldr	r0, [pc, #232]	; (679c <CAN_Initialize+0x138>)
    66b4:	4282      	cmp	r2, r0
    66b6:	d148      	bne.n	674a <CAN_Initialize+0xe6>
    66b8:	22c1      	movs	r2, #193	; 0xc1
    66ba:	841a      	strh	r2, [r3, #32]
    66bc:	e003      	b.n	66c6 <CAN_Initialize+0x62>
    66be:	2004      	movs	r0, #4
    66c0:	4770      	bx	lr
    66c2:	2291      	movs	r2, #145	; 0x91
    66c4:	841a      	strh	r2, [r3, #32]
    66c6:	88ca      	ldrh	r2, [r1, #6]
    66c8:	7a88      	ldrb	r0, [r1, #10]
    66ca:	888e      	ldrh	r6, [r1, #4]
    66cc:	f891 c009 	ldrb.w	ip, [r1, #9]
    66d0:	7a0b      	ldrb	r3, [r1, #8]
    66d2:	89cd      	ldrh	r5, [r1, #14]
    66d4:	3a01      	subs	r2, #1
    66d6:	3e01      	subs	r6, #1
    66d8:	0400      	lsls	r0, r0, #16
    66da:	0212      	lsls	r2, r2, #8
    66dc:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
    66e0:	f040 0004 	orr.w	r0, r0, #4
    66e4:	f10c 3cff 	add.w	ip, ip, #4294967295
    66e8:	3b01      	subs	r3, #1
    66ea:	ea40 660c 	orr.w	r6, r0, ip, lsl #24
    66ee:	ea42 0703 	orr.w	r7, r2, r3
    66f2:	f104 4c00 	add.w	ip, r4, #2147483648	; 0x80000000
    66f6:	e9cc 670a 	strd	r6, r7, [ip, #40]	; 0x28
    66fa:	7c0b      	ldrb	r3, [r1, #16]
    66fc:	7c8a      	ldrb	r2, [r1, #18]
    66fe:	7c48      	ldrb	r0, [r1, #17]
    6700:	3b01      	subs	r3, #1
    6702:	3a01      	subs	r2, #1
    6704:	021b      	lsls	r3, r3, #8
    6706:	3d01      	subs	r5, #1
    6708:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    670c:	0612      	lsls	r2, r2, #24
    670e:	3801      	subs	r0, #1
    6710:	ea43 0700 	orr.w	r7, r3, r0
    6714:	f042 0605 	orr.w	r6, r2, #5
    6718:	e9cc 670a 	strd	r6, r7, [ip, #40]	; 0x28
    671c:	7b0b      	ldrb	r3, [r1, #12]
    671e:	2b01      	cmp	r3, #1
    6720:	d01e      	beq.n	6760 <CAN_Initialize+0xfc>
    6722:	d318      	bcc.n	6756 <CAN_Initialize+0xf2>
    6724:	2b02      	cmp	r3, #2
    6726:	d110      	bne.n	674a <CAN_Initialize+0xe6>
    6728:	4a1d      	ldr	r2, [pc, #116]	; (67a0 <CAN_Initialize+0x13c>)
    672a:	2300      	movs	r3, #0
    672c:	e9cc 230a 	strd	r2, r3, [ip, #40]	; 0x28
    6730:	7acb      	ldrb	r3, [r1, #11]
    6732:	2000      	movs	r0, #0
    6734:	4283      	cmp	r3, r0
    6736:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    673a:	bf0c      	ite	eq
    673c:	2202      	moveq	r2, #2
    673e:	2203      	movne	r2, #3
    6740:	4603      	mov	r3, r0
    6742:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    6746:	bcf0      	pop	{r4, r5, r6, r7}
    6748:	4770      	bx	lr
    674a:	2005      	movs	r0, #5
    674c:	bcf0      	pop	{r4, r5, r6, r7}
    674e:	4770      	bx	lr
    6750:	22c2      	movs	r2, #194	; 0xc2
    6752:	841a      	strh	r2, [r3, #32]
    6754:	e7b7      	b.n	66c6 <CAN_Initialize+0x62>
    6756:	4a13      	ldr	r2, [pc, #76]	; (67a4 <CAN_Initialize+0x140>)
    6758:	2300      	movs	r3, #0
    675a:	e9cc 230a 	strd	r2, r3, [ip, #40]	; 0x28
    675e:	e7e7      	b.n	6730 <CAN_Initialize+0xcc>
    6760:	2000      	movs	r0, #0
    6762:	4e11      	ldr	r6, [pc, #68]	; (67a8 <CAN_Initialize+0x144>)
    6764:	4a11      	ldr	r2, [pc, #68]	; (67ac <CAN_Initialize+0x148>)
    6766:	4607      	mov	r7, r0
    6768:	4603      	mov	r3, r0
    676a:	e9cc 670a 	strd	r6, r7, [ip, #40]	; 0x28
    676e:	e9cc 230a 	strd	r2, r3, [ip, #40]	; 0x28
    6772:	e7dd      	b.n	6730 <CAN_Initialize+0xcc>
    6774:	2281      	movs	r2, #129	; 0x81
    6776:	841a      	strh	r2, [r3, #32]
    6778:	e7a5      	b.n	66c6 <CAN_Initialize+0x62>
    677a:	22a1      	movs	r2, #161	; 0xa1
    677c:	841a      	strh	r2, [r3, #32]
    677e:	e7a2      	b.n	66c6 <CAN_Initialize+0x62>
    6780:	22b1      	movs	r2, #177	; 0xb1
    6782:	841a      	strh	r2, [r3, #32]
    6784:	e79f      	b.n	66c6 <CAN_Initialize+0x62>
    6786:	bf00      	nop
    6788:	04c4b400 	.word	0x04c4b400
    678c:	03938700 	.word	0x03938700
    6790:	02625a00 	.word	0x02625a00
    6794:	01c9c380 	.word	0x01c9c380
    6798:	016e3600 	.word	0x016e3600
    679c:	01312d00 	.word	0x01312d00
    67a0:	0014000b 	.word	0x0014000b
    67a4:	0014000c 	.word	0x0014000c
    67a8:	0004000b 	.word	0x0004000b
    67ac:	0010000c 	.word	0x0010000c

000067b0 <PFLASH_UserWrite>:
    67b0:	2000      	movs	r0, #0
    67b2:	4770      	bx	lr

000067b4 <PFLASH_UserInvokeBootloader>:
    67b4:	4770      	bx	lr
    67b6:	bf00      	nop

000067b8 <PFLASH_Process>:
    67b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67bc:	4cc7      	ldr	r4, [pc, #796]	; (6adc <PFLASH_Process+0x324>)
    67be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    67c2:	7825      	ldrb	r5, [r4, #0]
    67c4:	689e      	ldr	r6, [r3, #8]
    67c6:	b0b3      	sub	sp, #204	; 0xcc
    67c8:	b17d      	cbz	r5, 67ea <PFLASH_Process+0x32>
    67ca:	6863      	ldr	r3, [r4, #4]
    67cc:	7a21      	ldrb	r1, [r4, #8]
    67ce:	42b3      	cmp	r3, r6
    67d0:	bf84      	itt	hi
    67d2:	f106 32ff 	addhi.w	r2, r6, #4294967295
    67d6:	1ad3      	subhi	r3, r2, r3
    67d8:	f643 2298 	movw	r2, #15000	; 0x3a98
    67dc:	bf98      	it	ls
    67de:	1af3      	subls	r3, r6, r3
    67e0:	fb02 f201 	mul.w	r2, r2, r1
    67e4:	429a      	cmp	r2, r3
    67e6:	d915      	bls.n	6814 <PFLASH_Process+0x5c>
    67e8:	2500      	movs	r5, #0
    67ea:	7a62      	ldrb	r2, [r4, #9]
    67ec:	1e53      	subs	r3, r2, #1
    67ee:	2b0d      	cmp	r3, #13
    67f0:	f200 853a 	bhi.w	7268 <PFLASH_Process+0xab0>
    67f4:	e8df f013 	tbh	[pc, r3, lsl #1]
    67f8:	010c0046 	.word	0x010c0046
    67fc:	01880147 	.word	0x01880147
    6800:	027b01f4 	.word	0x027b01f4
    6804:	039a030f 	.word	0x039a030f
    6808:	040103d6 	.word	0x040103d6
    680c:	04840449 	.word	0x04840449
    6810:	003504bb 	.word	0x003504bb
    6814:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    6818:	2308      	movs	r3, #8
    681a:	f363 1207 	bfi	r2, r3, #4, #4
    681e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    6822:	f240 70e7 	movw	r0, #2023	; 0x7e7
    6826:	2300      	movs	r3, #0
    6828:	f44f 5580 	mov.w	r5, #4096	; 0x1000
    682c:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
    6830:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    6834:	21e6      	movs	r1, #230	; 0xe6
    6836:	2206      	movs	r2, #6
    6838:	900c      	str	r0, [sp, #48]	; 0x30
    683a:	a808      	add	r0, sp, #32
    683c:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
    6840:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    6844:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    6848:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    684c:	f88d 1034 	strb.w	r1, [sp, #52]	; 0x34
    6850:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    6854:	f7ff ffac 	bl	67b0 <PFLASH_UserWrite>
    6858:	4605      	mov	r5, r0
    685a:	2800      	cmp	r0, #0
    685c:	d1c5      	bne.n	67ea <PFLASH_Process+0x32>
    685e:	7020      	strb	r0, [r4, #0]
    6860:	e7c3      	b.n	67ea <PFLASH_Process+0x32>
    6862:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6864:	2b01      	cmp	r3, #1
    6866:	f000 8587 	beq.w	7378 <PFLASH_Process+0xbc0>
    686a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    686c:	42b3      	cmp	r3, r6
    686e:	f200 84bf 	bhi.w	71f0 <PFLASH_Process+0xa38>
    6872:	6e62      	ldr	r2, [r4, #100]	; 0x64
    6874:	1af3      	subs	r3, r6, r3
    6876:	429a      	cmp	r2, r3
    6878:	f240 84c0 	bls.w	71fc <PFLASH_Process+0xa44>
    687c:	4628      	mov	r0, r5
    687e:	b033      	add	sp, #204	; 0xcc
    6880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6884:	4f96      	ldr	r7, [pc, #600]	; (6ae0 <PFLASH_Process+0x328>)
    6886:	f8df 9274 	ldr.w	r9, [pc, #628]	; 6afc <PFLASH_Process+0x344>
    688a:	f8df 8274 	ldr.w	r8, [pc, #628]	; 6b00 <PFLASH_Process+0x348>
    688e:	2248      	movs	r2, #72	; 0x48
    6890:	2120      	movs	r1, #32
    6892:	4638      	mov	r0, r7
    6894:	f000 fec2 	bl	761c <memset>
    6898:	2300      	movs	r3, #0
    689a:	4638      	mov	r0, r7
    689c:	7323      	strb	r3, [r4, #12]
    689e:	f000 ff0f 	bl	76c0 <strlen>
    68a2:	4684      	mov	ip, r0
    68a4:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    68a8:	f10c 0901 	add.w	r9, ip, #1
    68ac:	f04f 0a7b 	mov.w	sl, #123	; 0x7b
    68b0:	f807 a00c 	strb.w	sl, [r7, ip]
    68b4:	f847 0009 	str.w	r0, [r7, r9]
    68b8:	44b9      	add	r9, r7
    68ba:	f10c 0a11 	add.w	sl, ip, #17
    68be:	f8c9 1004 	str.w	r1, [r9, #4]
    68c2:	f8c9 2008 	str.w	r2, [r9, #8]
    68c6:	e8b8 0007 	ldmia.w	r8!, {r0, r1, r2}
    68ca:	f8c9 300c 	str.w	r3, [r9, #12]
    68ce:	f8df e234 	ldr.w	lr, [pc, #564]	; 6b04 <PFLASH_Process+0x34c>
    68d2:	f847 000a 	str.w	r0, [r7, sl]
    68d6:	eb07 090a 	add.w	r9, r7, sl
    68da:	f8b8 8000 	ldrh.w	r8, [r8]
    68de:	f8c9 1004 	str.w	r1, [r9, #4]
    68e2:	f8c9 2008 	str.w	r2, [r9, #8]
    68e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    68ea:	f8a9 800c 	strh.w	r8, [r9, #12]
    68ee:	f10c 091f 	add.w	r9, ip, #31
    68f2:	eb07 0809 	add.w	r8, r7, r9
    68f6:	f847 0009 	str.w	r0, [r7, r9]
    68fa:	f89e 0000 	ldrb.w	r0, [lr]
    68fe:	f8c8 1004 	str.w	r1, [r8, #4]
    6902:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    6906:	f8c8 2008 	str.w	r2, [r8, #8]
    690a:	f8c8 300c 	str.w	r3, [r8, #12]
    690e:	f888 0010 	strb.w	r0, [r8, #16]
    6912:	7808      	ldrb	r0, [r1, #0]
    6914:	f10c 0c2f 	add.w	ip, ip, #47	; 0x2f
    6918:	2863      	cmp	r0, #99	; 0x63
    691a:	4467      	add	r7, ip
    691c:	f200 84cd 	bhi.w	72ba <PFLASH_Process+0xb02>
    6920:	2809      	cmp	r0, #9
    6922:	f240 8518 	bls.w	7356 <PFLASH_Process+0xb9e>
    6926:	4a6f      	ldr	r2, [pc, #444]	; (6ae4 <PFLASH_Process+0x32c>)
    6928:	fba2 0300 	umull	r0, r3, r2, r0
    692c:	44a4      	add	ip, r4
    692e:	08db      	lsrs	r3, r3, #3
    6930:	3330      	adds	r3, #48	; 0x30
    6932:	f88c 300c 	strb.w	r3, [ip, #12]
    6936:	7809      	ldrb	r1, [r1, #0]
    6938:	fba2 3201 	umull	r3, r2, r2, r1
    693c:	08d3      	lsrs	r3, r2, #3
    693e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6942:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
    6946:	3330      	adds	r3, #48	; 0x30
    6948:	707b      	strb	r3, [r7, #1]
    694a:	3702      	adds	r7, #2
    694c:	232e      	movs	r3, #46	; 0x2e
    694e:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    6952:	703b      	strb	r3, [r7, #0]
    6954:	7848      	ldrb	r0, [r1, #1]
    6956:	2863      	cmp	r0, #99	; 0x63
    6958:	f240 84e8 	bls.w	732c <PFLASH_Process+0xb74>
    695c:	4a62      	ldr	r2, [pc, #392]	; (6ae8 <PFLASH_Process+0x330>)
    695e:	4b61      	ldr	r3, [pc, #388]	; (6ae4 <PFLASH_Process+0x32c>)
    6960:	fba2 c000 	umull	ip, r0, r2, r0
    6964:	0940      	lsrs	r0, r0, #5
    6966:	3030      	adds	r0, #48	; 0x30
    6968:	7078      	strb	r0, [r7, #1]
    696a:	7848      	ldrb	r0, [r1, #1]
    696c:	fba2 c200 	umull	ip, r2, r2, r0
    6970:	0952      	lsrs	r2, r2, #5
    6972:	f04f 0c64 	mov.w	ip, #100	; 0x64
    6976:	fb0c 0212 	mls	r2, ip, r2, r0
    697a:	b2d2      	uxtb	r2, r2
    697c:	fba3 0202 	umull	r0, r2, r3, r2
    6980:	08d2      	lsrs	r2, r2, #3
    6982:	3230      	adds	r2, #48	; 0x30
    6984:	70ba      	strb	r2, [r7, #2]
    6986:	784a      	ldrb	r2, [r1, #1]
    6988:	fba3 1302 	umull	r1, r3, r3, r2
    698c:	08db      	lsrs	r3, r3, #3
    698e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6992:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
    6996:	3330      	adds	r3, #48	; 0x30
    6998:	70fb      	strb	r3, [r7, #3]
    699a:	1d3b      	adds	r3, r7, #4
    699c:	222e      	movs	r2, #46	; 0x2e
    699e:	f44f 703e 	mov.w	r0, #760	; 0x2f8
    69a2:	701a      	strb	r2, [r3, #0]
    69a4:	7887      	ldrb	r7, [r0, #2]
    69a6:	2f63      	cmp	r7, #99	; 0x63
    69a8:	f240 84ab 	bls.w	7302 <PFLASH_Process+0xb4a>
    69ac:	4a4e      	ldr	r2, [pc, #312]	; (6ae8 <PFLASH_Process+0x330>)
    69ae:	494d      	ldr	r1, [pc, #308]	; (6ae4 <PFLASH_Process+0x32c>)
    69b0:	fba2 c707 	umull	ip, r7, r2, r7
    69b4:	097f      	lsrs	r7, r7, #5
    69b6:	3730      	adds	r7, #48	; 0x30
    69b8:	705f      	strb	r7, [r3, #1]
    69ba:	7887      	ldrb	r7, [r0, #2]
    69bc:	fba2 c207 	umull	ip, r2, r2, r7
    69c0:	0952      	lsrs	r2, r2, #5
    69c2:	f04f 0c64 	mov.w	ip, #100	; 0x64
    69c6:	fb0c 7212 	mls	r2, ip, r2, r7
    69ca:	b2d2      	uxtb	r2, r2
    69cc:	fba1 7202 	umull	r7, r2, r1, r2
    69d0:	08d2      	lsrs	r2, r2, #3
    69d2:	3230      	adds	r2, #48	; 0x30
    69d4:	709a      	strb	r2, [r3, #2]
    69d6:	7882      	ldrb	r2, [r0, #2]
    69d8:	fba1 0102 	umull	r0, r1, r1, r2
    69dc:	08c9      	lsrs	r1, r1, #3
    69de:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    69e2:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
    69e6:	3130      	adds	r1, #48	; 0x30
    69e8:	70d9      	strb	r1, [r3, #3]
    69ea:	3304      	adds	r3, #4
    69ec:	222c      	movs	r2, #44	; 0x2c
    69ee:	2122      	movs	r1, #34	; 0x22
    69f0:	2700      	movs	r7, #0
    69f2:	705a      	strb	r2, [r3, #1]
    69f4:	7019      	strb	r1, [r3, #0]
    69f6:	709f      	strb	r7, [r3, #2]
    69f8:	4839      	ldr	r0, [pc, #228]	; (6ae0 <PFLASH_Process+0x328>)
    69fa:	f000 fe61 	bl	76c0 <strlen>
    69fe:	4420      	add	r0, r4
    6a00:	2320      	movs	r3, #32
    6a02:	2242      	movs	r2, #66	; 0x42
    6a04:	7303      	strb	r3, [r0, #12]
    6a06:	2302      	movs	r3, #2
    6a08:	65a7      	str	r7, [r4, #88]	; 0x58
    6a0a:	6562      	str	r2, [r4, #84]	; 0x54
    6a0c:	7263      	strb	r3, [r4, #9]
    6a0e:	e72c      	b.n	686a <PFLASH_Process+0xb2>
    6a10:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6a12:	2b01      	cmp	r3, #1
    6a14:	f47f af29 	bne.w	686a <PFLASH_Process+0xb2>
    6a18:	4f31      	ldr	r7, [pc, #196]	; (6ae0 <PFLASH_Process+0x328>)
    6a1a:	2248      	movs	r2, #72	; 0x48
    6a1c:	2120      	movs	r1, #32
    6a1e:	4638      	mov	r0, r7
    6a20:	f000 fdfc 	bl	761c <memset>
    6a24:	f245 03e4 	movw	r3, #20708	; 0x50e4
    6a28:	4a30      	ldr	r2, [pc, #192]	; (6aec <PFLASH_Process+0x334>)
    6a2a:	6819      	ldr	r1, [r3, #0]
    6a2c:	f04f 0800 	mov.w	r8, #0
    6a30:	2004      	movs	r0, #4
    6a32:	4291      	cmp	r1, r2
    6a34:	f884 800c 	strb.w	r8, [r4, #12]
    6a38:	7260      	strb	r0, [r4, #9]
    6a3a:	f47f af16 	bne.w	686a <PFLASH_Process+0xb2>
    6a3e:	685a      	ldr	r2, [r3, #4]
    6a40:	2a00      	cmp	r2, #0
    6a42:	f43f af12 	beq.w	686a <PFLASH_Process+0xb2>
    6a46:	689b      	ldr	r3, [r3, #8]
    6a48:	2b00      	cmp	r3, #0
    6a4a:	f43f af0e 	beq.w	686a <PFLASH_Process+0xb2>
    6a4e:	4638      	mov	r0, r7
    6a50:	f000 fe36 	bl	76c0 <strlen>
    6a54:	4b26      	ldr	r3, [pc, #152]	; (6af0 <PFLASH_Process+0x338>)
    6a56:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
    6a5a:	4684      	mov	ip, r0
    6a5c:	cb07      	ldmia	r3!, {r0, r1, r2}
    6a5e:	eb07 0e0c 	add.w	lr, r7, ip
    6a62:	f847 000c 	str.w	r0, [r7, ip]
    6a66:	881b      	ldrh	r3, [r3, #0]
    6a68:	f8ae 300c 	strh.w	r3, [lr, #12]
    6a6c:	44a4      	add	ip, r4
    6a6e:	2020      	movs	r0, #32
    6a70:	2710      	movs	r7, #16
    6a72:	2303      	movs	r3, #3
    6a74:	f8ce 1004 	str.w	r1, [lr, #4]
    6a78:	f8ce 2008 	str.w	r2, [lr, #8]
    6a7c:	6567      	str	r7, [r4, #84]	; 0x54
    6a7e:	f88c 0019 	strb.w	r0, [ip, #25]
    6a82:	7263      	strb	r3, [r4, #9]
    6a84:	e6f1      	b.n	686a <PFLASH_Process+0xb2>
    6a86:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6a88:	2b01      	cmp	r3, #1
    6a8a:	f47f aeee 	bne.w	686a <PFLASH_Process+0xb2>
    6a8e:	4f14      	ldr	r7, [pc, #80]	; (6ae0 <PFLASH_Process+0x328>)
    6a90:	2248      	movs	r2, #72	; 0x48
    6a92:	2120      	movs	r1, #32
    6a94:	4638      	mov	r0, r7
    6a96:	f000 fdc1 	bl	761c <memset>
    6a9a:	f04f 0800 	mov.w	r8, #0
    6a9e:	4638      	mov	r0, r7
    6aa0:	f884 800c 	strb.w	r8, [r4, #12]
    6aa4:	f000 fe0c 	bl	76c0 <strlen>
    6aa8:	4b12      	ldr	r3, [pc, #72]	; (6af4 <PFLASH_Process+0x33c>)
    6aaa:	881b      	ldrh	r3, [r3, #0]
    6aac:	523b      	strh	r3, [r7, r0]
    6aae:	f245 03e4 	movw	r3, #20708	; 0x50e4
    6ab2:	2240      	movs	r2, #64	; 0x40
    6ab4:	6899      	ldr	r1, [r3, #8]
    6ab6:	4638      	mov	r0, r7
    6ab8:	f000 fe70 	bl	779c <strncat>
    6abc:	4638      	mov	r0, r7
    6abe:	f000 fdff 	bl	76c0 <strlen>
    6ac2:	4b0d      	ldr	r3, [pc, #52]	; (6af8 <PFLASH_Process+0x340>)
    6ac4:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
    6ac8:	1821      	adds	r1, r4, r0
    6aca:	881b      	ldrh	r3, [r3, #0]
    6acc:	523b      	strh	r3, [r7, r0]
    6ace:	2247      	movs	r2, #71	; 0x47
    6ad0:	2020      	movs	r0, #32
    6ad2:	2304      	movs	r3, #4
    6ad4:	7388      	strb	r0, [r1, #14]
    6ad6:	6562      	str	r2, [r4, #84]	; 0x54
    6ad8:	7263      	strb	r3, [r4, #9]
    6ada:	e6c6      	b.n	686a <PFLASH_Process+0xb2>
    6adc:	10000670 	.word	0x10000670
    6ae0:	1000067c 	.word	0x1000067c
    6ae4:	cccccccd 	.word	0xcccccccd
    6ae8:	51eb851f 	.word	0x51eb851f
    6aec:	55aa5aa5 	.word	0x55aa5aa5
    6af0:	00007c34 	.word	0x00007c34
    6af4:	00007c44 	.word	0x00007c44
    6af8:	00007c48 	.word	0x00007c48
    6afc:	00007bfc 	.word	0x00007bfc
    6b00:	00007c10 	.word	0x00007c10
    6b04:	00007c20 	.word	0x00007c20
    6b08:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6b0a:	2b01      	cmp	r3, #1
    6b0c:	f47f aead 	bne.w	686a <PFLASH_Process+0xb2>
    6b10:	4fc8      	ldr	r7, [pc, #800]	; (6e34 <PFLASH_Process+0x67c>)
    6b12:	2248      	movs	r2, #72	; 0x48
    6b14:	2120      	movs	r1, #32
    6b16:	4638      	mov	r0, r7
    6b18:	f000 fd80 	bl	761c <memset>
    6b1c:	2300      	movs	r3, #0
    6b1e:	4638      	mov	r0, r7
    6b20:	7323      	strb	r3, [r4, #12]
    6b22:	f000 fdcd 	bl	76c0 <strlen>
    6b26:	4bc4      	ldr	r3, [pc, #784]	; (6e38 <PFLASH_Process+0x680>)
    6b28:	4686      	mov	lr, r0
    6b2a:	cb07      	ldmia	r3!, {r0, r1, r2}
    6b2c:	eb07 0c0e 	add.w	ip, r7, lr
    6b30:	f847 000e 	str.w	r0, [r7, lr]
    6b34:	f8b3 e000 	ldrh.w	lr, [r3]
    6b38:	789b      	ldrb	r3, [r3, #2]
    6b3a:	f8cc 1004 	str.w	r1, [ip, #4]
    6b3e:	a81d      	add	r0, sp, #116	; 0x74
    6b40:	f8cc 2008 	str.w	r2, [ip, #8]
    6b44:	f8ac e00c 	strh.w	lr, [ip, #12]
    6b48:	f88c 300e 	strb.w	r3, [ip, #14]
    6b4c:	f7ff fa60 	bl	6010 <HW_GetHwVersion>
    6b50:	f89d 8074 	ldrb.w	r8, [sp, #116]	; 0x74
    6b54:	4638      	mov	r0, r7
    6b56:	f1b8 0f00 	cmp.w	r8, #0
    6b5a:	f000 8472 	beq.w	7442 <PFLASH_Process+0xc8a>
    6b5e:	f000 fdaf 	bl	76c0 <strlen>
    6b62:	f1b8 0f0c 	cmp.w	r8, #12
    6b66:	4602      	mov	r2, r0
    6b68:	eb07 0100 	add.w	r1, r7, r0
    6b6c:	f000 848a 	beq.w	7484 <PFLASH_Process+0xccc>
    6b70:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    6b74:	f240 846d 	bls.w	7452 <PFLASH_Process+0xc9a>
    6b78:	4bb0      	ldr	r3, [pc, #704]	; (6e3c <PFLASH_Process+0x684>)
    6b7a:	f8df e2d4 	ldr.w	lr, [pc, #724]	; 6e50 <PFLASH_Process+0x698>
    6b7e:	fba3 3c08 	umull	r3, ip, r3, r8
    6b82:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    6b86:	2364      	movs	r3, #100	; 0x64
    6b88:	fb03 831c 	mls	r3, r3, ip, r8
    6b8c:	fbae 9008 	umull	r9, r0, lr, r8
    6b90:	b2db      	uxtb	r3, r3
    6b92:	08c0      	lsrs	r0, r0, #3
    6b94:	fbae e303 	umull	lr, r3, lr, r3
    6b98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6b9c:	4422      	add	r2, r4
    6b9e:	08db      	lsrs	r3, r3, #3
    6ba0:	eba8 0040 	sub.w	r0, r8, r0, lsl #1
    6ba4:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    6ba8:	3330      	adds	r3, #48	; 0x30
    6baa:	3030      	adds	r0, #48	; 0x30
    6bac:	f882 c00c 	strb.w	ip, [r2, #12]
    6bb0:	1cca      	adds	r2, r1, #3
    6bb2:	704b      	strb	r3, [r1, #1]
    6bb4:	7088      	strb	r0, [r1, #2]
    6bb6:	2300      	movs	r3, #0
    6bb8:	7013      	strb	r3, [r2, #0]
    6bba:	489e      	ldr	r0, [pc, #632]	; (6e34 <PFLASH_Process+0x67c>)
    6bbc:	f000 fd80 	bl	76c0 <strlen>
    6bc0:	4b9f      	ldr	r3, [pc, #636]	; (6e40 <PFLASH_Process+0x688>)
    6bc2:	183a      	adds	r2, r7, r0
    6bc4:	8819      	ldrh	r1, [r3, #0]
    6bc6:	5239      	strh	r1, [r7, r0]
    6bc8:	789b      	ldrb	r3, [r3, #2]
    6bca:	7093      	strb	r3, [r2, #2]
    6bcc:	4420      	add	r0, r4
    6bce:	2720      	movs	r7, #32
    6bd0:	2115      	movs	r1, #21
    6bd2:	2200      	movs	r2, #0
    6bd4:	2305      	movs	r3, #5
    6bd6:	7387      	strb	r7, [r0, #14]
    6bd8:	e9c4 1215 	strd	r1, r2, [r4, #84]	; 0x54
    6bdc:	7263      	strb	r3, [r4, #9]
    6bde:	e644      	b.n	686a <PFLASH_Process+0xb2>
    6be0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6be2:	2b01      	cmp	r3, #1
    6be4:	f47f ae41 	bne.w	686a <PFLASH_Process+0xb2>
    6be8:	4f92      	ldr	r7, [pc, #584]	; (6e34 <PFLASH_Process+0x67c>)
    6bea:	2248      	movs	r2, #72	; 0x48
    6bec:	2120      	movs	r1, #32
    6bee:	4638      	mov	r0, r7
    6bf0:	f000 fd14 	bl	761c <memset>
    6bf4:	2300      	movs	r3, #0
    6bf6:	4638      	mov	r0, r7
    6bf8:	7323      	strb	r3, [r4, #12]
    6bfa:	f000 fd61 	bl	76c0 <strlen>
    6bfe:	4a91      	ldr	r2, [pc, #580]	; (6e44 <PFLASH_Process+0x68c>)
    6c00:	4603      	mov	r3, r0
    6c02:	ca03      	ldmia	r2!, {r0, r1}
    6c04:	eb07 0c03 	add.w	ip, r7, r3
    6c08:	50f8      	str	r0, [r7, r3]
    6c0a:	f8b2 e000 	ldrh.w	lr, [r2]
    6c0e:	7890      	ldrb	r0, [r2, #2]
    6c10:	f88c 000a 	strb.w	r0, [ip, #10]
    6c14:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6c18:	f8cc 1004 	str.w	r1, [ip, #4]
    6c1c:	f8ac e008 	strh.w	lr, [ip, #8]
    6c20:	8811      	ldrh	r1, [r2, #0]
    6c22:	b289      	uxth	r1, r1
    6c24:	b2ca      	uxtb	r2, r1
    6c26:	330a      	adds	r3, #10
    6c28:	2a63      	cmp	r2, #99	; 0x63
    6c2a:	eb07 0003 	add.w	r0, r7, r3
    6c2e:	f240 83db 	bls.w	73e8 <PFLASH_Process+0xc30>
    6c32:	4982      	ldr	r1, [pc, #520]	; (6e3c <PFLASH_Process+0x684>)
    6c34:	f8df 8218 	ldr.w	r8, [pc, #536]	; 6e50 <PFLASH_Process+0x698>
    6c38:	fba1 1e02 	umull	r1, lr, r1, r2
    6c3c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
    6c40:	fba8 9102 	umull	r9, r1, r8, r2
    6c44:	f04f 0c64 	mov.w	ip, #100	; 0x64
    6c48:	fb0c 2c1e 	mls	ip, ip, lr, r2
    6c4c:	08c9      	lsrs	r1, r1, #3
    6c4e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    6c52:	fba8 8c0c 	umull	r8, ip, r8, ip
    6c56:	4423      	add	r3, r4
    6c58:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    6c5c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
    6c60:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
    6c64:	f10c 0130 	add.w	r1, ip, #48	; 0x30
    6c68:	3230      	adds	r2, #48	; 0x30
    6c6a:	f883 e00c 	strb.w	lr, [r3, #12]
    6c6e:	1cc3      	adds	r3, r0, #3
    6c70:	7041      	strb	r1, [r0, #1]
    6c72:	7082      	strb	r2, [r0, #2]
    6c74:	f04f 0800 	mov.w	r8, #0
    6c78:	f883 8000 	strb.w	r8, [r3]
    6c7c:	486d      	ldr	r0, [pc, #436]	; (6e34 <PFLASH_Process+0x67c>)
    6c7e:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 6e40 <PFLASH_Process+0x688>
    6c82:	f000 fd1d 	bl	76c0 <strlen>
    6c86:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 6e54 <PFLASH_Process+0x69c>
    6c8a:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
    6c8e:	4686      	mov	lr, r0
    6c90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    6c94:	f10e 0902 	add.w	r9, lr, #2
    6c98:	f8ba 8000 	ldrh.w	r8, [sl]
    6c9c:	f827 800e 	strh.w	r8, [r7, lr]
    6ca0:	eb07 0809 	add.w	r8, r7, r9
    6ca4:	f847 0009 	str.w	r0, [r7, r9]
    6ca8:	f8c8 1004 	str.w	r1, [r8, #4]
    6cac:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
    6cb0:	f10e 0919 	add.w	r9, lr, #25
    6cb4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 6e58 <PFLASH_Process+0x6a0>
    6cb8:	f8c8 2008 	str.w	r2, [r8, #8]
    6cbc:	44a6      	add	lr, r4
    6cbe:	eb07 0c09 	add.w	ip, r7, r9
    6cc2:	f8c8 300c 	str.w	r3, [r8, #12]
    6cc6:	f8c8 1014 	str.w	r1, [r8, #20]
    6cca:	f8ba b000 	ldrh.w	fp, [sl]
    6cce:	f89a a002 	ldrb.w	sl, [sl, #2]
    6cd2:	f8c8 0010 	str.w	r0, [r8, #16]
    6cd6:	2320      	movs	r3, #32
    6cd8:	2129      	movs	r1, #41	; 0x29
    6cda:	2206      	movs	r2, #6
    6cdc:	f827 b009 	strh.w	fp, [r7, r9]
    6ce0:	6561      	str	r1, [r4, #84]	; 0x54
    6ce2:	f88c a002 	strb.w	sl, [ip, #2]
    6ce6:	7262      	strb	r2, [r4, #9]
    6ce8:	f88e 3027 	strb.w	r3, [lr, #39]	; 0x27
    6cec:	e5bd      	b.n	686a <PFLASH_Process+0xb2>
    6cee:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6cf0:	2b01      	cmp	r3, #1
    6cf2:	f47f adba 	bne.w	686a <PFLASH_Process+0xb2>
    6cf6:	4f4f      	ldr	r7, [pc, #316]	; (6e34 <PFLASH_Process+0x67c>)
    6cf8:	2248      	movs	r2, #72	; 0x48
    6cfa:	2120      	movs	r1, #32
    6cfc:	4638      	mov	r0, r7
    6cfe:	f000 fc8d 	bl	761c <memset>
    6d02:	2200      	movs	r2, #0
    6d04:	233a      	movs	r3, #58	; 0x3a
    6d06:	7322      	strb	r2, [r4, #12]
    6d08:	a91d      	add	r1, sp, #116	; 0x74
    6d0a:	9303      	str	r3, [sp, #12]
    6d0c:	a803      	add	r0, sp, #12
    6d0e:	4b4e      	ldr	r3, [pc, #312]	; (6e48 <PFLASH_Process+0x690>)
    6d10:	4798      	blx	r3
    6d12:	4638      	mov	r0, r7
    6d14:	f000 fcd4 	bl	76c0 <strlen>
    6d18:	f8df c140 	ldr.w	ip, [pc, #320]	; 6e5c <PFLASH_Process+0x6a4>
    6d1c:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
    6d20:	4603      	mov	r3, r0
    6d22:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
    6d26:	f103 080e 	add.w	r8, r3, #14
    6d2a:	50f8      	str	r0, [r7, r3]
    6d2c:	443b      	add	r3, r7
    6d2e:	f8bc 9000 	ldrh.w	r9, [ip]
    6d32:	609a      	str	r2, [r3, #8]
    6d34:	eb07 0c08 	add.w	ip, r7, r8
    6d38:	f04f 3030 	mov.w	r0, #808464432	; 0x30303030
    6d3c:	4a43      	ldr	r2, [pc, #268]	; (6e4c <PFLASH_Process+0x694>)
    6d3e:	6059      	str	r1, [r3, #4]
    6d40:	f8a3 900c 	strh.w	r9, [r3, #12]
    6d44:	f10c 0107 	add.w	r1, ip, #7
    6d48:	f847 0008 	str.w	r0, [r7, r8]
    6d4c:	4673      	mov	r3, lr
    6d4e:	f8cc 0004 	str.w	r0, [ip, #4]
    6d52:	f003 000f 	and.w	r0, r3, #15
    6d56:	ea4f 131e 	mov.w	r3, lr, lsr #4
    6d5a:	5c10      	ldrb	r0, [r2, r0]
    6d5c:	f801 0901 	strb.w	r0, [r1], #-1
    6d60:	469e      	mov	lr, r3
    6d62:	9320      	str	r3, [sp, #128]	; 0x80
    6d64:	2b00      	cmp	r3, #0
    6d66:	d1f4      	bne.n	6d52 <PFLASH_Process+0x59a>
    6d68:	991f      	ldr	r1, [sp, #124]	; 0x7c
    6d6a:	f04f 3030 	mov.w	r0, #808464432	; 0x30303030
    6d6e:	f8cc 0008 	str.w	r0, [ip, #8]
    6d72:	f8cc 000c 	str.w	r0, [ip, #12]
    6d76:	460b      	mov	r3, r1
    6d78:	f10c 000f 	add.w	r0, ip, #15
    6d7c:	f003 0e0f 	and.w	lr, r3, #15
    6d80:	090b      	lsrs	r3, r1, #4
    6d82:	f812 100e 	ldrb.w	r1, [r2, lr]
    6d86:	f800 1901 	strb.w	r1, [r0], #-1
    6d8a:	931f      	str	r3, [sp, #124]	; 0x7c
    6d8c:	4619      	mov	r1, r3
    6d8e:	2b00      	cmp	r3, #0
    6d90:	d1f4      	bne.n	6d7c <PFLASH_Process+0x5c4>
    6d92:	991e      	ldr	r1, [sp, #120]	; 0x78
    6d94:	f04f 3030 	mov.w	r0, #808464432	; 0x30303030
    6d98:	f8cc 0010 	str.w	r0, [ip, #16]
    6d9c:	f8cc 0014 	str.w	r0, [ip, #20]
    6da0:	460b      	mov	r3, r1
    6da2:	f10c 0017 	add.w	r0, ip, #23
    6da6:	f003 0e0f 	and.w	lr, r3, #15
    6daa:	090b      	lsrs	r3, r1, #4
    6dac:	f812 100e 	ldrb.w	r1, [r2, lr]
    6db0:	f800 1901 	strb.w	r1, [r0], #-1
    6db4:	931e      	str	r3, [sp, #120]	; 0x78
    6db6:	4619      	mov	r1, r3
    6db8:	2b00      	cmp	r3, #0
    6dba:	d1f4      	bne.n	6da6 <PFLASH_Process+0x5ee>
    6dbc:	991d      	ldr	r1, [sp, #116]	; 0x74
    6dbe:	f04f 3030 	mov.w	r0, #808464432	; 0x30303030
    6dc2:	f8cc 0018 	str.w	r0, [ip, #24]
    6dc6:	f8cc 001c 	str.w	r0, [ip, #28]
    6dca:	460b      	mov	r3, r1
    6dcc:	f10c 001f 	add.w	r0, ip, #31
    6dd0:	f003 0e0f 	and.w	lr, r3, #15
    6dd4:	090b      	lsrs	r3, r1, #4
    6dd6:	f812 100e 	ldrb.w	r1, [r2, lr]
    6dda:	f800 1901 	strb.w	r1, [r0], #-1
    6dde:	931d      	str	r3, [sp, #116]	; 0x74
    6de0:	4619      	mov	r1, r3
    6de2:	2b00      	cmp	r3, #0
    6de4:	d1f4      	bne.n	6dd0 <PFLASH_Process+0x618>
    6de6:	f88c 3020 	strb.w	r3, [ip, #32]
    6dea:	4812      	ldr	r0, [pc, #72]	; (6e34 <PFLASH_Process+0x67c>)
    6dec:	9301      	str	r3, [sp, #4]
    6dee:	f000 fc67 	bl	76c0 <strlen>
    6df2:	4a13      	ldr	r2, [pc, #76]	; (6e40 <PFLASH_Process+0x688>)
    6df4:	9b01      	ldr	r3, [sp, #4]
    6df6:	8811      	ldrh	r1, [r2, #0]
    6df8:	65a3      	str	r3, [r4, #88]	; 0x58
    6dfa:	183b      	adds	r3, r7, r0
    6dfc:	5239      	strh	r1, [r7, r0]
    6dfe:	f892 c002 	ldrb.w	ip, [r2, #2]
    6e02:	f883 c002 	strb.w	ip, [r3, #2]
    6e06:	4420      	add	r0, r4
    6e08:	2120      	movs	r1, #32
    6e0a:	2233      	movs	r2, #51	; 0x33
    6e0c:	2307      	movs	r3, #7
    6e0e:	7381      	strb	r1, [r0, #14]
    6e10:	6562      	str	r2, [r4, #84]	; 0x54
    6e12:	7263      	strb	r3, [r4, #9]
    6e14:	e529      	b.n	686a <PFLASH_Process+0xb2>
    6e16:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
    6e1a:	f1b8 0f01 	cmp.w	r8, #1
    6e1e:	f47f ad24 	bne.w	686a <PFLASH_Process+0xb2>
    6e22:	4f04      	ldr	r7, [pc, #16]	; (6e34 <PFLASH_Process+0x67c>)
    6e24:	2248      	movs	r2, #72	; 0x48
    6e26:	4638      	mov	r0, r7
    6e28:	2120      	movs	r1, #32
    6e2a:	f000 fbf7 	bl	761c <memset>
    6e2e:	2300      	movs	r3, #0
    6e30:	7323      	strb	r3, [r4, #12]
    6e32:	e018      	b.n	6e66 <PFLASH_Process+0x6ae>
    6e34:	1000067c 	.word	0x1000067c
    6e38:	00007c4c 	.word	0x00007c4c
    6e3c:	51eb851f 	.word	0x51eb851f
    6e40:	00007c48 	.word	0x00007c48
    6e44:	00007c64 	.word	0x00007c64
    6e48:	1fff1ff1 	.word	0x1fff1ff1
    6e4c:	00007bec 	.word	0x00007bec
    6e50:	cccccccd 	.word	0xcccccccd
    6e54:	00007c70 	.word	0x00007c70
    6e58:	00007c88 	.word	0x00007c88
    6e5c:	00007c8c 	.word	0x00007c8c
    6e60:	2b10      	cmp	r3, #16
    6e62:	f000 82d2 	beq.w	740a <PFLASH_Process+0xc52>
    6e66:	f893 2300 	ldrb.w	r2, [r3, #768]	; 0x300
    6e6a:	2aff      	cmp	r2, #255	; 0xff
    6e6c:	f103 0301 	add.w	r3, r3, #1
    6e70:	d0f6      	beq.n	6e60 <PFLASH_Process+0x6a8>
    6e72:	48d1      	ldr	r0, [pc, #836]	; (71b8 <PFLASH_Process+0xa00>)
    6e74:	f000 fc24 	bl	76c0 <strlen>
    6e78:	4bd0      	ldr	r3, [pc, #832]	; (71bc <PFLASH_Process+0xa04>)
    6e7a:	f8df e358 	ldr.w	lr, [pc, #856]	; 71d4 <PFLASH_Process+0xa1c>
    6e7e:	4684      	mov	ip, r0
    6e80:	cb07      	ldmia	r3!, {r0, r1, r2}
    6e82:	f847 000c 	str.w	r0, [r7, ip]
    6e86:	eb07 000c 	add.w	r0, r7, ip
    6e8a:	f8b3 a000 	ldrh.w	sl, [r3]
    6e8e:	f893 9002 	ldrb.w	r9, [r3, #2]
    6e92:	6041      	str	r1, [r0, #4]
    6e94:	f44f 733e 	mov.w	r3, #760	; 0x2f8
    6e98:	6082      	str	r2, [r0, #8]
    6e9a:	f8a0 a00c 	strh.w	sl, [r0, #12]
    6e9e:	f880 900e 	strb.w	r9, [r0, #14]
    6ea2:	685b      	ldr	r3, [r3, #4]
    6ea4:	4573      	cmp	r3, lr
    6ea6:	f000 82b3 	beq.w	7410 <PFLASH_Process+0xc58>
    6eaa:	f8df e32c 	ldr.w	lr, [pc, #812]	; 71d8 <PFLASH_Process+0xa20>
    6eae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    6eb2:	f10c 0c0e 	add.w	ip, ip, #14
    6eb6:	eb07 090c 	add.w	r9, r7, ip
    6eba:	f847 000c 	str.w	r0, [r7, ip]
    6ebe:	f8de 0000 	ldr.w	r0, [lr]
    6ec2:	f8c9 0010 	str.w	r0, [r9, #16]
    6ec6:	f8c9 1004 	str.w	r1, [r9, #4]
    6eca:	f8c9 2008 	str.w	r2, [r9, #8]
    6ece:	f8c9 300c 	str.w	r3, [r9, #12]
    6ed2:	48b9      	ldr	r0, [pc, #740]	; (71b8 <PFLASH_Process+0xa00>)
    6ed4:	f000 fbf4 	bl	76c0 <strlen>
    6ed8:	4681      	mov	r9, r0
    6eda:	eb07 0e00 	add.w	lr, r7, r0
    6ede:	f1b8 0f00 	cmp.w	r8, #0
    6ee2:	f000 826c 	beq.w	73be <PFLASH_Process+0xc06>
    6ee6:	f8df c2f4 	ldr.w	ip, [pc, #756]	; 71dc <PFLASH_Process+0xa24>
    6eea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    6eee:	f847 0009 	str.w	r0, [r7, r9]
    6ef2:	f8dc 0000 	ldr.w	r0, [ip]
    6ef6:	f8ce 0010 	str.w	r0, [lr, #16]
    6efa:	f8ce 1004 	str.w	r1, [lr, #4]
    6efe:	f8ce 2008 	str.w	r2, [lr, #8]
    6f02:	f8ce 300c 	str.w	r3, [lr, #12]
    6f06:	48ac      	ldr	r0, [pc, #688]	; (71b8 <PFLASH_Process+0xa00>)
    6f08:	f000 fbda 	bl	76c0 <strlen>
    6f0c:	4bac      	ldr	r3, [pc, #688]	; (71c0 <PFLASH_Process+0xa08>)
    6f0e:	183a      	adds	r2, r7, r0
    6f10:	8819      	ldrh	r1, [r3, #0]
    6f12:	5239      	strh	r1, [r7, r0]
    6f14:	789b      	ldrb	r3, [r3, #2]
    6f16:	7093      	strb	r3, [r2, #2]
    6f18:	4420      	add	r0, r4
    6f1a:	2720      	movs	r7, #32
    6f1c:	213d      	movs	r1, #61	; 0x3d
    6f1e:	2200      	movs	r2, #0
    6f20:	2308      	movs	r3, #8
    6f22:	7387      	strb	r7, [r0, #14]
    6f24:	e9c4 1215 	strd	r1, r2, [r4, #84]	; 0x54
    6f28:	7263      	strb	r3, [r4, #9]
    6f2a:	e49e      	b.n	686a <PFLASH_Process+0xb2>
    6f2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6f2e:	2b01      	cmp	r3, #1
    6f30:	f47f ac9b 	bne.w	686a <PFLASH_Process+0xb2>
    6f34:	4fa0      	ldr	r7, [pc, #640]	; (71b8 <PFLASH_Process+0xa00>)
    6f36:	2248      	movs	r2, #72	; 0x48
    6f38:	2120      	movs	r1, #32
    6f3a:	4638      	mov	r0, r7
    6f3c:	f000 fb6e 	bl	761c <memset>
    6f40:	f245 03e4 	movw	r3, #20708	; 0x50e4
    6f44:	4a9f      	ldr	r2, [pc, #636]	; (71c4 <PFLASH_Process+0xa0c>)
    6f46:	6819      	ldr	r1, [r3, #0]
    6f48:	f04f 0800 	mov.w	r8, #0
    6f4c:	200a      	movs	r0, #10
    6f4e:	4291      	cmp	r1, r2
    6f50:	f884 800c 	strb.w	r8, [r4, #12]
    6f54:	7260      	strb	r0, [r4, #9]
    6f56:	f47f ac88 	bne.w	686a <PFLASH_Process+0xb2>
    6f5a:	685a      	ldr	r2, [r3, #4]
    6f5c:	2a00      	cmp	r2, #0
    6f5e:	f43f ac84 	beq.w	686a <PFLASH_Process+0xb2>
    6f62:	68db      	ldr	r3, [r3, #12]
    6f64:	2b00      	cmp	r3, #0
    6f66:	f43f ac80 	beq.w	686a <PFLASH_Process+0xb2>
    6f6a:	4638      	mov	r0, r7
    6f6c:	f000 fba8 	bl	76c0 <strlen>
    6f70:	f8df c26c 	ldr.w	ip, [pc, #620]	; 71e0 <PFLASH_Process+0xa28>
    6f74:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
    6f78:	4686      	mov	lr, r0
    6f7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    6f7e:	eb07 0c0e 	add.w	ip, r7, lr
    6f82:	f847 000e 	str.w	r0, [r7, lr]
    6f86:	44a6      	add	lr, r4
    6f88:	f8cc 1004 	str.w	r1, [ip, #4]
    6f8c:	2020      	movs	r0, #32
    6f8e:	2715      	movs	r7, #21
    6f90:	2109      	movs	r1, #9
    6f92:	f8cc 2008 	str.w	r2, [ip, #8]
    6f96:	f8cc 300c 	str.w	r3, [ip, #12]
    6f9a:	6567      	str	r7, [r4, #84]	; 0x54
    6f9c:	f88e 001c 	strb.w	r0, [lr, #28]
    6fa0:	7261      	strb	r1, [r4, #9]
    6fa2:	e462      	b.n	686a <PFLASH_Process+0xb2>
    6fa4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6fa6:	2b01      	cmp	r3, #1
    6fa8:	f47f ac5f 	bne.w	686a <PFLASH_Process+0xb2>
    6fac:	4f82      	ldr	r7, [pc, #520]	; (71b8 <PFLASH_Process+0xa00>)
    6fae:	2248      	movs	r2, #72	; 0x48
    6fb0:	2120      	movs	r1, #32
    6fb2:	4638      	mov	r0, r7
    6fb4:	f000 fb32 	bl	761c <memset>
    6fb8:	f04f 0800 	mov.w	r8, #0
    6fbc:	4638      	mov	r0, r7
    6fbe:	f884 800c 	strb.w	r8, [r4, #12]
    6fc2:	f000 fb7d 	bl	76c0 <strlen>
    6fc6:	4b80      	ldr	r3, [pc, #512]	; (71c8 <PFLASH_Process+0xa10>)
    6fc8:	881b      	ldrh	r3, [r3, #0]
    6fca:	523b      	strh	r3, [r7, r0]
    6fcc:	f245 03e4 	movw	r3, #20708	; 0x50e4
    6fd0:	2240      	movs	r2, #64	; 0x40
    6fd2:	68d9      	ldr	r1, [r3, #12]
    6fd4:	4638      	mov	r0, r7
    6fd6:	f000 fbe1 	bl	779c <strncat>
    6fda:	4638      	mov	r0, r7
    6fdc:	f000 fb70 	bl	76c0 <strlen>
    6fe0:	4b7a      	ldr	r3, [pc, #488]	; (71cc <PFLASH_Process+0xa14>)
    6fe2:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
    6fe6:	1821      	adds	r1, r4, r0
    6fe8:	881b      	ldrh	r3, [r3, #0]
    6fea:	523b      	strh	r3, [r7, r0]
    6fec:	2247      	movs	r2, #71	; 0x47
    6fee:	2020      	movs	r0, #32
    6ff0:	230a      	movs	r3, #10
    6ff2:	7388      	strb	r0, [r1, #14]
    6ff4:	6562      	str	r2, [r4, #84]	; 0x54
    6ff6:	7263      	strb	r3, [r4, #9]
    6ff8:	e437      	b.n	686a <PFLASH_Process+0xb2>
    6ffa:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6ffc:	2b01      	cmp	r3, #1
    6ffe:	f47f ac34 	bne.w	686a <PFLASH_Process+0xb2>
    7002:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 71b8 <PFLASH_Process+0xa00>
    7006:	f245 07e4 	movw	r7, #20708	; 0x50e4
    700a:	2248      	movs	r2, #72	; 0x48
    700c:	2120      	movs	r1, #32
    700e:	4640      	mov	r0, r8
    7010:	f000 fb04 	bl	761c <memset>
    7014:	683a      	ldr	r2, [r7, #0]
    7016:	4b6b      	ldr	r3, [pc, #428]	; (71c4 <PFLASH_Process+0xa0c>)
    7018:	f04f 0900 	mov.w	r9, #0
    701c:	210c      	movs	r1, #12
    701e:	429a      	cmp	r2, r3
    7020:	f884 900c 	strb.w	r9, [r4, #12]
    7024:	7261      	strb	r1, [r4, #9]
    7026:	f47f ac20 	bne.w	686a <PFLASH_Process+0xb2>
    702a:	687b      	ldr	r3, [r7, #4]
    702c:	2b00      	cmp	r3, #0
    702e:	f43f ac1c 	beq.w	686a <PFLASH_Process+0xb2>
    7032:	693b      	ldr	r3, [r7, #16]
    7034:	2b00      	cmp	r3, #0
    7036:	f43f ac18 	beq.w	686a <PFLASH_Process+0xb2>
    703a:	4640      	mov	r0, r8
    703c:	f000 fb40 	bl	76c0 <strlen>
    7040:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 71e4 <PFLASH_Process+0xa2c>
    7044:	4686      	mov	lr, r0
    7046:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    704a:	eb08 0c0e 	add.w	ip, r8, lr
    704e:	f848 000e 	str.w	r0, [r8, lr]
    7052:	f8cc 1004 	str.w	r1, [ip, #4]
    7056:	f8cc 2008 	str.w	r2, [ip, #8]
    705a:	f8cc 300c 	str.w	r3, [ip, #12]
    705e:	f44f 7180 	mov.w	r1, #256	; 0x100
    7062:	6938      	ldr	r0, [r7, #16]
    7064:	f000 fbc8 	bl	77f8 <strnlen>
    7068:	693b      	ldr	r3, [r7, #16]
    706a:	65e0      	str	r0, [r4, #92]	; 0x5c
    706c:	4640      	mov	r0, r8
    706e:	6623      	str	r3, [r4, #96]	; 0x60
    7070:	f000 fb26 	bl	76c0 <strlen>
    7074:	4420      	add	r0, r4
    7076:	2120      	movs	r1, #32
    7078:	2210      	movs	r2, #16
    707a:	230b      	movs	r3, #11
    707c:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
    7080:	7301      	strb	r1, [r0, #12]
    7082:	6562      	str	r2, [r4, #84]	; 0x54
    7084:	7263      	strb	r3, [r4, #9]
    7086:	f7ff bbf0 	b.w	686a <PFLASH_Process+0xb2>
    708a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    708c:	2b01      	cmp	r3, #1
    708e:	f47f abec 	bne.w	686a <PFLASH_Process+0xb2>
    7092:	4f49      	ldr	r7, [pc, #292]	; (71b8 <PFLASH_Process+0xa00>)
    7094:	2248      	movs	r2, #72	; 0x48
    7096:	4638      	mov	r0, r7
    7098:	2120      	movs	r1, #32
    709a:	f000 fabf 	bl	761c <memset>
    709e:	e9d4 8917 	ldrd	r8, r9, [r4, #92]	; 0x5c
    70a2:	f04f 0a00 	mov.w	sl, #0
    70a6:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
    70aa:	f884 a00c 	strb.w	sl, [r4, #12]
    70ae:	f240 817e 	bls.w	73ae <PFLASH_Process+0xbf6>
    70b2:	2228      	movs	r2, #40	; 0x28
    70b4:	4649      	mov	r1, r9
    70b6:	4638      	mov	r0, r7
    70b8:	f000 fb70 	bl	779c <strncat>
    70bc:	f1a8 0328 	sub.w	r3, r8, #40	; 0x28
    70c0:	f109 0228 	add.w	r2, r9, #40	; 0x28
    70c4:	2029      	movs	r0, #41	; 0x29
    70c6:	210b      	movs	r1, #11
    70c8:	e9c4 3217 	strd	r3, r2, [r4, #92]	; 0x5c
    70cc:	e9c4 0a15 	strd	r0, sl, [r4, #84]	; 0x54
    70d0:	7261      	strb	r1, [r4, #9]
    70d2:	2b00      	cmp	r3, #0
    70d4:	f47f abc9 	bne.w	686a <PFLASH_Process+0xb2>
    70d8:	4837      	ldr	r0, [pc, #220]	; (71b8 <PFLASH_Process+0xa00>)
    70da:	f000 faf1 	bl	76c0 <strlen>
    70de:	4b3b      	ldr	r3, [pc, #236]	; (71cc <PFLASH_Process+0xa14>)
    70e0:	183a      	adds	r2, r7, r0
    70e2:	8819      	ldrh	r1, [r3, #0]
    70e4:	5239      	strh	r1, [r7, r0]
    70e6:	789b      	ldrb	r3, [r3, #2]
    70e8:	7093      	strb	r3, [r2, #2]
    70ea:	4420      	add	r0, r4
    70ec:	2720      	movs	r7, #32
    70ee:	212e      	movs	r1, #46	; 0x2e
    70f0:	2200      	movs	r2, #0
    70f2:	230c      	movs	r3, #12
    70f4:	7387      	strb	r7, [r0, #14]
    70f6:	e9c4 1215 	strd	r1, r2, [r4, #84]	; 0x54
    70fa:	7263      	strb	r3, [r4, #9]
    70fc:	f7ff bbb5 	b.w	686a <PFLASH_Process+0xb2>
    7100:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7102:	2b01      	cmp	r3, #1
    7104:	f47f abb1 	bne.w	686a <PFLASH_Process+0xb2>
    7108:	4f2b      	ldr	r7, [pc, #172]	; (71b8 <PFLASH_Process+0xa00>)
    710a:	2248      	movs	r2, #72	; 0x48
    710c:	4638      	mov	r0, r7
    710e:	2120      	movs	r1, #32
    7110:	f000 fa84 	bl	761c <memset>
    7114:	4638      	mov	r0, r7
    7116:	2300      	movs	r3, #0
    7118:	7323      	strb	r3, [r4, #12]
    711a:	f000 fad1 	bl	76c0 <strlen>
    711e:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 71e8 <PFLASH_Process+0xa30>
    7122:	4680      	mov	r8, r0
    7124:	4407      	add	r7, r0
    7126:	f10e 0920 	add.w	r9, lr, #32
    712a:	46f4      	mov	ip, lr
    712c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    7130:	45cc      	cmp	ip, r9
    7132:	6038      	str	r0, [r7, #0]
    7134:	6079      	str	r1, [r7, #4]
    7136:	60ba      	str	r2, [r7, #8]
    7138:	60fb      	str	r3, [r7, #12]
    713a:	46e6      	mov	lr, ip
    713c:	f107 0710 	add.w	r7, r7, #16
    7140:	d1f3      	bne.n	712a <PFLASH_Process+0x972>
    7142:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
    7146:	44a0      	add	r8, r4
    7148:	f8be 3000 	ldrh.w	r3, [lr]
    714c:	81bb      	strh	r3, [r7, #12]
    714e:	6038      	str	r0, [r7, #0]
    7150:	f04f 0e20 	mov.w	lr, #32
    7154:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
    7158:	2000      	movs	r0, #0
    715a:	230d      	movs	r3, #13
    715c:	6079      	str	r1, [r7, #4]
    715e:	60ba      	str	r2, [r7, #8]
    7160:	f888 e039 	strb.w	lr, [r8, #57]	; 0x39
    7164:	e9c4 c015 	strd	ip, r0, [r4, #84]	; 0x54
    7168:	7263      	strb	r3, [r4, #9]
    716a:	f7ff bb7e 	b.w	686a <PFLASH_Process+0xb2>
    716e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7170:	2b01      	cmp	r3, #1
    7172:	f47f ab7a 	bne.w	686a <PFLASH_Process+0xb2>
    7176:	4f10      	ldr	r7, [pc, #64]	; (71b8 <PFLASH_Process+0xa00>)
    7178:	2226      	movs	r2, #38	; 0x26
    717a:	f107 0022 	add.w	r0, r7, #34	; 0x22
    717e:	2120      	movs	r1, #32
    7180:	f000 fa4c 	bl	761c <memset>
    7184:	4b12      	ldr	r3, [pc, #72]	; (71d0 <PFLASH_Process+0xa18>)
    7186:	f8df c064 	ldr.w	ip, [pc, #100]	; 71ec <PFLASH_Process+0xa34>
    718a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    718c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    7190:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
    7194:	3710      	adds	r7, #16
    7196:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    719a:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
    719e:	2120      	movs	r1, #32
    71a0:	2024      	movs	r0, #36	; 0x24
    71a2:	2200      	movs	r2, #0
    71a4:	230e      	movs	r3, #14
    71a6:	f8a4 c02c 	strh.w	ip, [r4, #44]	; 0x2c
    71aa:	6560      	str	r0, [r4, #84]	; 0x54
    71ac:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    71b0:	65a2      	str	r2, [r4, #88]	; 0x58
    71b2:	7263      	strb	r3, [r4, #9]
    71b4:	f7ff bb59 	b.w	686a <PFLASH_Process+0xb2>
    71b8:	1000067c 	.word	0x1000067c
    71bc:	00007c9c 	.word	0x00007c9c
    71c0:	00007c88 	.word	0x00007c88
    71c4:	55aa5aa5 	.word	0x55aa5aa5
    71c8:	00007c44 	.word	0x00007c44
    71cc:	00007c48 	.word	0x00007c48
    71d0:	00007d54 	.word	0x00007d54
    71d4:	87654321 	.word	0x87654321
    71d8:	00007cc4 	.word	0x00007cc4
    71dc:	00007cd8 	.word	0x00007cd8
    71e0:	00007d00 	.word	0x00007d00
    71e4:	00007d14 	.word	0x00007d14
    71e8:	00007d24 	.word	0x00007d24
    71ec:	00007d68 	.word	0x00007d68
    71f0:	1e72      	subs	r2, r6, #1
    71f2:	1ad3      	subs	r3, r2, r3
    71f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
    71f6:	429a      	cmp	r2, r3
    71f8:	f63f ab40 	bhi.w	687c <PFLASH_Process+0xc4>
    71fc:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
    7200:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    7204:	6d62      	ldr	r2, [r4, #84]	; 0x54
    7206:	f88d 108a 	strb.w	r1, [sp, #138]	; 0x8a
    720a:	2108      	movs	r1, #8
    720c:	f361 1307 	bfi	r3, r1, #4, #4
    7210:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    7214:	f240 77e7 	movw	r7, #2023	; 0x7e7
    7218:	2000      	movs	r0, #0
    721a:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
    721e:	217f      	movs	r1, #127	; 0x7f
    7220:	23ff      	movs	r3, #255	; 0xff
    7222:	2a05      	cmp	r2, #5
    7224:	f8ad c076 	strh.w	ip, [sp, #118]	; 0x76
    7228:	9721      	str	r7, [sp, #132]	; 0x84
    722a:	f8ad 0082 	strh.w	r0, [sp, #130]	; 0x82
    722e:	f88d 1088 	strb.w	r1, [sp, #136]	; 0x88
    7232:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
    7236:	d81c      	bhi.n	7272 <PFLASH_Process+0xaba>
    7238:	f47f ab20 	bne.w	687c <PFLASH_Process+0xc4>
    723c:	4a97      	ldr	r2, [pc, #604]	; (749c <PFLASH_Process+0xce4>)
    723e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7240:	f88d 308a 	strb.w	r3, [sp, #138]	; 0x8a
    7244:	1853      	adds	r3, r2, r1
    7246:	a81d      	add	r0, sp, #116	; 0x74
    7248:	681a      	ldr	r2, [r3, #0]
    724a:	791b      	ldrb	r3, [r3, #4]
    724c:	f8cd 208b 	str.w	r2, [sp, #139]	; 0x8b
    7250:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    7254:	f7ff faac 	bl	67b0 <PFLASH_UserWrite>
    7258:	4605      	mov	r5, r0
    725a:	2800      	cmp	r0, #0
    725c:	f47f ab0e 	bne.w	687c <PFLASH_Process+0xc4>
    7260:	66e6      	str	r6, [r4, #108]	; 0x6c
    7262:	7260      	strb	r0, [r4, #9]
    7264:	f7ff bb0a 	b.w	687c <PFLASH_Process+0xc4>
    7268:	2a00      	cmp	r2, #0
    726a:	f43f ab07 	beq.w	687c <PFLASH_Process+0xc4>
    726e:	f7ff bafc 	b.w	686a <PFLASH_Process+0xb2>
    7272:	6da2      	ldr	r2, [r4, #88]	; 0x58
    7274:	4b89      	ldr	r3, [pc, #548]	; (749c <PFLASH_Process+0xce4>)
    7276:	4413      	add	r3, r2
    7278:	a81d      	add	r0, sp, #116	; 0x74
    727a:	681a      	ldr	r2, [r3, #0]
    727c:	791b      	ldrb	r3, [r3, #4]
    727e:	f8cd 208b 	str.w	r2, [sp, #139]	; 0x8b
    7282:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    7286:	f7ff fa93 	bl	67b0 <PFLASH_UserWrite>
    728a:	4605      	mov	r5, r0
    728c:	2800      	cmp	r0, #0
    728e:	f47f aaf5 	bne.w	687c <PFLASH_Process+0xc4>
    7292:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    7296:	66e6      	str	r6, [r4, #108]	; 0x6c
    7298:	e9d4 1215 	ldrd	r1, r2, [r4, #84]	; 0x54
    729c:	3301      	adds	r3, #1
    729e:	b2db      	uxtb	r3, r3
    72a0:	2bff      	cmp	r3, #255	; 0xff
    72a2:	f1a1 0105 	sub.w	r1, r1, #5
    72a6:	f102 0205 	add.w	r2, r2, #5
    72aa:	bf08      	it	eq
    72ac:	2301      	moveq	r3, #1
    72ae:	e9c4 1215 	strd	r1, r2, [r4, #84]	; 0x54
    72b2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    72b6:	f7ff bae1 	b.w	687c <PFLASH_Process+0xc4>
    72ba:	4b79      	ldr	r3, [pc, #484]	; (74a0 <PFLASH_Process+0xce8>)
    72bc:	4a79      	ldr	r2, [pc, #484]	; (74a4 <PFLASH_Process+0xcec>)
    72be:	fba3 e000 	umull	lr, r0, r3, r0
    72c2:	44a4      	add	ip, r4
    72c4:	0940      	lsrs	r0, r0, #5
    72c6:	3030      	adds	r0, #48	; 0x30
    72c8:	f88c 000c 	strb.w	r0, [ip, #12]
    72cc:	7808      	ldrb	r0, [r1, #0]
    72ce:	fba3 c300 	umull	ip, r3, r3, r0
    72d2:	095b      	lsrs	r3, r3, #5
    72d4:	f04f 0c64 	mov.w	ip, #100	; 0x64
    72d8:	fb0c 0313 	mls	r3, ip, r3, r0
    72dc:	b2db      	uxtb	r3, r3
    72de:	fba2 0303 	umull	r0, r3, r2, r3
    72e2:	08db      	lsrs	r3, r3, #3
    72e4:	3330      	adds	r3, #48	; 0x30
    72e6:	707b      	strb	r3, [r7, #1]
    72e8:	780b      	ldrb	r3, [r1, #0]
    72ea:	fba2 1203 	umull	r1, r2, r2, r3
    72ee:	08d2      	lsrs	r2, r2, #3
    72f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    72f4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
    72f8:	3230      	adds	r2, #48	; 0x30
    72fa:	70ba      	strb	r2, [r7, #2]
    72fc:	3703      	adds	r7, #3
    72fe:	f7ff bb25 	b.w	694c <PFLASH_Process+0x194>
    7302:	2f09      	cmp	r7, #9
    7304:	d92e      	bls.n	7364 <PFLASH_Process+0xbac>
    7306:	4967      	ldr	r1, [pc, #412]	; (74a4 <PFLASH_Process+0xcec>)
    7308:	fba1 7207 	umull	r7, r2, r1, r7
    730c:	08d2      	lsrs	r2, r2, #3
    730e:	3230      	adds	r2, #48	; 0x30
    7310:	705a      	strb	r2, [r3, #1]
    7312:	7880      	ldrb	r0, [r0, #2]
    7314:	fba1 2100 	umull	r2, r1, r1, r0
    7318:	08ca      	lsrs	r2, r1, #3
    731a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    731e:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
    7322:	3230      	adds	r2, #48	; 0x30
    7324:	709a      	strb	r2, [r3, #2]
    7326:	3303      	adds	r3, #3
    7328:	f7ff bb60 	b.w	69ec <PFLASH_Process+0x234>
    732c:	2809      	cmp	r0, #9
    732e:	d91e      	bls.n	736e <PFLASH_Process+0xbb6>
    7330:	4a5c      	ldr	r2, [pc, #368]	; (74a4 <PFLASH_Process+0xcec>)
    7332:	fba2 0300 	umull	r0, r3, r2, r0
    7336:	08db      	lsrs	r3, r3, #3
    7338:	3330      	adds	r3, #48	; 0x30
    733a:	707b      	strb	r3, [r7, #1]
    733c:	7849      	ldrb	r1, [r1, #1]
    733e:	fba2 3201 	umull	r3, r2, r2, r1
    7342:	08d3      	lsrs	r3, r2, #3
    7344:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7348:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
    734c:	3330      	adds	r3, #48	; 0x30
    734e:	70bb      	strb	r3, [r7, #2]
    7350:	1cfb      	adds	r3, r7, #3
    7352:	f7ff bb23 	b.w	699c <PFLASH_Process+0x1e4>
    7356:	44a4      	add	ip, r4
    7358:	3030      	adds	r0, #48	; 0x30
    735a:	f88c 000c 	strb.w	r0, [ip, #12]
    735e:	3701      	adds	r7, #1
    7360:	f7ff baf4 	b.w	694c <PFLASH_Process+0x194>
    7364:	3730      	adds	r7, #48	; 0x30
    7366:	705f      	strb	r7, [r3, #1]
    7368:	3302      	adds	r3, #2
    736a:	f7ff bb3f 	b.w	69ec <PFLASH_Process+0x234>
    736e:	3030      	adds	r0, #48	; 0x30
    7370:	7078      	strb	r0, [r7, #1]
    7372:	1cbb      	adds	r3, r7, #2
    7374:	f7ff bb12 	b.w	699c <PFLASH_Process+0x1e4>
    7378:	4f48      	ldr	r7, [pc, #288]	; (749c <PFLASH_Process+0xce4>)
    737a:	2248      	movs	r2, #72	; 0x48
    737c:	2120      	movs	r1, #32
    737e:	4638      	mov	r0, r7
    7380:	f000 f94c 	bl	761c <memset>
    7384:	f04f 0800 	mov.w	r8, #0
    7388:	4638      	mov	r0, r7
    738a:	f884 800c 	strb.w	r8, [r4, #12]
    738e:	f000 f997 	bl	76c0 <strlen>
    7392:	4b45      	ldr	r3, [pc, #276]	; (74a8 <PFLASH_Process+0xcf0>)
    7394:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
    7398:	1821      	adds	r1, r4, r0
    739a:	881b      	ldrh	r3, [r3, #0]
    739c:	523b      	strh	r3, [r7, r0]
    739e:	2205      	movs	r2, #5
    73a0:	2020      	movs	r0, #32
    73a2:	230f      	movs	r3, #15
    73a4:	7348      	strb	r0, [r1, #13]
    73a6:	6562      	str	r2, [r4, #84]	; 0x54
    73a8:	7263      	strb	r3, [r4, #9]
    73aa:	f7ff ba5e 	b.w	686a <PFLASH_Process+0xb2>
    73ae:	4642      	mov	r2, r8
    73b0:	4649      	mov	r1, r9
    73b2:	4638      	mov	r0, r7
    73b4:	f000 f9f2 	bl	779c <strncat>
    73b8:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
    73bc:	e68c      	b.n	70d8 <PFLASH_Process+0x920>
    73be:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 74b4 <PFLASH_Process+0xcfc>
    73c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    73c6:	f8bc 8000 	ldrh.w	r8, [ip]
    73ca:	f89c c002 	ldrb.w	ip, [ip, #2]
    73ce:	f847 0009 	str.w	r0, [r7, r9]
    73d2:	f8ce 1004 	str.w	r1, [lr, #4]
    73d6:	f8ce 2008 	str.w	r2, [lr, #8]
    73da:	f8ce 300c 	str.w	r3, [lr, #12]
    73de:	f8ae 8010 	strh.w	r8, [lr, #16]
    73e2:	f88e c012 	strb.w	ip, [lr, #18]
    73e6:	e58e      	b.n	6f06 <PFLASH_Process+0x74e>
    73e8:	2a09      	cmp	r2, #9
    73ea:	d945      	bls.n	7478 <PFLASH_Process+0xcc0>
    73ec:	492d      	ldr	r1, [pc, #180]	; (74a4 <PFLASH_Process+0xcec>)
    73ee:	fba1 c102 	umull	ip, r1, r1, r2
    73f2:	08c9      	lsrs	r1, r1, #3
    73f4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
    73f8:	4423      	add	r3, r4
    73fa:	eba2 024c 	sub.w	r2, r2, ip, lsl #1
    73fe:	3130      	adds	r1, #48	; 0x30
    7400:	3230      	adds	r2, #48	; 0x30
    7402:	7319      	strb	r1, [r3, #12]
    7404:	1c83      	adds	r3, r0, #2
    7406:	7042      	strb	r2, [r0, #1]
    7408:	e434      	b.n	6c74 <PFLASH_Process+0x4bc>
    740a:	f04f 0800 	mov.w	r8, #0
    740e:	e530      	b.n	6e72 <PFLASH_Process+0x6ba>
    7410:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 74b8 <PFLASH_Process+0xd00>
    7414:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7418:	f10c 0c0e 	add.w	ip, ip, #14
    741c:	eb07 090c 	add.w	r9, r7, ip
    7420:	f847 000c 	str.w	r0, [r7, ip]
    7424:	f89e c004 	ldrb.w	ip, [lr, #4]
    7428:	f8de 0000 	ldr.w	r0, [lr]
    742c:	f8c9 1004 	str.w	r1, [r9, #4]
    7430:	f8c9 2008 	str.w	r2, [r9, #8]
    7434:	f8c9 300c 	str.w	r3, [r9, #12]
    7438:	f8c9 0010 	str.w	r0, [r9, #16]
    743c:	f889 c014 	strb.w	ip, [r9, #20]
    7440:	e547      	b.n	6ed2 <PFLASH_Process+0x71a>
    7442:	f000 f93d 	bl	76c0 <strlen>
    7446:	4a19      	ldr	r2, [pc, #100]	; (74ac <PFLASH_Process+0xcf4>)
    7448:	4603      	mov	r3, r0
    744a:	6810      	ldr	r0, [r2, #0]
    744c:	50f8      	str	r0, [r7, r3]
    744e:	f7ff bbb4 	b.w	6bba <PFLASH_Process+0x402>
    7452:	f1b8 0f09 	cmp.w	r8, #9
    7456:	d91a      	bls.n	748e <PFLASH_Process+0xcd6>
    7458:	4b12      	ldr	r3, [pc, #72]	; (74a4 <PFLASH_Process+0xcec>)
    745a:	fba3 0308 	umull	r0, r3, r3, r8
    745e:	08db      	lsrs	r3, r3, #3
    7460:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    7464:	4422      	add	r2, r4
    7466:	eba8 0040 	sub.w	r0, r8, r0, lsl #1
    746a:	3330      	adds	r3, #48	; 0x30
    746c:	3030      	adds	r0, #48	; 0x30
    746e:	7313      	strb	r3, [r2, #12]
    7470:	1c8a      	adds	r2, r1, #2
    7472:	7048      	strb	r0, [r1, #1]
    7474:	f7ff bb9f 	b.w	6bb6 <PFLASH_Process+0x3fe>
    7478:	4423      	add	r3, r4
    747a:	3130      	adds	r1, #48	; 0x30
    747c:	7319      	strb	r1, [r3, #12]
    747e:	1c43      	adds	r3, r0, #1
    7480:	f7ff bbf8 	b.w	6c74 <PFLASH_Process+0x4bc>
    7484:	4b0a      	ldr	r3, [pc, #40]	; (74b0 <PFLASH_Process+0xcf8>)
    7486:	6818      	ldr	r0, [r3, #0]
    7488:	50b8      	str	r0, [r7, r2]
    748a:	f7ff bb96 	b.w	6bba <PFLASH_Process+0x402>
    748e:	4422      	add	r2, r4
    7490:	f108 0330 	add.w	r3, r8, #48	; 0x30
    7494:	7313      	strb	r3, [r2, #12]
    7496:	1c4a      	adds	r2, r1, #1
    7498:	f7ff bb8d 	b.w	6bb6 <PFLASH_Process+0x3fe>
    749c:	1000067c 	.word	0x1000067c
    74a0:	51eb851f 	.word	0x51eb851f
    74a4:	cccccccd 	.word	0xcccccccd
    74a8:	00007d7c 	.word	0x00007d7c
    74ac:	00007c5c 	.word	0x00007c5c
    74b0:	00007c60 	.word	0x00007c60
    74b4:	00007cec 	.word	0x00007cec
    74b8:	00007cac 	.word	0x00007cac

000074bc <PFLASH_MsgInput>:
    74bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74be:	7d06      	ldrb	r6, [r0, #20]
    74c0:	4d2e      	ldr	r5, [pc, #184]	; (757c <PFLASH_MsgInput+0xc0>)
    74c2:	f006 04f0 	and.w	r4, r6, #240	; 0xf0
    74c6:	2c30      	cmp	r4, #48	; 0x30
    74c8:	4603      	mov	r3, r0
    74ca:	7229      	strb	r1, [r5, #8]
    74cc:	d008      	beq.n	74e0 <PFLASH_MsgInput+0x24>
    74ce:	2c70      	cmp	r4, #112	; 0x70
    74d0:	d104      	bne.n	74dc <PFLASH_MsgInput+0x20>
    74d2:	8b84      	ldrh	r4, [r0, #28]
    74d4:	f64f 777f 	movw	r7, #65407	; 0xff7f
    74d8:	42bc      	cmp	r4, r7
    74da:	d011      	beq.n	7500 <PFLASH_MsgInput+0x44>
    74dc:	2000      	movs	r0, #0
    74de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    74e0:	69c3      	ldr	r3, [r0, #28]
    74e2:	4a27      	ldr	r2, [pc, #156]	; (7580 <PFLASH_MsgInput+0xc4>)
    74e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    74e8:	4293      	cmp	r3, r2
    74ea:	d1f7      	bne.n	74dc <PFLASH_MsgInput+0x20>
    74ec:	f245 03e4 	movw	r3, #20708	; 0x50e4
    74f0:	4a24      	ldr	r2, [pc, #144]	; (7584 <PFLASH_MsgInput+0xc8>)
    74f2:	6819      	ldr	r1, [r3, #0]
    74f4:	4291      	cmp	r1, r2
    74f6:	d01c      	beq.n	7532 <PFLASH_MsgInput+0x76>
    74f8:	2000      	movs	r0, #0
    74fa:	7268      	strb	r0, [r5, #9]
    74fc:	6668      	str	r0, [r5, #100]	; 0x64
    74fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7500:	7f87      	ldrb	r7, [r0, #30]
    7502:	428f      	cmp	r7, r1
    7504:	d1ea      	bne.n	74dc <PFLASH_MsgInput+0x20>
    7506:	7fc1      	ldrb	r1, [r0, #31]
    7508:	2907      	cmp	r1, #7
    750a:	d01c      	beq.n	7546 <PFLASH_MsgInput+0x8a>
    750c:	b319      	cbz	r1, 7556 <PFLASH_MsgInput+0x9a>
    750e:	2913      	cmp	r1, #19
    7510:	d1e4      	bne.n	74dc <PFLASH_MsgInput+0x20>
    7512:	7a69      	ldrb	r1, [r5, #9]
    7514:	2900      	cmp	r1, #0
    7516:	d1e1      	bne.n	74dc <PFLASH_MsgInput+0x20>
    7518:	2001      	movs	r0, #1
    751a:	f885 1068 	strb.w	r1, [r5, #104]	; 0x68
    751e:	65a9      	str	r1, [r5, #88]	; 0x58
    7520:	7268      	strb	r0, [r5, #9]
    7522:	b332      	cbz	r2, 7572 <PFLASH_MsgInput+0xb6>
    7524:	666a      	str	r2, [r5, #100]	; 0x64
    7526:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    752a:	2000      	movs	r0, #0
    752c:	689b      	ldr	r3, [r3, #8]
    752e:	66eb      	str	r3, [r5, #108]	; 0x6c
    7530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7532:	685b      	ldr	r3, [r3, #4]
    7534:	2b00      	cmp	r3, #0
    7536:	d0df      	beq.n	74f8 <PFLASH_MsgInput+0x3c>
    7538:	2201      	movs	r2, #1
    753a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    753e:	702a      	strb	r2, [r5, #0]
    7540:	689b      	ldr	r3, [r3, #8]
    7542:	606b      	str	r3, [r5, #4]
    7544:	e7d8      	b.n	74f8 <PFLASH_MsgInput+0x3c>
    7546:	f890 3020 	ldrb.w	r3, [r0, #32]
    754a:	2b55      	cmp	r3, #85	; 0x55
    754c:	d1c6      	bne.n	74dc <PFLASH_MsgInput+0x20>
    754e:	f7ff f931 	bl	67b4 <PFLASH_UserInvokeBootloader>
    7552:	2000      	movs	r0, #0
    7554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7556:	2206      	movs	r2, #6
    7558:	f362 1607 	bfi	r6, r2, #4, #4
    755c:	22fa      	movs	r2, #250	; 0xfa
    755e:	8384      	strh	r4, [r0, #28]
    7560:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    7564:	7506      	strb	r6, [r0, #20]
    7566:	77c2      	strb	r2, [r0, #31]
    7568:	f880 2020 	strb.w	r2, [r0, #32]
    756c:	f7ff f920 	bl	67b0 <PFLASH_UserWrite>
    7570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7572:	8c1b      	ldrh	r3, [r3, #32]
    7574:	ba5b      	rev16	r3, r3
    7576:	b29b      	uxth	r3, r3
    7578:	666b      	str	r3, [r5, #100]	; 0x64
    757a:	e7d4      	b.n	7526 <PFLASH_MsgInput+0x6a>
    757c:	10000670 	.word	0x10000670
    7580:	00060080 	.word	0x00060080
    7584:	55aa5aa5 	.word	0x55aa5aa5

00007588 <PFLASH_Startup>:
    7588:	4b02      	ldr	r3, [pc, #8]	; (7594 <PFLASH_Startup+0xc>)
    758a:	2200      	movs	r2, #0
    758c:	701a      	strb	r2, [r3, #0]
    758e:	725a      	strb	r2, [r3, #9]
    7590:	4770      	bx	lr
    7592:	bf00      	nop
    7594:	10000670 	.word	0x10000670

00007598 <SYSTIME_Wait>:
    7598:	b158      	cbz	r0, 75b2 <SYSTIME_Wait+0x1a>
    759a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    759e:	4619      	mov	r1, r3
    75a0:	689a      	ldr	r2, [r3, #8]
    75a2:	688b      	ldr	r3, [r1, #8]
    75a4:	429a      	cmp	r2, r3
    75a6:	bf88      	it	hi
    75a8:	f103 33ff 	addhi.w	r3, r3, #4294967295
    75ac:	1a9b      	subs	r3, r3, r2
    75ae:	4283      	cmp	r3, r0
    75b0:	d3f7      	bcc.n	75a2 <SYSTIME_Wait+0xa>
    75b2:	4770      	bx	lr

000075b4 <exit>:
    75b4:	b508      	push	{r3, lr}
    75b6:	2100      	movs	r1, #0
    75b8:	4604      	mov	r4, r0
    75ba:	f000 f947 	bl	784c <__call_exitprocs>
    75be:	4b04      	ldr	r3, [pc, #16]	; (75d0 <exit+0x1c>)
    75c0:	6818      	ldr	r0, [r3, #0]
    75c2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    75c4:	b103      	cbz	r3, 75c8 <exit+0x14>
    75c6:	4798      	blx	r3
    75c8:	4620      	mov	r0, r4
    75ca:	f000 fa47 	bl	7a5c <_exit>
    75ce:	bf00      	nop
    75d0:	00007d80 	.word	0x00007d80

000075d4 <__libc_init_array>:
    75d4:	b570      	push	{r4, r5, r6, lr}
    75d6:	4e0d      	ldr	r6, [pc, #52]	; (760c <__libc_init_array+0x38>)
    75d8:	4d0d      	ldr	r5, [pc, #52]	; (7610 <__libc_init_array+0x3c>)
    75da:	1b76      	subs	r6, r6, r5
    75dc:	10b6      	asrs	r6, r6, #2
    75de:	d006      	beq.n	75ee <__libc_init_array+0x1a>
    75e0:	2400      	movs	r4, #0
    75e2:	3401      	adds	r4, #1
    75e4:	f855 3b04 	ldr.w	r3, [r5], #4
    75e8:	4798      	blx	r3
    75ea:	42a6      	cmp	r6, r4
    75ec:	d1f9      	bne.n	75e2 <__libc_init_array+0xe>
    75ee:	4e09      	ldr	r6, [pc, #36]	; (7614 <__libc_init_array+0x40>)
    75f0:	4d09      	ldr	r5, [pc, #36]	; (7618 <__libc_init_array+0x44>)
    75f2:	1b76      	subs	r6, r6, r5
    75f4:	f000 fa34 	bl	7a60 <_init>
    75f8:	10b6      	asrs	r6, r6, #2
    75fa:	d006      	beq.n	760a <__libc_init_array+0x36>
    75fc:	2400      	movs	r4, #0
    75fe:	3401      	adds	r4, #1
    7600:	f855 3b04 	ldr.w	r3, [r5], #4
    7604:	4798      	blx	r3
    7606:	42a6      	cmp	r6, r4
    7608:	d1f9      	bne.n	75fe <__libc_init_array+0x2a>
    760a:	bd70      	pop	{r4, r5, r6, pc}
    760c:	10000444 	.word	0x10000444
    7610:	10000444 	.word	0x10000444
    7614:	1000044c 	.word	0x1000044c
    7618:	10000444 	.word	0x10000444

0000761c <memset>:
    761c:	b4f0      	push	{r4, r5, r6, r7}
    761e:	0786      	lsls	r6, r0, #30
    7620:	d043      	beq.n	76aa <memset+0x8e>
    7622:	1e54      	subs	r4, r2, #1
    7624:	2a00      	cmp	r2, #0
    7626:	d03e      	beq.n	76a6 <memset+0x8a>
    7628:	b2ca      	uxtb	r2, r1
    762a:	4603      	mov	r3, r0
    762c:	e002      	b.n	7634 <memset+0x18>
    762e:	f114 34ff 	adds.w	r4, r4, #4294967295
    7632:	d338      	bcc.n	76a6 <memset+0x8a>
    7634:	f803 2b01 	strb.w	r2, [r3], #1
    7638:	079d      	lsls	r5, r3, #30
    763a:	d1f8      	bne.n	762e <memset+0x12>
    763c:	2c03      	cmp	r4, #3
    763e:	d92b      	bls.n	7698 <memset+0x7c>
    7640:	b2cd      	uxtb	r5, r1
    7642:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    7646:	2c0f      	cmp	r4, #15
    7648:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    764c:	d916      	bls.n	767c <memset+0x60>
    764e:	f1a4 0710 	sub.w	r7, r4, #16
    7652:	093f      	lsrs	r7, r7, #4
    7654:	f103 0620 	add.w	r6, r3, #32
    7658:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    765c:	f103 0210 	add.w	r2, r3, #16
    7660:	e942 5504 	strd	r5, r5, [r2, #-16]
    7664:	e942 5502 	strd	r5, r5, [r2, #-8]
    7668:	3210      	adds	r2, #16
    766a:	42b2      	cmp	r2, r6
    766c:	d1f8      	bne.n	7660 <memset+0x44>
    766e:	f004 040f 	and.w	r4, r4, #15
    7672:	3701      	adds	r7, #1
    7674:	2c03      	cmp	r4, #3
    7676:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    767a:	d90d      	bls.n	7698 <memset+0x7c>
    767c:	461e      	mov	r6, r3
    767e:	4622      	mov	r2, r4
    7680:	3a04      	subs	r2, #4
    7682:	2a03      	cmp	r2, #3
    7684:	f846 5b04 	str.w	r5, [r6], #4
    7688:	d8fa      	bhi.n	7680 <memset+0x64>
    768a:	1f22      	subs	r2, r4, #4
    768c:	f022 0203 	bic.w	r2, r2, #3
    7690:	3204      	adds	r2, #4
    7692:	4413      	add	r3, r2
    7694:	f004 0403 	and.w	r4, r4, #3
    7698:	b12c      	cbz	r4, 76a6 <memset+0x8a>
    769a:	b2c9      	uxtb	r1, r1
    769c:	441c      	add	r4, r3
    769e:	f803 1b01 	strb.w	r1, [r3], #1
    76a2:	429c      	cmp	r4, r3
    76a4:	d1fb      	bne.n	769e <memset+0x82>
    76a6:	bcf0      	pop	{r4, r5, r6, r7}
    76a8:	4770      	bx	lr
    76aa:	4614      	mov	r4, r2
    76ac:	4603      	mov	r3, r0
    76ae:	e7c5      	b.n	763c <memset+0x20>
	...

000076c0 <strlen>:
    76c0:	f890 f000 	pld	[r0]
    76c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    76c8:	f020 0107 	bic.w	r1, r0, #7
    76cc:	f06f 0c00 	mvn.w	ip, #0
    76d0:	f010 0407 	ands.w	r4, r0, #7
    76d4:	f891 f020 	pld	[r1, #32]
    76d8:	f040 8049 	bne.w	776e <strlen+0xae>
    76dc:	f04f 0400 	mov.w	r4, #0
    76e0:	f06f 0007 	mvn.w	r0, #7
    76e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    76e8:	f891 f040 	pld	[r1, #64]	; 0x40
    76ec:	f100 0008 	add.w	r0, r0, #8
    76f0:	fa82 f24c 	uadd8	r2, r2, ip
    76f4:	faa4 f28c 	sel	r2, r4, ip
    76f8:	fa83 f34c 	uadd8	r3, r3, ip
    76fc:	faa2 f38c 	sel	r3, r2, ip
    7700:	bb4b      	cbnz	r3, 7756 <strlen+0x96>
    7702:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    7706:	fa82 f24c 	uadd8	r2, r2, ip
    770a:	f100 0008 	add.w	r0, r0, #8
    770e:	faa4 f28c 	sel	r2, r4, ip
    7712:	fa83 f34c 	uadd8	r3, r3, ip
    7716:	faa2 f38c 	sel	r3, r2, ip
    771a:	b9e3      	cbnz	r3, 7756 <strlen+0x96>
    771c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    7720:	fa82 f24c 	uadd8	r2, r2, ip
    7724:	f100 0008 	add.w	r0, r0, #8
    7728:	faa4 f28c 	sel	r2, r4, ip
    772c:	fa83 f34c 	uadd8	r3, r3, ip
    7730:	faa2 f38c 	sel	r3, r2, ip
    7734:	b97b      	cbnz	r3, 7756 <strlen+0x96>
    7736:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    773a:	f101 0120 	add.w	r1, r1, #32
    773e:	fa82 f24c 	uadd8	r2, r2, ip
    7742:	f100 0008 	add.w	r0, r0, #8
    7746:	faa4 f28c 	sel	r2, r4, ip
    774a:	fa83 f34c 	uadd8	r3, r3, ip
    774e:	faa2 f38c 	sel	r3, r2, ip
    7752:	2b00      	cmp	r3, #0
    7754:	d0c6      	beq.n	76e4 <strlen+0x24>
    7756:	2a00      	cmp	r2, #0
    7758:	bf04      	itt	eq
    775a:	3004      	addeq	r0, #4
    775c:	461a      	moveq	r2, r3
    775e:	ba12      	rev	r2, r2
    7760:	fab2 f282 	clz	r2, r2
    7764:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    7768:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    776c:	4770      	bx	lr
    776e:	e9d1 2300 	ldrd	r2, r3, [r1]
    7772:	f004 0503 	and.w	r5, r4, #3
    7776:	f1c4 0000 	rsb	r0, r4, #0
    777a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    777e:	f014 0f04 	tst.w	r4, #4
    7782:	f891 f040 	pld	[r1, #64]	; 0x40
    7786:	fa0c f505 	lsl.w	r5, ip, r5
    778a:	ea62 0205 	orn	r2, r2, r5
    778e:	bf1c      	itt	ne
    7790:	ea63 0305 	ornne	r3, r3, r5
    7794:	4662      	movne	r2, ip
    7796:	f04f 0400 	mov.w	r4, #0
    779a:	e7a9      	b.n	76f0 <strlen+0x30>

0000779c <strncat>:
    779c:	0783      	lsls	r3, r0, #30
    779e:	b470      	push	{r4, r5, r6}
    77a0:	d127      	bne.n	77f2 <strncat+0x56>
    77a2:	6804      	ldr	r4, [r0, #0]
    77a4:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    77a8:	ea23 0304 	bic.w	r3, r3, r4
    77ac:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    77b0:	4603      	mov	r3, r0
    77b2:	d108      	bne.n	77c6 <strncat+0x2a>
    77b4:	f853 5f04 	ldr.w	r5, [r3, #4]!
    77b8:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    77bc:	ea24 0405 	bic.w	r4, r4, r5
    77c0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    77c4:	d0f6      	beq.n	77b4 <strncat+0x18>
    77c6:	781c      	ldrb	r4, [r3, #0]
    77c8:	b11c      	cbz	r4, 77d2 <strncat+0x36>
    77ca:	f813 4f01 	ldrb.w	r4, [r3, #1]!
    77ce:	2c00      	cmp	r4, #0
    77d0:	d1fb      	bne.n	77ca <strncat+0x2e>
    77d2:	188e      	adds	r6, r1, r2
    77d4:	428e      	cmp	r6, r1
    77d6:	f102 32ff 	add.w	r2, r2, #4294967295
    77da:	461d      	mov	r5, r3
    77dc:	d007      	beq.n	77ee <strncat+0x52>
    77de:	f811 4b01 	ldrb.w	r4, [r1], #1
    77e2:	f803 4b01 	strb.w	r4, [r3], #1
    77e6:	b114      	cbz	r4, 77ee <strncat+0x52>
    77e8:	2a00      	cmp	r2, #0
    77ea:	d1f3      	bne.n	77d4 <strncat+0x38>
    77ec:	706a      	strb	r2, [r5, #1]
    77ee:	bc70      	pop	{r4, r5, r6}
    77f0:	4770      	bx	lr
    77f2:	4603      	mov	r3, r0
    77f4:	e7e7      	b.n	77c6 <strncat+0x2a>
    77f6:	bf00      	nop

000077f8 <strnlen>:
    77f8:	b1c1      	cbz	r1, 782c <strnlen+0x34>
    77fa:	7803      	ldrb	r3, [r0, #0]
    77fc:	b1c3      	cbz	r3, 7830 <strnlen+0x38>
    77fe:	4401      	add	r1, r0
    7800:	1c43      	adds	r3, r0, #1
    7802:	4299      	cmp	r1, r3
    7804:	d016      	beq.n	7834 <strnlen+0x3c>
    7806:	b410      	push	{r4}
    7808:	781a      	ldrb	r2, [r3, #0]
    780a:	1c5c      	adds	r4, r3, #1
    780c:	b132      	cbz	r2, 781c <strnlen+0x24>
    780e:	42a1      	cmp	r1, r4
    7810:	4623      	mov	r3, r4
    7812:	d007      	beq.n	7824 <strnlen+0x2c>
    7814:	781a      	ldrb	r2, [r3, #0]
    7816:	1c5c      	adds	r4, r3, #1
    7818:	2a00      	cmp	r2, #0
    781a:	d1f8      	bne.n	780e <strnlen+0x16>
    781c:	1a18      	subs	r0, r3, r0
    781e:	f85d 4b04 	ldr.w	r4, [sp], #4
    7822:	4770      	bx	lr
    7824:	1a08      	subs	r0, r1, r0
    7826:	f85d 4b04 	ldr.w	r4, [sp], #4
    782a:	4770      	bx	lr
    782c:	4608      	mov	r0, r1
    782e:	4770      	bx	lr
    7830:	4618      	mov	r0, r3
    7832:	4770      	bx	lr
    7834:	1a08      	subs	r0, r1, r0
    7836:	4770      	bx	lr

00007838 <register_fini>:
    7838:	4b02      	ldr	r3, [pc, #8]	; (7844 <register_fini+0xc>)
    783a:	b113      	cbz	r3, 7842 <register_fini+0xa>
    783c:	4802      	ldr	r0, [pc, #8]	; (7848 <register_fini+0x10>)
    783e:	f000 b879 	b.w	7934 <atexit>
    7842:	4770      	bx	lr
    7844:	00000000 	.word	0x00000000
    7848:	00007941 	.word	0x00007941

0000784c <__call_exitprocs>:
    784c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7850:	4b35      	ldr	r3, [pc, #212]	; (7928 <__call_exitprocs+0xdc>)
    7852:	b085      	sub	sp, #20
    7854:	460f      	mov	r7, r1
    7856:	9003      	str	r0, [sp, #12]
    7858:	6818      	ldr	r0, [r3, #0]
    785a:	f000 f895 	bl	7988 <__retarget_lock_acquire_recursive>
    785e:	4b33      	ldr	r3, [pc, #204]	; (792c <__call_exitprocs+0xe0>)
    7860:	681b      	ldr	r3, [r3, #0]
    7862:	9301      	str	r3, [sp, #4]
    7864:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    7868:	9302      	str	r3, [sp, #8]
    786a:	46b9      	mov	r9, r7
    786c:	9b01      	ldr	r3, [sp, #4]
    786e:	f8d3 6148 	ldr.w	r6, [r3, #328]	; 0x148
    7872:	b33e      	cbz	r6, 78c4 <__call_exitprocs+0x78>
    7874:	f8dd a008 	ldr.w	sl, [sp, #8]
    7878:	f04f 0801 	mov.w	r8, #1
    787c:	6874      	ldr	r4, [r6, #4]
    787e:	1e65      	subs	r5, r4, #1
    7880:	d40f      	bmi.n	78a2 <__call_exitprocs+0x56>
    7882:	3401      	adds	r4, #1
    7884:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    7888:	2700      	movs	r7, #0
    788a:	f1b9 0f00 	cmp.w	r9, #0
    788e:	d020      	beq.n	78d2 <__call_exitprocs+0x86>
    7890:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    7894:	454b      	cmp	r3, r9
    7896:	d01c      	beq.n	78d2 <__call_exitprocs+0x86>
    7898:	3d01      	subs	r5, #1
    789a:	1c6b      	adds	r3, r5, #1
    789c:	f1a4 0404 	sub.w	r4, r4, #4
    78a0:	d1f3      	bne.n	788a <__call_exitprocs+0x3e>
    78a2:	4b23      	ldr	r3, [pc, #140]	; (7930 <__call_exitprocs+0xe4>)
    78a4:	b173      	cbz	r3, 78c4 <__call_exitprocs+0x78>
    78a6:	e9d6 3200 	ldrd	r3, r2, [r6]
    78aa:	2a00      	cmp	r2, #0
    78ac:	d134      	bne.n	7918 <__call_exitprocs+0xcc>
    78ae:	2b00      	cmp	r3, #0
    78b0:	d032      	beq.n	7918 <__call_exitprocs+0xcc>
    78b2:	4630      	mov	r0, r6
    78b4:	f8ca 3000 	str.w	r3, [sl]
    78b8:	f3af 8000 	nop.w
    78bc:	f8da 6000 	ldr.w	r6, [sl]
    78c0:	2e00      	cmp	r6, #0
    78c2:	d1db      	bne.n	787c <__call_exitprocs+0x30>
    78c4:	4b18      	ldr	r3, [pc, #96]	; (7928 <__call_exitprocs+0xdc>)
    78c6:	6818      	ldr	r0, [r3, #0]
    78c8:	b005      	add	sp, #20
    78ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    78ce:	f000 b863 	b.w	7998 <__retarget_lock_release_recursive>
    78d2:	6873      	ldr	r3, [r6, #4]
    78d4:	6822      	ldr	r2, [r4, #0]
    78d6:	3b01      	subs	r3, #1
    78d8:	42ab      	cmp	r3, r5
    78da:	bf0c      	ite	eq
    78dc:	6075      	streq	r5, [r6, #4]
    78de:	6027      	strne	r7, [r4, #0]
    78e0:	2a00      	cmp	r2, #0
    78e2:	d0d9      	beq.n	7898 <__call_exitprocs+0x4c>
    78e4:	f8d6 1188 	ldr.w	r1, [r6, #392]	; 0x188
    78e8:	f8d6 b004 	ldr.w	fp, [r6, #4]
    78ec:	fa08 f305 	lsl.w	r3, r8, r5
    78f0:	420b      	tst	r3, r1
    78f2:	d108      	bne.n	7906 <__call_exitprocs+0xba>
    78f4:	4790      	blx	r2
    78f6:	6873      	ldr	r3, [r6, #4]
    78f8:	455b      	cmp	r3, fp
    78fa:	d1b7      	bne.n	786c <__call_exitprocs+0x20>
    78fc:	f8da 3000 	ldr.w	r3, [sl]
    7900:	42b3      	cmp	r3, r6
    7902:	d0c9      	beq.n	7898 <__call_exitprocs+0x4c>
    7904:	e7b2      	b.n	786c <__call_exitprocs+0x20>
    7906:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
    790a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
    790e:	4203      	tst	r3, r0
    7910:	d107      	bne.n	7922 <__call_exitprocs+0xd6>
    7912:	9803      	ldr	r0, [sp, #12]
    7914:	4790      	blx	r2
    7916:	e7ee      	b.n	78f6 <__call_exitprocs+0xaa>
    7918:	46b2      	mov	sl, r6
    791a:	461e      	mov	r6, r3
    791c:	2e00      	cmp	r6, #0
    791e:	d1ad      	bne.n	787c <__call_exitprocs+0x30>
    7920:	e7d0      	b.n	78c4 <__call_exitprocs+0x78>
    7922:	4608      	mov	r0, r1
    7924:	4790      	blx	r2
    7926:	e7e6      	b.n	78f6 <__call_exitprocs+0xaa>
    7928:	10000440 	.word	0x10000440
    792c:	00007d80 	.word	0x00007d80
    7930:	00000000 	.word	0x00000000

00007934 <atexit>:
    7934:	2300      	movs	r3, #0
    7936:	4601      	mov	r1, r0
    7938:	461a      	mov	r2, r3
    793a:	4618      	mov	r0, r3
    793c:	f000 b82e 	b.w	799c <__register_exitproc>

00007940 <__libc_fini_array>:
    7940:	b538      	push	{r3, r4, r5, lr}
    7942:	4c0a      	ldr	r4, [pc, #40]	; (796c <__libc_fini_array+0x2c>)
    7944:	4d0a      	ldr	r5, [pc, #40]	; (7970 <__libc_fini_array+0x30>)
    7946:	1b64      	subs	r4, r4, r5
    7948:	10a4      	asrs	r4, r4, #2
    794a:	d00a      	beq.n	7962 <__libc_fini_array+0x22>
    794c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    7950:	3b01      	subs	r3, #1
    7952:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    7956:	3c01      	subs	r4, #1
    7958:	f855 3904 	ldr.w	r3, [r5], #-4
    795c:	4798      	blx	r3
    795e:	2c00      	cmp	r4, #0
    7960:	d1f9      	bne.n	7956 <__libc_fini_array+0x16>
    7962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7966:	f000 b881 	b.w	7a6c <_fini>
    796a:	bf00      	nop
    796c:	10000450 	.word	0x10000450
    7970:	1000044c 	.word	0x1000044c

00007974 <__retarget_lock_init>:
    7974:	4770      	bx	lr
    7976:	bf00      	nop

00007978 <__retarget_lock_init_recursive>:
    7978:	4770      	bx	lr
    797a:	bf00      	nop

0000797c <__retarget_lock_close>:
    797c:	4770      	bx	lr
    797e:	bf00      	nop

00007980 <__retarget_lock_close_recursive>:
    7980:	4770      	bx	lr
    7982:	bf00      	nop

00007984 <__retarget_lock_acquire>:
    7984:	4770      	bx	lr
    7986:	bf00      	nop

00007988 <__retarget_lock_acquire_recursive>:
    7988:	4770      	bx	lr
    798a:	bf00      	nop

0000798c <__retarget_lock_try_acquire>:
    798c:	2001      	movs	r0, #1
    798e:	4770      	bx	lr

00007990 <__retarget_lock_try_acquire_recursive>:
    7990:	2001      	movs	r0, #1
    7992:	4770      	bx	lr

00007994 <__retarget_lock_release>:
    7994:	4770      	bx	lr
    7996:	bf00      	nop

00007998 <__retarget_lock_release_recursive>:
    7998:	4770      	bx	lr
    799a:	bf00      	nop

0000799c <__register_exitproc>:
    799c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    79a0:	4d2b      	ldr	r5, [pc, #172]	; (7a50 <__register_exitproc+0xb4>)
    79a2:	4606      	mov	r6, r0
    79a4:	6828      	ldr	r0, [r5, #0]
    79a6:	4698      	mov	r8, r3
    79a8:	460f      	mov	r7, r1
    79aa:	4691      	mov	r9, r2
    79ac:	f7ff ffec 	bl	7988 <__retarget_lock_acquire_recursive>
    79b0:	4b28      	ldr	r3, [pc, #160]	; (7a54 <__register_exitproc+0xb8>)
    79b2:	681c      	ldr	r4, [r3, #0]
    79b4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    79b8:	2b00      	cmp	r3, #0
    79ba:	d03d      	beq.n	7a38 <__register_exitproc+0x9c>
    79bc:	685a      	ldr	r2, [r3, #4]
    79be:	2a1f      	cmp	r2, #31
    79c0:	dc0d      	bgt.n	79de <__register_exitproc+0x42>
    79c2:	f102 0c01 	add.w	ip, r2, #1
    79c6:	bb16      	cbnz	r6, 7a0e <__register_exitproc+0x72>
    79c8:	3202      	adds	r2, #2
    79ca:	f8c3 c004 	str.w	ip, [r3, #4]
    79ce:	6828      	ldr	r0, [r5, #0]
    79d0:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    79d4:	f7ff ffe0 	bl	7998 <__retarget_lock_release_recursive>
    79d8:	2000      	movs	r0, #0
    79da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    79de:	4b1e      	ldr	r3, [pc, #120]	; (7a58 <__register_exitproc+0xbc>)
    79e0:	b37b      	cbz	r3, 7a42 <__register_exitproc+0xa6>
    79e2:	f44f 70c8 	mov.w	r0, #400	; 0x190
    79e6:	f3af 8000 	nop.w
    79ea:	4603      	mov	r3, r0
    79ec:	b348      	cbz	r0, 7a42 <__register_exitproc+0xa6>
    79ee:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    79f2:	2100      	movs	r1, #0
    79f4:	e9c0 2100 	strd	r2, r1, [r0]
    79f8:	f04f 0c01 	mov.w	ip, #1
    79fc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    7a00:	460a      	mov	r2, r1
    7a02:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    7a06:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    7a0a:	2e00      	cmp	r6, #0
    7a0c:	d0dc      	beq.n	79c8 <__register_exitproc+0x2c>
    7a0e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    7a12:	2401      	movs	r4, #1
    7a14:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    7a18:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    7a1c:	4094      	lsls	r4, r2
    7a1e:	4320      	orrs	r0, r4
    7a20:	2e02      	cmp	r6, #2
    7a22:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    7a26:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    7a2a:	d1cd      	bne.n	79c8 <__register_exitproc+0x2c>
    7a2c:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    7a30:	430c      	orrs	r4, r1
    7a32:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    7a36:	e7c7      	b.n	79c8 <__register_exitproc+0x2c>
    7a38:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    7a3c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    7a40:	e7bc      	b.n	79bc <__register_exitproc+0x20>
    7a42:	6828      	ldr	r0, [r5, #0]
    7a44:	f7ff ffa8 	bl	7998 <__retarget_lock_release_recursive>
    7a48:	f04f 30ff 	mov.w	r0, #4294967295
    7a4c:	e7c5      	b.n	79da <__register_exitproc+0x3e>
    7a4e:	bf00      	nop
    7a50:	10000440 	.word	0x10000440
    7a54:	00007d80 	.word	0x00007d80
    7a58:	00000000 	.word	0x00000000

00007a5c <_exit>:
    7a5c:	e7fe      	b.n	7a5c <_exit>
    7a5e:	bf00      	nop

00007a60 <_init>:
    7a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a62:	bf00      	nop
    7a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7a66:	bc08      	pop	{r3}
    7a68:	469e      	mov	lr, r3
    7a6a:	4770      	bx	lr

00007a6c <_fini>:
    7a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a6e:	bf00      	nop
    7a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7a72:	bc08      	pop	{r3}
    7a74:	469e      	mov	lr, r3
    7a76:	4770      	bx	lr

00007a78 <Ident>:
    7a78:	4350 4e41 522d 756f 6574 5f72 4446 0000     PCAN-Router_FD..

00007a88 <TimingForBootloader.6186>:
    7a88:	b400 04c4 000a 000c 0103 0060 0001 0004     ..........`.....
    7a98:	0207 0001 b400 04c4 000a 000c 0103 0060     ..............`.
    7aa8:	0001 0004 0207 0001                         ........

00007ab0 <Timing_CANx>:
    7ab0:	b400 04c4 000a 000c 0103 0060 0001 0004     ..........`.....
    7ac0:	0207 0001 b400 04c4 000a 000c 0103 0060     ..............`.
    7ad0:	0001 0004 0207 0001                         ........

00007ad8 <map_table_one2one_CAN_2_CAN>:
	...

00007b38 <m_data_length_map>:
    7b38:	0100 0302 0504 0706 0c08 1410 2018 4030     ............. 0@

00007b48 <srr_can_ids>:
    7b48:	02c6 0000 02c7 0000 02c8 0000 02c9 0000     ................
    7b58:	02ca 0000 02cb 0000 02cc 0000 02cd 0000     ................
    7b68:	02ce 0000 02cf 0000 02d0 0000 02d1 0000     ................
    7b78:	02d2 0000 02d3 0000 02d4 0000 02d5 0000     ................
    7b88:	02d6 0000 02d7 0000 02d8 0000 02d9 0000     ................
    7b98:	6163 6c6c 6220 6f6f 6c74 616f 6564 2172     call bootloader!
    7ba8:	0000 0000                                   ....

00007bac <TxBufferSizeFD>:
    7bac:	0014 0018 0018 0018 0018 001c 001c 001c     ................
    7bbc:	001c 0020 0024 0028 002c 0034 0044 0054     .. .$.(.,.4.D.T.

00007bcc <TxBufferSize>:
    7bcc:	0014 0018 0018 0018 0018 001c 001c 001c     ................
    7bdc:	001c 001c 001c 001c 001c 001c 001c 001c     ................

00007bec <hex2ascii>:
    7bec:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
    7bfc:	6822 5477 7079 2265 3a20 2220 3034 2c22     "hwType" : "40",
    7c0c:	0000 0000 7622 7265 6973 6e6f 2273 3a20     ...."versions" :
    7c1c:	7b20 0000 6222 6f6f 6c74 616f 6564 2272      {.."bootloader"
    7c2c:	3a20 2220 0000 0000 6622 7269 776d 7261      : "...."firmwar
    7c3c:	2265 3a20 0020 0000 0022 0000 2c22 0000     e" : ..."...",..
    7c4c:	6822 7261 7764 7261 2265 3a20 2220 0000     "hardware" : "..
    7c5c:	2d31 0033 2d34 0035 6622 6770 2261 3a20     1-3.4-5."fpga" :
    7c6c:	2220 0000 6622 616c 6873 7250 746f 636f      ".."flashProtoc
    7c7c:	6c6f 2022 203a 3122 342e 0022 2c7d 0000     ol" : "1.4".},..
    7c8c:	7522 696e 7571 4965 2264 3a20 2220 0000     "uniqueId" : "..
    7c9c:	7322 6365 7275 7469 2279 3a20 7b20 0000     "security" : {..
    7cac:	6322 7072 6e45 6261 656c 2022 203a 7922     "crpEnable" : "y
    7cbc:	7365 2c22 0000 0000 6322 7072 6e45 6261     es",...."crpEnab
    7ccc:	656c 2022 203a 6e22 226f 002c 6522 636e     le" : "no",."enc
    7cdc:	7972 7470 6465 2022 203a 7922 7365 0022     rypted" : "yes".
    7cec:	6522 636e 7972 7470 6465 2022 203a 6e22     "encrypted" : "n
    7cfc:	226f 0000 6422 7369 6c70 7961 614e 656d     o".."displayName
    7d0c:	2022 203a 0000 0000 7522 6573 4972 666e     " : ...."userInf
    7d1c:	226f 3a20 2020 0022 6622 616c 6873 6f4d     o" :  "."flashMo
    7d2c:	6564 7942 2022 203a 6622 7269 776d 7261     deBy" : "firmwar
    7d3c:	2065 7473 6c69 206c 7572 6e6e 6e69 2067     e still running 
    7d4c:	2e2e 222e 002c 0000 7022 6f72 6966 656c     ...",..."profile
    7d5c:	6f4d 2264 3a20 7b20 0000 0000 6422 7461     Mod" : {...."dat
    7d6c:	4d61 646f 2265 3a20 2220 2230 0000 0000     aMode" : "0"....
    7d7c:	007d 0000                                   }...

00007d80 <_global_impure_ptr>:
    7d80:	0018 1000                                   ....

00007d84 <__EH_FRAME_BEGIN__>:
    7d84:	0000 0000                                   ....
